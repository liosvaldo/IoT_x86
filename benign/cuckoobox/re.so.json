{
    "info": {
        "added": 1626981276.255232, 
        "started": 1627057340.878428, 
        "duration": 88, 
        "ended": 1627057429.440726, 
        "owner": null, 
        "score": 0.0, 
        "id": 2325808, 
        "category": "file", 
        "git": {
            "head": "", 
            "fetch_head": ""
        }, 
        "monitor": null, 
        "package": "elf", 
        "route": "internet", 
        "custom": null, 
        "machine": {
            "status": "stopped", 
            "name": "Ubuntu1904x641", 
            "label": "Ubuntu1904x641", 
            "platform": "linux", 
            "manager": "VirtualBox", 
            "started_on": "2021-07-23 16:22:21", 
            "shutdown_on": "2021-07-23 16:23:49"
        }, 
        "platform": "linux", 
        "version": "2.0.7", 
        "options": "procmemdump=yes,route=internet"
    }, 
    "signatures": [], 
    "target": {
        "category": "file", 
        "file": {
            "mimetype": "application/x-sharedlib", 
            "yara": [], 
            "sha1": "07fcc97305bc9bd61ab21382b75ace6a5f723289", 
            "name": "re.so", 
            "type": "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, BuildID[sha1]=51052eaef833c5b08a9919ed3bed39a02fad2044, stripped", 
            "sha256": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a", 
            "urls": [], 
            "crc32": "24F44498", 
            "path": "/srv/cuckoo/cwd/storage/binaries/3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a", 
            "ssdeep": null, 
            "size": 641036, 
            "sha512": "c24bacd9d04dfd18d6bd05f235afbed909523147a20d404d6978342ca60617d64158f8b8d943d114f5fcc09fc1daf1fd180a638921b743a2c315b2ab8bc1c232", 
            "md5": "b8f31aa92cf9bb9d0d1d159c558d4a18"
        }, 
        "custom": null
    }, 
    "irma": {
        "status": 0, 
        "probes_finished": 16, 
        "scan_id": "a4535783-2bdc-4c0d-9acb-6755e55313ce", 
        "parent_file_sha256": null, 
        "name": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a", 
        "scan_date": 1627076416, 
        "other_results": [], 
        "submitter": "cli", 
        "probes_total": 16, 
        "file_infos": {
            "mimetype": "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)", 
            "sha1": "07fcc97305bc9bd61ab21382b75ace6a5f723289", 
            "tags": [], 
            "timestamp_first_scan": 1626894962.45, 
            "timestamp_last_scan": 1627076445.04, 
            "sha256": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a", 
            "md5": "b8f31aa92cf9bb9d0d1d159c558d4a18", 
            "size": 641036
        }, 
        "probe_results": {
            "antivirus": {
                "Avast Core Security (Linux)": {
                    "status": 0, 
                    "duration": 0.01, 
                    "version": "3.0.3", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "F-Secure Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.03, 
                    "version": "11.10", 
                    "results": null, 
                    "virus_database_version": "2021-06-08_09"
                }, 
                "Windows Defender (Windows)": {
                    "status": 0, 
                    "duration": 0.05, 
                    "version": "1.1.18300.4", 
                    "results": null, 
                    "virus_database_version": "1.343.1173.0"
                }, 
                "Comodo Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 2.06, 
                    "version": "1.1.268025.1", 
                    "results": null, 
                    "virus_database_version": "2021-05-05"
                }, 
                "ESET NOD32 Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 3.86, 
                    "version": "4.0.96", 
                    "results": null, 
                    "virus_database_version": "6087dbf0-1e845 (2021-04-27)"
                }, 
                "GData (Windows)": {
                    "status": 0, 
                    "duration": 0.16, 
                    "version": "5.5.20197.1358", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Forticlient (Linux)": {
                    "status": 0, 
                    "duration": 3.03, 
                    "version": "unavailable", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Avira (Windows)": {
                    "status": 0, 
                    "duration": 3.8, 
                    "version": "8.3.62.226", 
                    "results": null, 
                    "virus_database_version": "8.18.36.236"
                }, 
                "Kaspersky (Windows)": {
                    "status": 0, 
                    "duration": 3.09, 
                    "version": "21.3", 
                    "results": null, 
                    "virus_database_version": "2021-07-21 19:18:00 (full)"
                }, 
                "McAfee CLI scanner (Linux)": {
                    "status": 0, 
                    "duration": 4.92, 
                    "version": "6.0.6.653", 
                    "results": null, 
                    "virus_database_version": "9966"
                }, 
                "Sophos Anti-Virus (Linux)": {
                    "status": 0, 
                    "duration": 11.71, 
                    "version": "5.74.0", 
                    "results": null, 
                    "virus_database_version": "5.83 (23 March 2021)"
                }, 
                "DrWeb Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.09, 
                    "version": "11.1.9.2103151924", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "ClamAV (Linux)": {
                    "status": 0, 
                    "duration": 0.05, 
                    "version": "0.103.2", 
                    "results": null, 
                    "virus_database_version": "26190"
                }, 
                "eScan Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 3.67, 
                    "version": "7.0.21", 
                    "results": null, 
                    "virus_database_version": "7.88854 (16/06/2021)"
                }, 
                "Emsisoft Commandline Scanner (Windows)": {
                    "status": 0, 
                    "duration": 0.22, 
                    "version": "2021.1.0.10606", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Bitdefender Antivirus Scanner (Linux)": {
                    "status": 0, 
                    "duration": 5.47, 
                    "version": "7.90123", 
                    "results": null, 
                    "virus_database_version": null
                }
            }
        }, 
        "path": "", 
        "result_id": "7f802d72-fd66-473a-bcd9-102d479eceb3", 
        "file_sha256": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a"
    }, 
    "suricata": {
        "tls": [
            {
                "src_ip": "192.168.168.101", 
                "version": "TLS 1.2", 
                "src_port": 45928, 
                "dst_port": 443, 
                "timestamp": "2021-07-23T16:22:53.761315+0300", 
                "dst_ip": "91.189.92.39", 
                "fingerprint": "ee:ac:e2:90:ec:e5:1a:a1:dd:74:f7:d4:fa:e8:3e:d9:58:da:e9:25", 
                "subject": "CN=api.snapcraft.io", 
                "issuer": "C=US, O=Let's Encrypt, CN=R3"
            }
        ], 
        "files": [], 
        "alerts": [], 
        "http": []
    }, 
    "virustotal": {
        "scans": {
            "Bkav": {
                "detected": false, 
                "version": "1.3.0.9899", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Lionic": {
                "detected": false, 
                "version": "4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "MicroWorld-eScan": {
                "detected": false, 
                "version": "14.0.409.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "FireEye": {
                "detected": false, 
                "version": "32.44.1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "CAT-QuickHeal": {
                "detected": false, 
                "version": "14.00", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "ALYac": {
                "detected": false, 
                "version": "1.1.3.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Malwarebytes": {
                "detected": false, 
                "version": "4.2.2.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Zillya": {
                "detected": false, 
                "version": "2.0.0.4382", 
                "result": null, 
                "normalized": [], 
                "update": "20210607"
            }, 
            "Sangfor": {
                "detected": false, 
                "version": "2.9.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210607"
            }, 
            "K7AntiVirus": {
                "detected": false, 
                "version": "11.187.37398", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "K7GW": {
                "detected": false, 
                "version": "11.187.37398", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Arcabit": {
                "detected": false, 
                "version": "1.0.0.886", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Baidu": {
                "detected": false, 
                "version": "1.0.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20190318"
            }, 
            "Cyren": {
                "detected": false, 
                "version": "6.3.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Symantec": {
                "detected": false, 
                "version": "1.14.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ESET-NOD32": {
                "detected": false, 
                "version": "23431", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TrendMicro-HouseCall": {
                "detected": false, 
                "version": "10.0.0.1040", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Avast": {
                "detected": false, 
                "version": "21.1.5827.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ClamAV": {
                "detected": false, 
                "version": "0.103.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Kaspersky": {
                "detected": false, 
                "version": "21.0.1.45", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "BitDefender": {
                "detected": false, 
                "version": "7.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "NANO-Antivirus": {
                "detected": false, 
                "version": "1.0.146.25311", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "SUPERAntiSpyware": {
                "detected": false, 
                "version": "5.6.0.1032", 
                "result": null, 
                "normalized": [], 
                "update": "20210605"
            }, 
            "Tencent": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Ad-Aware": {
                "detected": false, 
                "version": "3.0.21.179", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TACHYON": {
                "detected": false, 
                "version": "2021-06-09.01", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Sophos": {
                "detected": false, 
                "version": "1.0.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Comodo": {
                "detected": false, 
                "version": "33605", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "F-Secure": {
                "detected": false, 
                "version": "12.0.86.52", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "DrWeb": {
                "detected": false, 
                "version": "7.0.49.9080", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "VIPRE": {
                "detected": false, 
                "version": "93160", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TrendMicro": {
                "detected": false, 
                "version": "11.0.0.1006", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "McAfee-GW-Edition": {
                "detected": false, 
                "version": "v2019.1.2+3728", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "CMC": {
                "detected": false, 
                "version": "2.10.2019.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210506"
            }, 
            "Emsisoft": {
                "detected": false, 
                "version": "2018.12.0.1641", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Ikarus": {
                "detected": false, 
                "version": "0.1.5.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Avast-Mobile": {
                "detected": false, 
                "version": "210608-00", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Jiangmin": {
                "detected": false, 
                "version": "16.0.100", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Avira": {
                "detected": false, 
                "version": "8.3.3.12", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Antiy-AVL": {
                "detected": false, 
                "version": "3.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Kingsoft": {
                "detected": false, 
                "version": "2017.9.26.565", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Gridinsoft": {
                "detected": false, 
                "version": "1.0.44.137", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Microsoft": {
                "detected": false, 
                "version": "1.1.18200.4", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ViRobot": {
                "detected": false, 
                "version": "2014.3.20.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ZoneAlarm": {
                "detected": false, 
                "version": "1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "GData": {
                "detected": false, 
                "version": "A:25.29904B:27.23297", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Cynet": {
                "detected": false, 
                "version": "4.0.0.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "AhnLab-V3": {
                "detected": false, 
                "version": "3.20.2.10137", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Acronis": {
                "detected": false, 
                "version": "1.1.1.82", 
                "result": null, 
                "normalized": [], 
                "update": "20210512"
            }, 
            "McAfee": {
                "detected": false, 
                "version": "6.0.6.653", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "MAX": {
                "detected": false, 
                "version": "2019.9.16.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "VBA32": {
                "detected": false, 
                "version": "5.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Zoner": {
                "detected": false, 
                "version": "0.0.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Rising": {
                "detected": false, 
                "version": "25.0.0.26", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Yandex": {
                "detected": false, 
                "version": "5.5.2.24", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "SentinelOne": {
                "detected": false, 
                "version": "5.1.0.5", 
                "result": null, 
                "normalized": [], 
                "update": "20210518"
            }, 
            "MaxSecure": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Fortinet": {
                "detected": false, 
                "version": "6.2.142.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "BitDefenderTheta": {
                "detected": false, 
                "version": "7.2.37796.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210602"
            }, 
            "Panda": {
                "detected": false, 
                "version": "4.6.4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Qihoo-360": {
                "detected": false, 
                "version": "1.0.0.1120", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }
        }, 
        "scan_id": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a-1623216728", 
        "sha1": "07fcc97305bc9bd61ab21382b75ace6a5f723289", 
        "resource": "b8f31aa92cf9bb9d0d1d159c558d4a18", 
        "response_code": 1, 
        "scan_date": "2021-06-09 05:32:08", 
        "permalink": "https://www.virustotal.com/gui/file/3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a/detection/f-3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a-1623216728", 
        "summary": {
            "positives": 0, 
            "permalink": "https://www.virustotal.com/gui/file/3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a/detection/f-3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a-1623216728", 
            "scan_date": "2021-06-09 05:32:08"
        }, 
        "sha256": "3960fb07a050ab8302d2884ab0a9a9f5c4a37c6fc3632599dd7b76b48889187a", 
        "normalized": [], 
        "total": 61, 
        "positives": 0, 
        "verbose_msg": "Scan finished, information embedded", 
        "md5": "b8f31aa92cf9bb9d0d1d159c558d4a18"
    }, 
    "network": {
        "udp": [], 
        "dns_servers": [], 
        "http": [], 
        "smtp": [], 
        "tcp": [], 
        "geoinfo": {}, 
        "mitm": [], 
        "https_ex": [], 
        "http_ex": [], 
        "sorted_pcap_sha256": "e4233982c50ee129affdb3272709d1a42c25eba87298bbcc08b2699c3409f746", 
        "icmp": [], 
        "tls": [], 
        "dead_hosts": [], 
        "smtp_ex": [], 
        "hosts": [], 
        "pcap_sha256": "0dee88eb70146aacf2a62acec5190831c75f1e93ee944d25f708bd3460abb4fd", 
        "dns": [], 
        "domains": [], 
        "irc": []
    }, 
    "resubmit": {
        "resubmit_ids": []
    }, 
    "snort": {
        "alerts": []
    }, 
    "debug": {
        "action": [], 
        "dbgview": [], 
        "errors": [], 
        "log": [
            "2021-07-22 19:14:36,017 [root] DEBUG: Starting analyzer from: /tmp/tmpaPptuH\n", 
            "2021-07-22 19:14:36,017 [root] DEBUG: Storing results at: /tmp/YyPGqv\n", 
            "2021-07-22 19:14:37,457 [modules.auxiliary.filecollector] INFO: FileCollector started v0.08\n", 
            "2021-07-22 19:14:37,460 [modules.auxiliary.human] INFO: Human started v0.02\n", 
            "2021-07-22 19:14:37,463 [modules.auxiliary.screenshots] INFO: Screenshots started v0.03\n", 
            "2021-07-22 19:14:42,806 [lib.core.packages] INFO: Process startup took 5.34 seconds\n", 
            "2021-07-22 19:14:42,811 [root] INFO: Added new process to list with pid: 2057\n", 
            "2021-07-22 19:14:48,816 [root] INFO: Process with pid 2057 has terminated\n", 
            "2021-07-22 19:14:48,817 [root] INFO: Process list is empty, terminating analysis.\n", 
            "2021-07-22 19:14:51,821 [lib.core.packages] INFO: Package requested stop\n", 
            "2021-07-22 19:14:51,823 [lib.core.packages] WARNING: Exception uploading log: [Errno 3] No such process\n"
        ], 
        "cuckoo": [
            "2021-07-23 16:22:21,304 [cuckoo.core.scheduler] INFO: Task #2325808: acquired machine Ubuntu1904x641 (label=Ubuntu1904x641)\n", 
            "2021-07-23 16:22:21,305 [cuckoo.core.resultserver] DEBUG: Now tracking machine 192.168.168.101 for task #2325808\n", 
            "2021-07-23 16:22:21,422 [cuckoo.auxiliary.sniffer] INFO: Started sniffer with PID 3735622 (interface=vboxnet0, host=192.168.168.101)\n", 
            "2021-07-23 16:22:21,537 [cuckoo.machinery.virtualbox] DEBUG: Starting vm Ubuntu1904x641\n", 
            "2021-07-23 16:22:21,862 [cuckoo.machinery.virtualbox] DEBUG: Restoring virtual machine Ubuntu1904x641 to Snapshot\n", 
            "2021-07-23 16:22:30,386 [cuckoo.core.guest] INFO: Starting analysis #2325808 on guest (id=Ubuntu1904x641, ip=192.168.168.101)\n", 
            "2021-07-23 16:22:31,390 [cuckoo.core.guest] DEBUG: Ubuntu1904x641: not ready yet\n", 
            "2021-07-23 16:22:32,396 [cuckoo.core.guest] DEBUG: Ubuntu1904x641: not ready yet\n", 
            "2021-07-23 16:22:32,987 [cuckoo.core.guest] DEBUG: Ubuntu1904x641: not ready yet\n", 
            "2021-07-23 16:22:36,005 [cuckoo.core.guest] INFO: Guest is running Cuckoo Agent 0.10 (id=Ubuntu1904x641, ip=192.168.168.101)\n", 
            "2021-07-23 16:22:36,016 [cuckoo.core.guest] DEBUG: Uploading analyzer to guest (id=Ubuntu1904x641, ip=192.168.168.101, monitor=latest, size=70098)\n", 
            "2021-07-23 16:22:37,189 [cuckoo.core.resultserver] DEBUG: Task #2325808: live log analysis.log initialized.\n", 
            "2021-07-23 16:22:41,671 [cuckoo.core.resultserver] DEBUG: Task #2325808: File upload for 'shots/0001.jpg'\n", 
            "2021-07-23 16:22:41,677 [cuckoo.core.resultserver] DEBUG: Task #2325808 uploaded file length: 171490\n", 
            "2021-07-23 16:22:51,218 [cuckoo.core.guest] DEBUG: Ubuntu1904x641: analysis #2325808 still processing\n", 
            "2021-07-23 16:22:53,027 [cuckoo.core.resultserver] DEBUG: Task #2325808: File upload for 'logs/all.stap'\n", 
            "2021-07-23 16:22:53,029 [cuckoo.core.resultserver] DEBUG: Task #2325808 uploaded file length: 0\n", 
            "2021-07-23 16:23:06,357 [cuckoo.core.guest] DEBUG: Ubuntu1904x641: analysis #2325808 still processing\n", 
            "2021-07-23 16:23:18,434 [cuckoo.core.guest] INFO: Ubuntu1904x641: end of analysis reached!\n", 
            "2021-07-23 16:23:18,444 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Redsocks\n", 
            "2021-07-23 16:23:18,511 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Sniffer\n", 
            "2021-07-23 16:23:30,369 [cuckoo.machinery.virtualbox] INFO: Successfully generated memory dump for virtual machine with label Ubuntu1904x641 to path /srv/cuckoo/cwd/storage/analyses/2325808/memory.dmp\n", 
            "2021-07-23 16:23:30,372 [cuckoo.machinery.virtualbox] DEBUG: Stopping vm Ubuntu1904x641\n", 
            "2021-07-23 16:23:49,116 [cuckoo.core.resultserver] DEBUG: Stopped tracking machine 192.168.168.101 for task #2325808\n", 
            "2021-07-23 16:23:49,117 [cuckoo.core.resultserver] DEBUG: Cancel <Context for LOG> for task 2325808\n", 
            "2021-07-23 16:23:49,254 [cuckoo.core.scheduler] DEBUG: Released database task #2325808\n", 
            "2021-07-23 16:23:49,338 [cuckoo.core.scheduler] INFO: Task #2325808: analysis procedure completed\n"
        ]
    }, 
    "strings": [
        "__gmon_start__", 
        "_ITM_deregisterTMCloneTable", 
        "_ITM_registerTMCloneTable", 
        "__cxa_finalize", 
        "PL_valid_types_PVX", 
        "PL_valid_types_IVX", 
        "__assert_fail", 
        "Perl_pv_pretty", 
        "Perl_re_printf", 
        "Perl_ckwarn", 
        "Perl_ckwarn_d", 
        "PL_utf8skip", 
        "Perl_utf8n_to_uvchr_error", 
        "PL_op_desc", 
        "Perl_warner", 
        "Perl_isFOO_lc", 
        "Perl_swash_fetch", 
        "Perl__core_swash_init", 
        "Perl_custom_op_get_field", 
        "PL_fold_locale", 
        "Perl__get_regclass_nonbitmap_data", 
        "Perl__invlist_search", 
        "Perl__force_out_malformed_utf8_message", 
        "Perl_safesysmalloc", 
        "Perl_safesysfree", 
        "Perl_reginitcolors", 
        "Perl_sv_force_normal_flags", 
        "Perl_sv_setsv_cow", 
        "memcpy", 
        "Perl_utf8_length", 
        "Perl_safesysrealloc", 
        "Perl_sv_pos_b2u_flags", 
        "PL_fold", 
        "PL_fold_latin1", 
        "Perl_newSVsv", 
        "Perl_sv_utf8_upgrade_flags_grow", 
        "Perl_mg_find", 
        "Perl_fbm_compile", 
        "Perl_sv_utf8_downgrade", 
        "Perl_croak_nocontext", 
        "PL_charclass", 
        "PL_latin1_lc", 
        "__ctype_tolower_loc", 
        "Perl_uvoffuni_to_utf8_flags", 
        "Perl_hv_common_key_len", 
        "Perl_av_fetch", 
        "Perl__to_utf8_fold_flags", 
        "Perl__load_PL_utf8_foldclosures", 
        "Perl_sv_2uv_flags", 
        "Perl_croak", 
        "Perl_re_exec_indentf", 
        "Perl_PerlIO_stderr", 
        "PerlIO_printf", 
        "PerlIO_vprintf", 
        "Perl_get_sv", 
        "Perl_sv_2iv_flags", 
        "Perl_sv_setuv", 
        "Perl_sv_newmortal", 
        "my_regprop", 
        "Perl_ck_warner", 
        "Perl__warn_problematic_locale", 
        "PL_reg_name", 
        "memcmp", 
        "Perl_foldEQ_utf8_flags", 
        "Perl_savestack_grow_cnt", 
        "Perl_save_pushptr", 
        "Perl_leave_scope", 
        "Perl_regnext", 
        "PL_regkind", 
        "Perl_sv_eq_flags", 
        "Perl_sv_setsv_flags", 
        "Perl_sv_mortalcopy_flags", 
        "PL_valid_types_RV", 
        "memset", 
        "Perl_newSVpvn_flags", 
        "Perl_gv_add_by_type", 
        "Perl__to_fold_latin1", 
        "Perl_save_scalar", 
        "Perl_pad_push", 
        "__ctype_b_loc", 
        "Perl_find_runcv", 
        "Perl_was_lvalue_sub", 
        "Perl_sv_magic", 
        "Perl_reg_temp_copy", 
        "Perl_deb", 
        "Perl_sv_free2", 
        "PL_block_type", 
        "Perl_cxinc", 
        "PL_valid_types_NVX", 
        "Perl_sv_pvn_force_flags", 
        "Perl_new_stackinfo", 
        "Perl__is_utf8_FOO_with_len", 
        "Perl_safesyscalloc", 
        "Perl_sv_2bool_flags", 
        "Perl__to_uni_fold_flags", 
        "Perl_sv_2pv_flags", 
        "Perl_croak_popstack", 
        "Perl_push_scope", 
        "Perl_savetmps", 
        "Perl_newSV", 
        "Perl_sv_2mortal", 
        "Perl_free_tmps", 
        "Perl_pop_scope", 
        "Perl__is_uni_FOO", 
        "my_re_intuit_start", 
        "Perl_fbm_instr", 
        "memchr", 
        "Perl_sv_peek", 
        "my_regexec", 
        "Perl_mg_find_mglob", 
        "Perl_sv_len_utf8", 
        "Perl_save_destructor_x", 
        "Perl_save_sptr", 
        "Perl_hv_iterinit", 
        "PL_memory_wrap", 
        "Perl_av_push", 
        "Perl_sv_magicext_mglob", 
        "Perl_sv_pos_u2b_flags", 
        "Perl_mg_size", 
        "Perl_rninstr", 
        "Perl_grok_atoUV", 
        "Perl_warn_nocontext", 
        "Perl_hv_common", 
        "Perl__is_utf8_perl_idstart_with_len", 
        "Perl__add_range_to_invlist", 
        "Perl_ck_warner_d", 
        "Perl_av_shift", 
        "Perl_newSV_type", 
        "Perl_av_undef", 
        "Perl_sv_catpvf", 
        "Perl_sv_catpvn_flags", 
        "Perl_av_store", 
        "Perl_newRV_noinc", 
        "Perl_newSVuv", 
        "Perl_form", 
        "Perl_av_exists", 
        "strlen", 
        "__memcpy_chk", 
        "Perl_vmess", 
        "Perl_av_clear", 
        "Perl_newSVpvf", 
        "Perl__invlist_intersection_maybe_complement_2nd", 
        "Perl__new_invlist", 
        "Perl_newSVpvn", 
        "Perl_sv_catsv_flags", 
        "Perl__get_swash_invlist", 
        "Perl__invlist_union_maybe_complement_2nd", 
        "Perl__invlist_invert", 
        "Perl_sv_catpv", 
        "Perl_amagic_call", 
        "Perl_gv_fetchpvn_flags", 
        "Perl_mg_get", 
        "Perl_sv_setpvn", 
        "Perl_mg_set", 
        "Perl_re_indentf", 
        "Perl_sv_setiv", 
        "Perl_sv_chop", 
        "my_reg_named_buff_fetch", 
        "my_reg_named_buff_exists", 
        "my_reg_named_buff_firstkey", 
        "my_reg_named_buff_nextkey", 
        "Perl_hv_iternext_flags", 
        "Perl_newSVhek", 
        "my_reg_named_buff_iter", 
        "my_reg_named_buff_scalar", 
        "Perl_newSViv", 
        "my_reg_named_buff_all", 
        "my_reg_named_buff", 
        "Perl_croak_no_modify", 
        "my_reg_numbered_buff_fetch", 
        "Perl_sv_set_undef", 
        "Perl_sv_untaint", 
        "my_reg_numbered_buff_store", 
        "my_reg_numbered_buff_length", 
        "Perl_report_uninit", 
        "Perl__is_utf8_char_helper", 
        "my_reg_qr_package", 
        "Perl_sv_setpv_bufsize", 
        "PL_valid_types_IV_set", 
        "Perl_sv_upgrade", 
        "Perl_sv_grow", 
        "strchr", 
        "strcspn", 
        "Perl_grok_hex", 
        "Perl_av_pop", 
        "Perl_grok_oct", 
        "Perl_grok_bslash_x", 
        "Perl__invlistEQ", 
        "Perl_grok_bslash_c", 
        "Perl_savepv", 
        "strcmp", 
        "Perl_savepvn", 
        "Perl_grok_bslash_o", 
        "Perl__new_invlist_C_array", 
        "strncmp", 
        "my_regdump", 
        "PL_reg_extflags_name", 
        "PL_reg_intflags_name", 
        "PL_varies_bitmask", 
        "memmove", 
        "PL_simple_bitmask", 
        "Perl_repeatcpy", 
        "my_re_op_compile", 
        "getenv", 
        "Perl_save_re_context", 
        "Perl_eval_sv", 
        "PL_bitcount", 
        "my_re_compile", 
        "my_reg_engine", 
        "my_re_intuit_string", 
        "my_regfree", 
        "Perl_op_refcnt_lock", 
        "Perl_op_refcnt_unlock", 
        "my_regdupe", 
        "Perl_sv_dup_inc", 
        "Perl_get_re_arg", 
        "PL_core_reg_engine", 
        "Perl_stack_grow", 
        "Perl_croak_xs_usage", 
        "boot_re", 
        "Perl_xs_handshake", 
        "Perl_newXS_deffile", 
        "Perl_newXS_flags", 
        "Perl_xs_boot_epilog", 
        "libc.so.6", 
        "__stack_chk_fail", 
        "_edata", 
        "__bss_start", 
        "GLIBC_2.3", 
        "GLIBC_2.3.4", 
        "GLIBC_2.1.3", 
        "GLIBC_2.4", 
        "GLIBC_2.0", 
        "t$hSRPQ", 
        "|$,e3=", 
        "t$$RSP", 
        "l$@+,$", 
        "D$(9D$", 
        ";D$8rk", 
        "t$(Pj?", 
        "L$D9l$", 
        "L$D9l$", 
        "T$<;B<", 
        "D$<;p<", 
        "D$<;p<v", 
        "9D$@s%", 
        "t$<9F<", 
        "D$ +D$", 
        "<1t <2", 
        "D$ +D$(", 
        ";|$8wn9", 
        "9D$@s ", 
        "t$ RPU", 
        "L$Hj\"j", 
        "D$|;D$(", 
        "|$(9|$@", 
        "|$(9|$@", 
        "L$(9L$@", 
        "D$|9D$(", 
        "D$(+F(", 
        "D$|;D$X", 
        "L$(9L$$", 
        "|$(9|$@", 
        "t$|;t$(", 
        "l$|;l$(", 
        "t$|9t$(", 
        "l$|9l$(", 
        "l$|9l$(", 
        "t$$9t$X", 
        "p49p0~", 
        "T$X9T$$", 
        "T$X9T$$", 
        "D$P+D$H", 
        "|$(9|$@", 
        "|$(9|$@", 
        "|$(9|$@", 
        "p49p0~", 
        "D$|9D$(", 
        "D$|;D$(", 
        "D$|;D$(", 
        "9D$(v]", 
        "l$|9l$(", 
        "D$|9D$(", 
        "9\\$@s[", 
        "D$|;D$(", 
        ";T$P~?", 
        "D$8+D$", 
        "RV+L$$", 
        "t$lQPU", 
        "T$P9T$", 
        "T$P+T$", 
        "L$4PPjBV", 
        "L$4PPjBV", 
        "L$@QQV", 
        "D$0+D$4", 
        "9D$8re", 
        "t$H9t$PwD", 
        "t$D+D$", 
        "D$<9L$H", 
        "T$T9D$", 
        "9D$@tI", 
        "D$h9D$", 
        "D$h:\\$", 
        "+D$h9A", 
        "<\u001ft:<Ht6", 
        "HT$|SRP", 
        "Bt\u001fPPjB", 
        "L$<9L$", 
        "SQVWRPV", 
        "F@9F<t", 
        "USQVWRPV", 
        "L$/QRP", 
        "J$;J s(", 
        "V@9V<t\u001f", 
        "V@9V<t", 
        "V@9V<t", 
        "D$<+D$H", 
        "F@9F<t", 
        "D$X9D$", 
        "D$X9D$", 
        "D$X9D$", 
        "\\$X9\\$", 
        "t$\\QRURP", 
        "D$X9D$", 
        "D$X9D$", 
        "D$X9D$", 
        "L$<w\\)", 
        "t$(VURPV", 
        "SQVURPV", 
        "SQVURPV", 
        "SQVURP", 
        "D$x+C(", 
        "QWVRPW", 
        "D$x+C(", 
        "USQWVRPW", 
        "9T$lv+", 
        "SQUWRPU", 
        "D$x+C(", 
        "USQWVRPW", 
        "SQUWRPU", 
        "SQUWRPU", 
        "D$x+C(", 
        "SQUWRPU", 
        "SQVWRPV", 
        "USQWVRPW", 
        "USQWVRPW", 
        "USQWVRPW", 
        "USQWVRPW", 
        "QWVRPW", 
        "USQWVRPW", 
        "SQVWRPV", 
        "S@9S<t\"", 
        "WVRUSQRPP", 
        "8print", 
        "t$<e35", 
        "|$,;|$4", 
        "t$(w7r", 
        ";t$0w/", 
        "|$<e3=", 
        "|$<e3=", 
        "D$H^]j", 
        "D$0#D$4", 
        "|$\\e3=", 
        "$;D$T}2", 
        "|$Le3=", 
        "|$,9|$", 
        "L$(9L$", 
        "L$p+O4", 
        "t$ RPQ", 
        "L$p+O4", 
        "t$p+w4", 
        "T$<9|$", 
        "|$49|$", 
        "\\$$tY1", 
        "|$<9x,", 
        "|$X9|$\\v(", 
        "|$h9|$\\v(", 
        "l$(tM1", 
        "|$l9|$", 
        "t$0tY1", 
        "|$P9|$", 
        "+T$Xf9t$<", 
        "T$h+T$X", 
        "D$x+G4", 
        "T$d+T$X", 
        "D$09D$d", 
        "D$09D$d", 
        "t$ 9~<", 
        "L$x+N4", 
        "T$x+V4", 
        "D$p+D$x", 
        "T$dj\"j", 
        "T$dj\"j", 
        "|$(WRP", 
        "T$Dj\"j", 
        "t$$Phq", 
        "t$0Vhq", 
        "T$0f;h r", 
        "t$0Ph\"", 
        "D$x+F4", 
        "D$x+F4", 
        "D$x+F4", 
        "F @u*f", 
        "j RPj-SQ", 
        "j j-SQP", 
        "t$ RVP", 
        "G<9D$$", 
        "T$ j\"j", 
        "L$$;|$", 
        "T$$j\"j", 
        "t$(+u4", 
        "L$(+M4", 
        "E@9E<t", 
        "SQWVRPW", 
        "L$ 9M<", 
        "D$ 9E<", 
        "t$le35", 
        "L$<+M4%", 
        "\\$<+]4", 
        "D$ ;E<", 
        "E<9D$ ", 
        "D$(+E4", 
        "D$ ;E<", 
        "D$ ;E<", 
        "E<9D$ ", 
        "E@9E<t", 
        "SQWVRPW", 
        "E@9E<t", 
        "SQVWRPV", 
        "t$ SQVWR1", 
        "D$4RPV", 
        "SQWVRPW", 
        "L$(+M4", 
        "9}<t8+u4", 
        "SQVWRPV", 
        "E@9E<t", 
        "SQWVRPW", 
        "L$8+M4", 
        "L$(+M4", 
        "E$+D$D", 
        "E$;E s", 
        "SQWVRPW", 
        "L$8+M4", 
        "T$8+U4", 
        "SQWVRPW", 
        "T$8+U4", 
        "T$L+U4", 
        "L$L+M4", 
        "E@9E<t", 
        "SQWVRPW", 
        "L$<XZSj", 
        "SQVWRPV", 
        "SQWVRPW", 
        "U@9U<t", 
        "SQWVRPW", 
        "D$,+E4", 
        "D$(+E4", 
        "D$,+E4", 
        "T$(+U4", 
        "E$+D$DPWh=)", 
        "L$8+M4", 
        "U@9U<t", 
        "SQWVRPW", 
        "SQUWRPUV", 
        "SQVWRPV", 
        "E@9E<t", 
        "WVQSRPQ", 
        "SQWVRPW", 
        "t$ WVR", 
        "t$(WVR", 
        "SQWVRPW", 
        "E@9E<t", 
        "SQWVRPW", 
        "SQWVRPWU", 
        "SQVWRPV", 
        "\u001f9}<t$", 
        "SQVWRPV", 
        "\u001f9]<t ", 
        "SQWVRPW", 
        "E@9E<t", 
        "SQWVRPW", 
        "t$(SQVWRPV", 
        "E@9E<t", 
        "SQWVRPW", 
        "E@9E<t", 
        "9u<ts+]4", 
        "E$+D$8", 
        "L$(+M4", 
        "L$8+M4", 
        "E$+D$8PSh", 
        "L$8+M4", 
        "E@9E<t8", 
        "t$Le35", 
        "9t$$uF", 
        "T$$9|$", 
        "E@9E<t", 
        "WVUQRP", 
        "E@9E<t", 
        "WVUQRP", 
        "E@9E<t", 
        "WVUQRP", 
        "E@9E<t", 
        "E@9E<t", 
        "D$ +E(", 
        "WVUQRP", 
        "D$89F<", 
        "@<;D$8", 
        "v$;t$P", 
        "|$89x<t", 
        "VWRPVU", 
        "D$89F<", 
        "|$89x<", 
        "F 9F$s", 
        "|$89x<", 
        "|$89x<", 
        "p$9t$P", 
        "t$89p<", 
        "t$ RPQU", 
        "t$89p<t%", 
        "D$89F<", 
        "t$89p<", 
        "L$89N<", 
        "p<;t$8", 
        "T$8;V<t", 
        "T$89V<", 
        "|$89z<", 
        "V<;T$8", 
        "|$89x<t", 
        "4$9D$8t", 
        "VWRPVU", 
        "|$89x<tR", 
        "|$89x<", 
        "|$89x<t", 
        "|$$WVRP", 
        "t$89w<", 
        "D$89G<", 
        "t$ WVRP", 
        "D$89A<to", 
        "|$$WVRP", 
        "D$D9G<", 
        "|$89x<t", 
        "|$$WVRP", 
        "|$89x<t", 
        "|$$WVRP", 
        "D$ +A(", 
        "t$89w<u/", 
        "t$89p<t", 
        "t$<UWP", 
        "|$89x<t", 
        "|$$WVRP", 
        "D$D9G<", 
        "L$0+A(", 
        "D$HZYPV", 
        "|$L9x<t", 
        "D$0RPW", 
        "<^t4<|", 
        "\u001f9x<t\u001f", 
        "D$xPWV", 
        "D$L9G<tH", 
        "D$09x<t", 
        "|$0+G(", 
        "|$L9x<t", 
        "T$09z<", 
        "D$ wI)", 
        "|$L9x<t", 
        "D$ w?)", 
        "D$ w=)", 
        "@$9D$ ", 
        "|$L9x<t", 
        "D$ wh)", 
        "D$ wV)", 
        "|$L9x<t", 
        "D$ w})", 
        "|$L9x<t", 
        "D$ w>)", 
        "L$0QVRP", 
        "D$@3L$D1", 
        "w$;t$ ", 
        "9T$8t+", 
        "D$8;G<", 
        "D$8;G<tH", 
        "t$89t$@t", 
        "t$H9p0", 
        "t$89w<", 
        "D$89G<tO", 
        "G@9G<t", 
        "D$H+D$8", 
        "D$ 9D$8", 
        "L$ 9L$8", 
        "L$89L$@t", 
        "D$89G<t", 
        "D$89G<t", 
        "t$89t$@t", 
        "D$89G<t", 
        "G@9G<t", 
        "G@9G<t", 
        "D$(wC)", 
        "t$89t$@t", 
        "G@9G<t", 
        "|$<e3=", 
        "n@9n<t", 
        "$t;+N4", 
        "\u001f9^<t%", 
        "t$<j<UP", 
        "D$T+D$", 
        "t$$RWPU", 
        "t$$RWPU", 
        "t$$RWPU", 
        "T$(+T$P", 
        "|$p9|$H", 
        "D$|;T$0", 
        "D$((<(", 
        "L$ j\"j", 
        "|$(9|$ps'", 
        "T$Lj\"j", 
        "|$09l$(", 
        "t$4URP", 
        "|$(9|$", 
        "T$4RPRP", 
        "D$ +G4", 
        "D$@+F4", 
        "D$($<$", 
        "T$(;l$(", 
        "T$0;l$0", 
        "t$<PWVQR", 
        "D$`9B(", 
        "t$4PWVQR", 
        "|$(;x8", 
        "t$4WRPUQ", 
        "uv<*uX", 
        "D$xY^j", 
        "|$pRWj", 
        "re_exec.c", 
        "!isGV_with_GP(_svpvx)", 
        "!isGV_with_GP(_svivx)", 
        "locinput", 
        "loc_regeol", 
        "loc_bostr", 
        "loc_reg_starttry", 
        "!isGV_with_GP(_svcur)", 
        "Wide character (U+%LX) in %s", 
        "../../inline.h", 
        "isREGEXP(re)", 
        "%s%s REx%s %s against %s", 
        "UTF-8 %s%s%s...", 
        "SvPOKp(prog->saved_copy)", 
        "len >= 0", 
        "SvTYPE(_svmagic) >= SVt_PVMG", 
        "SvTYPE(_svtail) != SVt_PVAV", 
        "SvTYPE(_svtail) != SVt_PVHV", 
        "SvVALID(_svtail)", 
        "!isGV_with_GP(sv)", 
        "cp_out >= 0", 
        "strbeg", 
        "curpos", 
        "strend", 
        "after != LB_Space", 
        "!isGV_with_GP(_svuvx)", 
        "! is_utf8_pat", 
        "panic: Unexpected op %u", 
        "maxopenparen_p", 
        "%*s|%4Lu| %*s", 
        "(skipped)", 
        "E_DEBUG_FLAGS", 
        "    \\%Lu: %Ld(%Ld)..%Ld%s", 
        "! reginfo->is_utf8_pat", 
        "((reginfo->strend) > (scan))", 
        "    \\%Lu: %Ld(%Ld)..%Ld", 
        "not compiled under -Dr", 
        "isGV_with_GP(_gvgp)", 
        "startpos", 
        "regmatch start", 
        "%*s%Ld:%s(%Ld)", 
        "%smatched empty string...%s", 
        "%sgot %Ld possible matches%s", 
        "%sTRIE failed...%s", 
        "Infinite recursion in regex", 
        "CvDEPTH(newcv)", 
        "rexi->data->what[n] == 'L'", 
        "CxMULTICALL(cx)", 
        "CxTYPE(cx) == CXt_SUB", 
        "push STACKINFO %d at %s:%d", 
        "o->op_type == OP_NULL", 
        "o->op_targ == OP_LEAVE", 
        "o->op_type == OP_ENTER", 
        "  re EVAL PL_op=0x%Lx", 
        "REGMARK", 
        "!isGV_with_GP(_svnvx)", 
        "!isGV_with_GP(_svrv)", 
        "SvTYPE(_svstash) >= SVt_PVMG", 
        "Matching embedded", 
        "cur_curlyx", 
        "trying longer...", 
        "%sBRANCH failed...%s", 
        "ST.min <= ST.max", 
        "%ssubpattern success...%s", 
        "%Lx %d", 
        "regexp memory corruption", 
        "%*spush %s%s%s%s%s", 
        "corrupted regexp pointers", 
        "st != yes_state", 
        "%*spop (no final) %s%s%s%s%s", 
        "%*spop (yes) %s%s%s%s%s", 
        "%sMatch successful!%s", 
        "%sfailed...%s", 
        "%*spop %s%s%s%s%s", 
        "sv_err", 
        "sv_mrk", 
        "CX_CUR() == cx", 
        "pop  STACKINFO %d at %s:%d", 
        "REGERROR", 
        "%4s #%-3d %-10s %s", 
        " Fail transition to ", 
        "FLAGS(c) == TRADITIONAL_BOUND", 
        "!isGV_with_GP(sv_points)", 
        " Charid:%3u CP:%4Lx ", 
        "%sState: %4Lx, word=%Lx", 
        " - legal", 
        " - fail", 
        " - accepting", 
        "No match.", 
        "panic: unknown regstclass %d", 
        " at offset ", 
        "Did not find", 
        "Contradicts", 
        "strpos", 
        "  String too short...", 
        "SvTYPE(_bmuseful) >= SVt_PVIV", 
        "SvVALID(_bmuseful)", 
        "!SvIOK(_bmuseful)", 
        "  Not at start...", 
        "  String too long...", 
        "  String not equal...", 
        "  %s %s substr %s%s%s", 
        "%ld (rx_origin now %Ld)...", 
        "rx_origin <= last1", 
        "SvPOK(must)", 
        "  %s %s substr %s%s", 
        "; giving up...", 
        "  looking for /^/m anchor", 
        "  Did not find /%s^%s/m...", 
        "  Could not match STCLASS...", 
        "  try at offset...", 
        "stringarg", 
        "Matching", 
        "!prog->nparens", 
        "corrupted regexp program", 
        "SvTYPE(av) == SVt_PVAV", 
        "_pm_setre", 
        "%sChecking for float_real.%s", 
        "%sMatch failed%s", 
        "PL_valid_types_PVX[SvTYPE(_svpvx) & SVt_MASK]", 
        "!(SvTYPE(_svpvx) == SVt_PVIO && !(IoFLAGS(_svpvx) & IOf_FAKE_DIRP))", 
        "PL_valid_types_IVX[SvTYPE(_svivx) & SVt_MASK]", 
        "PL_valid_types_PVX[SvTYPE(_svcur) & SVt_MASK] || SvTYPE(_svcur) == SVt_REGEXP", 
        "!(SvTYPE(_svcur) == SVt_PVIO && !(IoFLAGS(_svcur) & IOf_FAKE_DIRP))", 
        "%4Ld <%.*s%.*s%s%.*s>%*s|%4u| ", 
        "((((U8)((*(character + 1)) | 0)) & 0xC0) == 0x80)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*character) == 1) || !(((unsigned long long)((*character) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*character) == 1) || !(((unsigned long long)((*character) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*character) == 1) || !(((unsigned long long)((*character) | 0)) & ~0xFF))\", \"re_exec.c\", 516, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*character))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(character + 1))) == 1) || !(((unsigned long long)(((U8)(*(character + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(character + 1))) == 1) || !(((unsigned long long)(((U8)(*(character + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(character + 1))) == 1) || !(((unsigned long long)(((U8)(*(character + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 516, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(character + 1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long", 
        "Matched non-Unicode code point 0x%04LX against Unicode property; may not be portable", 
        "Copy on write: regexp capture, type %d", 
        "min >= 0 && min <= max && min <= strend - strbeg", 
        "SvTYPE(sv) == SVt_PVCV || SvTYPE(sv) == SVt_PVFM", 
        "!(SvFLAGS(_svtail) & (SVf_NOK|SVp_NOK))", 
        "PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK] || SvTYPE(sv) == SVt_REGEXP", 
        "!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))", 
        "Malformed UTF-8 character (fatal)", 
        "prev_prev_char_pos < prev_char_pos", 
        "Unhandled GCB pair: GCB_table[%d, %d] = %d", 
        "Unhandled LB pair: LB_table[%d, %d] = %d", 
        "Unhandled WB pair: WB_table[%d, %d] = %d", 
        "((svtype)((list)->sv_flags & 0xff)) == SVt_PVAV", 
        "panic: invalid PL_utf8_foldclosures structure", 
        "PL_valid_types_IVX[SvTYPE(_svuvx) & SVt_MASK]", 
        "(i & SAVE_MASK) == SAVEt_REGCONTEXT", 
        "rex=0x%Lx offs=0x%Lx: restoring capture indices to:", 
        "    \\%Lu: %s   ..-1 undeffing", 
        "STR_LEN(p) == reginfo->is_utf8_pat ? UTF8SKIP(STRING(p)) : 1", 
        "((((U8)((c) | 0)) & 0xfe) == 0xc2)", 
        "((((U8)((*((((struct regnode_string *)p)->string) + 1)) | 0)) & 0xC0) == 0x80)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(c) == 1) || !(((unsigned long long)((c) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(c) == 1) || !(((unsigned long long)((c) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(c) == 1) || !(((unsigned long long)((c) | 0)) & ~0xFF))\", \"re_exec.c\", 8837, __extension__ __PRETTY_FUNCTION__); })), ((U8) (c))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((((struct regnode_string *)p)->string) + 1))) == 1) || !(((unsigned long long)(((U8)(*((((struct regnode_string *)p)->string) + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((((struct regnode_string *)p)->string) + 1))) == 1) || !(((unsigned long long)(((U8)(*((((struct regnode_string *)p)->string) + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((((struct regnode_string *)p)->string) + 1))) == 1) || !(((unsigned long long)(((U8)(*((((struct regnode_string *)p)->string) + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 8837, __extension__ __", 
        "((((U8)((*(scan + 1)) | 0)) & 0xC0) == 0x80)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*scan) == 1) || !(((unsigned long long)((*scan) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*scan) == 1) || !(((unsigned long long)((*scan) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*scan) == 1) || !(((unsigned long long)((*scan) | 0)) & ~0xFF))\", \"re_exec.c\", 9089, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*scan))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(scan + 1))) == 1) || !(((unsigned long long)(((U8)(*(scan + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(scan + 1))) == 1) || !(((unsigned long long)(((U8)(*(scan + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(scan + 1))) == 1) || !(((unsigned long long)(((U8)(*(scan + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 9089, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(scan + 1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*scan) == 1) || !(((unsigne", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))\", \"re_exec.c\", 9112, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(scan)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 9112, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((scan)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(scan", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))\", \"re_exec.c\", 9122, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(scan)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 9122, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((scan)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(scan", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(scan)) == 1) || !(((unsigned long long)((*(scan)) | 0)) & ~0xFF))\", \"re_exec.c\", 9142, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(scan)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((scan)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((scan)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 9142, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((scan)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(scan", 
        "panic: regrepeat() node %d='%s' has an unexpected character class '%d'", 
        "panic: regrepeat() called with unrecognized node type %d='%s'", 
        "%s can match %Ld times out of %Ld...", 
        "panic: paren_elems_to_push, %i < 0, maxopenparen: %i parenfloor: %i REGCP_PAREN_ELEMS: %u", 
        "panic: paren_elems_to_push offset %Lu out of range (%lu-%ld)", 
        "rex=0x%Lx offs=0x%Lx: saving capture indices:", 
        "Setting an EVAL scope, savestack=%Ld,", 
        "SvTYPE(_gvgp) == SVt_PVGV || SvTYPE(_gvgp) == SVt_PVLV", 
        "%sfailed to match trie start class...%s", 
        "%*s%sState: %4Lx Accepted: %c ", 
        "Charid:%3x CP:%4Lx After State: %4Lx%s", 
        "Clearing an EVAL scope, savestack=%Ld..%Ld", 
        "(trie->wordinfo[ST.nextword].len - trie->prefixlen) >= ST.firstchars", 
        "%sTRIE matched word #%d, continuing%s", 
        "%sonly one match left, short-circuiting: #%d <%s>%s", 
        "((((U8)((*l) | 0)) & 0xfe) == 0xc2)", 
        "((((U8)((*(l+1)) | 0)) & 0xC0) == 0x80)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*l) == 1) || !(((unsigned long long)((*l) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*l) == 1) || !(((unsigned long long)((*l) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*l) == 1) || !(((unsigned long long)((*l) | 0)) & ~0xFF))\", \"re_exec.c\", 5936, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*l))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(l+1))) == 1) || !(((unsigned long long)(((U8)(*(l+1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(l+1))) == 1) || !(((unsigned long long)(((U8)(*(l+1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(l+1))) == 1) || !(((unsigned long long)(((U8)(*(l+1))) | 0)) & ~0xFF))\", \"re_exec.c\", 5936, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(l+1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*l) == 1) || !(((unsigned long long)((*l) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ", 
        "((((U8)((*s) | 0)) & 0xfe) == 0xc2)", 
        "((((U8)((*(s+1)) | 0)) & 0xC0) == 0x80)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))\", \"re_exec.c\", 5960, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*s))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))\", \"re_exec.c\", 5960, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(s+1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ", 
        "Use of \\b{} or \\B{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale", 
        "(((U8*)(reginfo->strend)) > (S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg))))", 
        "(((U8*) reginfo->strend) > ((U8*) locinput))", 
        "(((U8*) reginfo->strend) > (S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg))))", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) == 1) || !(((unsigned long long)((*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) == 1) || !(((unsigned long long)((*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) == 1) || !(((unsigned long long)((*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))) | 0)) & ~0xFF))\", \"re_exec.c\", 6177, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))+1 ))) == 1) || !(((unsigned long long)(((U8)(*((S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)))+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __exte", 
        "(((U8*) reginfo->strend) > ((U8*)locinput))", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8*)locinput)) == 1) || !(((unsigned long long)((*((U8*)locinput)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8*)locinput)) == 1) || !(((unsigned long long)((*((U8*)locinput)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8*)locinput)) == 1) || !(((unsigned long long)((*((U8*)locinput)) | 0)) & ~0xFF))\", \"re_exec.c\", 6181, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8*)locinput)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8*)locinput)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8*)locinput)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8*)locinput)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8*)locinput)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8*)locinput)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8*)locinput)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 6181, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(", 
        "(U8*) locinput < (U8*) reginfo->strend", 
        "S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)) < (U8*) reginfo->strend", 
        "((((U8)((nextchr) | 0)) & 0xfe) == 0xc2)", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))\", \"re_exec.c\", 6408, __extension__ __PRETTY_FUNCTION__); })), ((U8) (nextchr))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 6408, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(locinput + 1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) size", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(nextchr) == 1) || !(((unsigned long long)((nextchr) | 0)) & ~0xFF))\", \"re_exec.c\", 6488, __extension__ __PRETTY_FUNCTION__); })), ((U8) (nextchr))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(locinput + 1))) == 1) || !(((unsigned long long)(((U8)(*(locinput + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 6488, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(locinput + 1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) size", 
        "Pattern subroutine nesting without pos change exceeded limit in regex", 
        "entering GOSUB, prev_recurse_locinput=%p recurse_locinput[%d]=%p", 
        "EVAL without pos change exceeded limit in regex", 
        "!(((XPVCV*)({ void *_p = (((CV*)(cv))->sv_any); _p; }))->xcv_flags & 0x0008)", 
        "Pad 0x%Lx[0x%Lx] set_cur    depth=%d", 
        "JUMPLEVEL set catch %d => %d (for %p) at %s:%d", 
        "CX %ld %s %s (scope %ld,%ld) (save %ld,%ld) at %s:%d", 
        "o->op_type == OP_NEXTSTATE || o->op_type == OP_DBSTATE || (o->op_type == OP_NULL && ( o->op_targ == OP_NEXTSTATE || o->op_targ == OP_DBSTATE ) )", 
        "(reginfo->info_aux_eval->pos_magic)->mg_type == 'g'", 
        "PL_valid_types_NVX[SvTYPE(_svnvx) & SVt_MASK]", 
        "PL_valid_types_RV[SvTYPE(_svrv) & SVt_MASK]", 
        "!(SvTYPE(_svrv) == SVt_PVIO && !(IoFLAGS(_svrv) & IOf_FAKE_DIRP))", 
        "rex->engine && rex->engine->op_comp", 
        "SvTYPE(_rerefcnt_inc) == SVt_REGEXP", 
        "EVAL_AB cur_eval=%p prev_eval=%p", 
        "EVAL_AB[before] GOSUB%d ce=%p recurse_locinput=%p", 
        "EVAL_AB[after] GOSUB%d ce=%p recurse_locinput=%p", 
        "EVAL_AB_fail cur_eval=%p prev_eval=%p", 
        "EVAL_AB_fail[before] GOSUB%d ce=%p recurse_locinput=%p", 
        "EVAL_AB_fail[after] GOSUB%d ce=%p recurse_locinput=%p", 
        "rex=0x%Lx offs=0x%Lx: \\%Lu: set %Ld tmp; maxopenparen=%Lu", 
        "rex=0x%Lx offs=0x%Lx: \\%Lu: set %Ld..%Ld", 
        "whilem: matched %ld out of %d..%d", 
        "whilem: empty match detected, trying continuation...", 
        "%swhilem: Detected a super-linear match, switching on caching%s...", 
        "whilem: (cache) already tried at this position...", 
        "whilem: failed, trying continuation...", 
        "Complex regular subexpression recursion limit (%d) exceeded", 
        "CURLYM now matched %Ld times, len=%Ld...", 
        "CURLYM trying tail with matches=%Ld...", 
        "CURLYM Fast bail next target=0x%LX c1=0x%LX c2=0x%LX", 
        "CURLYM Fast bail next target=0x%X c1=0x%X c2=0x%X", 
        "n == REG_INFTY || locinput == li", 
        "FAKE-END[before] GOSUB%d ce=%p recurse_locinput=%p", 
        "EVAL trying tail ... (cur_eval=%p)", 
        "FAKE-END[after] GOSUB%d ce=%p recurse_locinput=%p", 
        "%sMatch possible, but length=%ld is smaller than requested=%ld, failing!%s", 
        "%ssetting cutpoint to mark:%-p...%s", 
        "(CxTYPE(cx) == CXt_SUB && CxMULTICALL(cx)) || PL_savestack_ix == cx->blk_oldsaveix", 
        "!result || locinput - reginfo->strbeg >= 0", 
        "(my_perl->Iutf8_swash_ptrs)[0]", 
        "swash_fetch((my_perl->Iutf8_swash_ptrs)[0], (U8 *) \"\\xEF\\xAC\\x85\", TRUE)", 
        "(((U8 *) reginfo->strend) > ((U8 *) s))", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2085, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8 *) s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2085, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(((U8 *) s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsi", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2099, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8 *) s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2099, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(((U8 *) s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsi", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2111, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8 *) s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2111, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(((U8 *) s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsi", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8 *) s)) == 1) || !(((unsigned long long)((*((U8 *) s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2124, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8 *) s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8 *) s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2124, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(((U8 *) s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsi", 
        "S_reghop3((U8*)s, -1, (U8*)(reginfo->strbeg)) < (U8*) reginfo->strend", 
        "(U8*) s < (U8*) reginfo->strend", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))\", \"re_exec.c\", 2448, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*s))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(s + 1))) == 1) || !(((unsigned long long)(((U8)(*(s + 1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(s + 1))) == 1) || !(((unsigned long long)(((U8)(*(s + 1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(s + 1))) == 1) || !(((unsigned long long)(((U8)(*(s + 1))) | 0)) & ~0xFF))\", \"re_exec.c\", 2448, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(s + 1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), ", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2466, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2466, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | ", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2471, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2471, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | ", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | 0)) & ~0xFF))\", \"re_exec.c\", 2481, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*(s)))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((s)+1 ))) == 1) || !(((unsigned long long)(((U8)(*((s)+1 ))) | 0)) & ~0xFF))\", \"re_exec.c\", 2481, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*((s)+1 )))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*(s)) == 1) || !(((unsigned long long)((*(s)) | ", 
        "panic: find_byclass() node %d='%s' has an unexpected character class '%d'", 
        "%s scope %ld (savestack=%ld) at %s:%d", 
        "PL_valid_types_PVX[SvTYPE(sv_points) & SVt_MASK] || SvTYPE(sv_points) == SVt_REGEXP", 
        "!(SvTYPE(sv_points) == SVt_PVIO && !(IoFLAGS(sv_points) & IOf_FAKE_DIRP))", 
        "!((sv_points)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (sv_points); _p; })); ((void) sizeof ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? 1 : 0), __extension__ ({ if (PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ; else __assert_fail (\"PL_valid_types_RV[SvTYPE(_svrv) & SVt_MASK]\", \"re_exec.c\", 2553, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? 1 : 0), __extension__ ({ if (!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ; else __assert_fail (\"!isGV_with_GP(_svrv)\", \"re_exec.c\", 2553, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64", 
        "!((((sv_points)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv_points)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv_points)->sv_flags & 0xff)) == SVt_PVLV))", 
        " Scanning for legal start char...", 
        "Matches word #%Lx at position %Ld. Trying full pattern...", 
        "Pattern failed. Looking for new start point...", 
        "Intuit: trying to determine minimum start position...", 
        "prog->substrs->data[0].min_offset >= 0", 
        "prog->substrs->data[0].max_offset >= 0", 
        "prog->substrs->data[1].min_offset >= 0", 
        "prog->substrs->data[1].max_offset >= 0", 
        "prog->substrs->data[2].min_offset >= 0", 
        "prog->substrs->data[2].max_offset >= 0", 
        "! ( (prog->anchored_utf8 || prog->anchored_substr) && (prog->float_utf8 || prog->float_substr)) || (prog->float_min_offset >= prog->anchored_offset)", 
        "Can't match, because target string needs to be in UTF-8", 
        "  substrs[%d]: min=%Ld max=%Ld end shift=%Ld useful=%Ld utf8=%d [%s]", 
        "  Looking for check substr at fixed offset %Ld...", 
        "panic: end_shift: %Ld pattern:", 
        "  At restart: rx_origin=%Ld Check offset min: %Ld Start shift: %Ld End shift %Ld Real end Shift: %Ld", 
        "  doing 'check' fbm scan, [%Ld..%Ld] gave %Ld", 
        "prog->minlen >= other->min_offset", 
        "strpos + start_shift <= check_at", 
        "  skipping 'other' fbm scan: %Ld > %Ld", 
        "  doing 'other' fbm scan, [%Ld..%Ld] gave %Ld", 
        "; about to retry %s at offset %ld (rx_origin now %Ld)...", 
        " at offset %ld (rx_origin now %Ld)...", 
        "  Check-only match: offset min:%Ld max:%Ld check_at:%Ld rx_origin:%Ld rx_origin-check_at:%Ld strend:%Ld", 
        "  Found /%s^%s/m, about to restart lookup for check-string with rx_origin %ld...", 
        "  Found /%s^%s/m, rescanning for anchored from offset %Ld (rx_origin now %Ld)...", 
        "  Found /%s^%s/m with rx_origin %ld...", 
        "  (multiline anchor test skipped)", 
        "  looking for class: start_shift: %Ld check_at: %Ld rx_origin: %Ld endpos: %Ld", 
        "  This position contradicts STCLASS...", 
        "rx_origin + start_shift <= check_at", 
        "  about to retry anchored at offset %ld (rx_origin now %Ld)...", 
        "  about to look for /%s^%s/m starting at rx_origin %ld...", 
        "  about to look for %s substr starting at offset %ld (rx_origin now %Ld)...", 
        "  By STCLASS: moving %ld --> %ld", 
        "  Does not contradict STCLASS...", 
        "  ... Disabling check substring...", 
        "Intuit: %sSuccessfully guessed:%s match at offset %ld", 
        "%sMatch rejected by optimizer%s", 
        "mg->mg_type == PERL_MAGIC_regex_global", 
        "GPOS ganch set to strbeg[%Ld]", 
        "fail: ganch-gofs before earliest possible start", 
        "Regex match can't succeed, so not even tried", 
        "prog->intflags & PREGf_GPOS_SEEN", 
        "matched, but failing for REXEC_FAIL_ON_UNDERFLOW", 
        "String too short [regexec_flags]...", 
        "rex=0x%Lx saving  offs: orig=0x%Lx new=0x%Lx", 
        "startpos == HOPBACKc(reginfo->ganch, prog->gofs)", 
        "Did not find anchored character...", 
        "Did not find %s substr %s%s...", 
        "Matching stclass %.*s against %s (%d bytes)", 
        "Contradicts stclass... [regexec_flags]", 
        "%sString shorter than required trailing substring, cannot match.%s", 
        "%sString does not contain required trailing substring, cannot match.%s", 
        "%sString does not contain required substring, cannot match.%s", 
        "rex=0x%Lx freeing offs: 0x%Lx", 
        "rex=0x%Lx rolling back offs: freeing=0x%Lx restoring=0x%Lx", 
        "Perl_re_exec_indentf", 
        "S_reg_set_capture_string", 
        "S_av_top_index", 
        "S_setup_eval_state", 
        "Perl_utf8_hop", 
        "S_sv_or_pv_pos_u2b", 
        "S_MgBYTEPOS", 
        "my_regexec", 
        "S_reghop3", 
        "S_cx_popblock", 
        "S_cx_popsub_common", 
        "S_regcp_restore", 
        "S_regcppush", 
        "S_regrepeat", 
        "S_setup_EXACTISH_ST_c1_c2", 
        "S_regcppop", 
        "S_reg_check_named_buff_matched", 
        "S_debug_start_match", 
        "S_sv_only_taint_gmagic", 
        "S_CvDEPTHp", 
        "S_cx_pushblock", 
        "S_regmatch", 
        "S_regtry", 
        "S_dump_exec_pos", 
        "S_isFOO_utf8_lc", 
        "S_backup_one_WB", 
        "S_advance_one_WB", 
        "S_isWB", 
        "S_get_break_val_cp_checked", 
        "S_backup_one_SB", 
        "S_isSB", 
        "S_backup_one_LB", 
        "S_isLB", 
        "S_backup_one_GCB", 
        "S_isGCB", 
        "S_reginclass", 
        "Perl_foldEQ_latin1", 
        "Perl_foldEQ", 
        "Perl_foldEQ_locale", 
        "S_find_byclass", 
        "Perl_utf8_distance", 
        "S_reghop4", 
        "S_reghopmaybe3", 
        "S_ReANY", 
        "S_to_byte_substr", 
        "S_to_utf8_substr", 
        "my_re_intuit_start", 
        "Use of (?[ ]) for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale", 
        "re_comp.c", 
        "pRExC_state", 
        "%s in regex m/%d%Lu%4p%s/", 
        "Overwriting end of array!", 
        "extra_size >= regarglen[op]", 
        "RExC_parse <= RExC_end", 
        "posix_warnings", 
        "\\x{%04LX}", 
        "\\x%02X", 
        "start <= end", 
        "\\x%02LX-\\x%02LX", 
        "cp_list", 
        "is_ANYOF_SYNTHETIC(ssc)", 
        "reg2Lanode", 
        "regarglen[op] == 2", 
        "reganode", 
        "regarglen[op] == 1", 
        "reg_node", 
        "regarglen[op] == 0", 
        "../../dquote_inline.h", 
        "*s == '8' || *s == '9'", 
        "invlist_inline.h", 
        "multi_string", 
        "%d%Lu%4p", 
        "don't ", 
        "Sequence (?... not terminated", 
        "xdigit", 
        "_invlist_len(invlist)", 
        "0 == *(SvPVX(invlist))", 
        "PL_regkind[OP(node)] == ANYOF", 
        "%s{utf8}%s", 
        "%s{not utf8}%s", 
        "%s{utf8 locale}%s", 
        "or_with", 
        "and_with", 
        "bitmap", 
        "pRExC_state->code_blocks", 
        "*(d - 1) == '('", 
        "*(d - 1) == ')'", 
        "oplist", 
        "operand", 
        "|%*s%-4s", 
        "!RExC_study_started", 
        "reg_insert", 
        "reginsert", 
        "SF_FL_BEFORE_SEOL", 
        "SF_FL_BEFORE_MEOL", 
        "SF_IS_INF", 
        "SF_HAS_PAR", 
        "SF_IN_PAR", 
        "SF_HAS_EVAL", 
        "SCF_DO_SUBSTR", 
        "SCF_DO_STCLASS_AND", 
        "SCF_DO_STCLASS", 
        "SCF_WHILEM_VISITED_POS", 
        "SCF_TRIE_RESTUDY", 
        "SCF_SEEN_ACCEPT", 
        "SCF_TRIE_DOING_RESTUDY", 
        "SCF_IN_DEFINE", 
        " Whilem_c: %Ld Lcp: %Ld %s", 
        "NATIVE", 
        "startbranch", 
        "E_TRIE_MAXBUF", 
        "re_trie_maxbuff", 
        "!isGV_with_GP(zlopp)", 
        "revcharmap", 
        " %4LX :", 
        "W%4x| ", 
        "%*s:%3X=%4LX | ", 
        "Char : ", 
        "State+-", 
        "%4LX : ", 
        " (%4LX)", 
        " (%4LX) W%4X", 
        "Statecount:%Lx Lasttrans:%Lx", 
        "New Start State=%Lu Class: [", 
        "Char : %-6s%-6s%-4s ", 
        "State|-----------------------", 
        "#%4LX|", 
        " @%4LX ", 
        "+%2LX[ ", 
        "word_info N:(prev,len)=", 
        " %d:(%d,%d)", 
        "namesv", 
        "s >= rx->subbeg", 
        "SvTYPE(sv) >= SVt_PVMG", 
        "TAINTING_get || !TAINT_get", 
        "Regexp", 
        "(JUMP)", 
        "[%d/%d]", 
        " '%-p'", 
        ": FAIL", 
        ": ACCEPT - EMPTY STRING", 
        "%d[%+d:%d]", 
        "{utf8-locale-reqd}", 
        "%s][%s", 
        "%04LX%cINFINITY%c", 
        "%04LX%c%04LX%c", 
        "!isGV_with_GP(output)", 
        "[illegal type=%d])", 
        "~ %s (%d) %s %s", 
        "~ %s (%d) -> %s", 
        "*RExC_end == '\\0'", 
        "Unmatched (", 
        "Unterminated verb pattern", 
        "COMMIT", 
        "parse_start", 
        "!isGV_with_GP(sv_dat)", 
        "Sequence (?R) not terminated", 
        "Illegal pattern", 
        "Expecting close bracket", 
        "|    |", 
        "%*s%*s Recurse #%Lu to %Ld", 
        "*RExC_parse == ')'", 
        "Sequence (? incomplete", 
        "!RExC_end_op", 
        "Unmatched )", 
        "Junk on end of regexp", 
        "! (node_p && cp_count)", 
        "Missing braces on \\N{}", 
        "Missing right brace on \\%c{}", 
        "Zero length \\N{}", 
        "# comment", 
        "Unmatched [", 
        "Empty \\%c", 
        "Empty \\%c{}", 
        "__%s_i", 
        "%s \"%d%Lu%4p\"", 
        "%s::%s", 
        "%cutf8::%s%d%Lu%4p%s", 
        "Need exactly 3 octal digits", 
        "False [] range \"%d%Lu%4p\"", 
        "Invalid [] range \"%d%Lu%4p\"", 
        "False [] range \"%*.*s\"", 
        "! invert", 
        "RExC_precomp_adj == 0", 
        "oregcomp_parse", 
        "Syntax error in (?[...])", 
        "Expecting '(?flags:(?[...'", 
        "Unexpected ')'", 
        "fence_ptr", 
        "IS_OPERAND(lhs)", 
        "Unexpected character", 
        "top_ptr", 
        "\\x{%LX}-\\x{%LX}", 
        "OP(node) == ANYOF", 
        "RExC_parse < RExC_end", 
        "Internal urp", 
        "Quantifier follows nothing", 
        "\\C no longer supported", 
        "Reference to invalid group 0", 
        "Unterminated \\g... pattern", 
        "Unterminated \\g{...} pattern", 
        "Trailing \\", 
        "\\${[^\\}]*}", 
        "len >= MAX_NODE_STRING_SIZE", 
        "Invalid quantifier in {,}", 
        "Nested quantifiers", 
        " (%Ld nodes)", 
        "%4Ld:%*s%s", 
        " (FAIL)", 
        " (%Ld)", 
        "(checking floating", 
        "(checking anchored", 
        "anchored %s%s at %Ld ", 
        "anchored utf8 %s%s at %Ld ", 
        "floating %s%s at %Ld..%Lu ", 
        " noscan", 
        " isall", 
        "stclass %s ", 
        "(MBOL)", 
        "(SBOL)", 
        "(GPOS)", 
        "GPOS:%Lu ", 
        "implicit ", 
        "minlen %Ld ", 
        "with eval ", 
        "r->extflags: ", 
        "UNICODE", 
        "LOCALE", 
        "ASCII-RESTRICTED", 
        "ASCII-MORE_RESTRICTED", 
        "UNKNOWN CHARACTER SET", 
        "%s[none-set]", 
        "r->intflags: ", 
        "Peep:Pos:%Ld/%Ld Flags: 0x%LX", 
        "Peep>%3d: %s (%d)", 
        "join>%3d: %s (%d)", 
        "skip:>%3d: %s (%d)", 
        "merg>%3d: %s (%d)", 
        "finl>%3d: %s (%d)", 
        "OP(scan) == IFTHEN", 
        "expect IFTHEN>%3d: %s (%d)", 
        "scan>%3d: %s (%d)", 
        "next>%3d: %s (%d)", 
        "Branch>%3d: %s (%d)", 
        "!and_withp", 
        "%s %Lu:%s", 
        "- %d:%s (%d)", 
        " -> %d:%s", 
        "=> %d:%s", 
        "- %s (%d) <SCAN FINISHED> ", 
        "fnew>%3d: %s (%d)", 
        "min >= 0", 
        "EXACTF_invlist", 
        "!isGV_with_GP(last_str)", 
        "flags & SCF_DO_STCLASS_OR", 
        "fend>%3d: %s (%d)", 
        " for split", 
        "msixxn", 
        "Couldn't get", 
        "PERL_DUMP_RE_MAX_LEN", 
        "!new_patternp", 
        "Precompiled pattern%s", 
        "%sCompiling REx%s %s", 
        "RExC_utf8 && SvUTF8(qr)", 
        "pat[s] == '('", 
        "SvROK(qr_ref)", 
        "!pRExC_state->runtime_code_qr", 
        "pat[src->start] == '('", 
        "pat[src->end] == ')'", 
        "Starting first pass (sizing)", 
        "Need to redo pass 1", 
        "Regexp out of space", 
        "(RX_WRAPPED(rx) - p) < 16", 
        "!isGV_with_GP(rx)", 
        "Restudying", 
        "first:>%3d: %s (%d)", 
        "first at %Ld", 
        "study_chunk", 
        "ENTER \"study_chunk\"", 
        "RExC_seen: ", 
        "REG_ZERO_LEN_SEEN ", 
        "REG_LOOKBEHIND_SEEN ", 
        "REG_GPOS_SEEN ", 
        "REG_RECURSE_SEEN ", 
        "REG_TOP_LEVEL_BRANCHES_SEEN ", 
        "REG_VERBARG_SEEN ", 
        "REG_CUTGROUP_SEEN ", 
        "REG_RUN_ON_COMMENT_SEEN ", 
        "REG_UNFOLDED_MULTI_SEEN ", 
        "LEAVE \"study_chunk\"", 
        "synthetic stclass \"%s\".", 
        "Multi Top Level", 
        "scan && OP(scan) == GOSUB", 
        "Final program:", 
        "Offsets: [%Lu]", 
        "%Lu:%Lu[%Lu] ", 
        "%sFreeing REx:%s %s", 
        "ri->regstclass", 
        "panic: regfree data code '%c'", 
        "[:alpha:]", 
        "[:^alpha:]", 
        "[:lower:]", 
        "[:^lower:]", 
        "[:upper:]", 
        "[:^upper:]", 
        "[:punct:]", 
        "[:^punct:]", 
        "[:print:]", 
        "[:^print:]", 
        "[:alnum:]", 
        "[:^alnum:]", 
        "[:graph:]", 
        "[:^graph:]", 
        "[:cased:]", 
        "[:^cased:]", 
        "[:blank:]", 
        "[:^blank:]", 
        "[:xdigit:]", 
        "[:^xdigit:]", 
        "[:cntrl:]", 
        "[:^cntrl:]", 
        "[:ascii:]", 
        "[:^ascii:]", 
        "! UTF || UTF8_IS_INVARIANT(**p) || UTF8_IS_START(**p)", 
        "Sequence (?#... not terminated", 
        "panic: reg_node overrun trying to emit %d, %p>=%p", 
        "%s:%d: (op %s) %s %Lu (len %Lu) (max %Lu).", 
        "** (%d) offset of node %d is %d.", 
        "value of node is %d in Offset macro", 
        "(((U8 *) ((pRExC_state->end))) > ((U8 *) ((pRExC_state->parse))))", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8 *) ((pRExC_state->parse)))) == 1) || !(((unsigned long long)((*((U8 *) ((pRExC_state->parse)))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8 *) ((pRExC_state->parse)))) == 1) || !(((unsigned long long)((*((U8 *) ((pRExC_state->parse)))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8 *) ((pRExC_state->parse)))) == 1) || !(((unsigned long long)((*((U8 *) ((pRExC_state->parse)))) | 0)) & ~0xFF))\", \"re_comp.c\", 8303, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8 *) ((pRExC_state->parse)))))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8 *) ((pRExC_state->parse)))+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) ((pRExC_state->parse)))+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8 *) ((pRExC_state->parse)))+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8 *) ((pRExC_state->parse)))+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*((", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*((U8*)(pRExC_state->parse))) == 1) || !(((unsigned long long)((*((U8*)(pRExC_state->parse))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*((U8*)(pRExC_state->parse))) == 1) || !(((unsigned long long)((*((U8*)(pRExC_state->parse))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*((U8*)(pRExC_state->parse))) == 1) || !(((unsigned long long)((*((U8*)(pRExC_state->parse))) | 0)) & ~0xFF))\", \"re_comp.c\", 8310, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*((U8*)(pRExC_state->parse))))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(((U8*)(pRExC_state->parse))+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8*)(pRExC_state->parse))+1 ))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(((U8*)(pRExC_state->parse))+1 ))) == 1) || !(((unsigned long long)(((U8)(*(((U8*)(pRExC_state->parse))+1 ))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(((U8*)(pRExC_state->parse))+1 ))) == 1) || !(", 
        "Group name must start with a non-digit word character", 
        "panic: no svname in reg_scan_name", 
        "Reference to nonexistent named group", 
        "HAS_NONLATIN1_SIMPLE_FOLD_CLOSURE(cp)", 
        "Perl folding rules are not up-to-date for 0x%02X; please use the perlbug utility to report; in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "! (ANYOF_FLAGS(node) & ANYOF_SHARED_d_UPPER_LATIN1_UTF8_STRING_MATCHES_non_d_RUNTIME_USER_PROP)", 
        "! UTF || UTF8_IS_INVARIANT(*RExC_parse) || UTF8_IS_START(*RExC_parse)", 
        "'%.*s' resolved to '\\o{%.*s}%c'", 
        "Regexp modifier \"%c\" may appear a maximum of twice", 
        "Regexp modifier \"%c\" may not appear twice", 
        "Regexp modifiers \"%c\" and \"%c\" are mutually exclusive", 
        "Regexp modifier \"%c\" may not appear after the \"-\"", 
        "Useless (%s%c) - %suse /%c modifier in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Useless (%sc) - %suse /gc modifier in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Useless use of (?-p) in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Sequence (%d%Lu%4p...) not recognized", 
        "Assuming NOT a POSIX class since it doesn't start with a '[' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since no blanks are allowed in one in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "POSIX syntax [%c %c] is reserved for future extensions", 
        "Assuming NOT a POSIX class since the '^' must come after the colon in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since a semi-colon was found instead of a colon in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since there must be a starting ':' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since the name must be all lowercase letters in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since there is no terminating ':' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Assuming NOT a POSIX class since there is no terminating ']' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "POSIX class [:%s%d%Lu%4p:] unknown", 
        "SvTYPE(invlist) == SVt_INVLIST", 
        "PL_valid_types_PVX[SvTYPE(invlist) & SVt_MASK] || SvTYPE(invlist) == SVt_REGEXP", 
        "SvLEN(invlist) == 0 || SvCUR(invlist) <= SvLEN(invlist)", 
        "! (ANYOF_FLAGS(ssc) & ~( ANYOF_COMMON_FLAGS |ANYOF_SHARED_d_MATCHES_ALL_NON_UTF8_NON_ASCII_non_d_WARN_SUPER |ANYOF_SHARED_d_UPPER_LATIN1_UTF8_STRING_MATCHES_non_d_RUNTIME_USER_PROP))", 
        "! (ANYOF_FLAGS(ssc) & ANYOF_LOCALE_FLAGS) || RExC_contains_locale", 
        "RExC_rxi->data->what[n] == 's'", 
        "i % 2 != 0 || ! ANYOF_POSIXL_TEST((regnode_charclass_posixl*) and_with, i) || ! ANYOF_POSIXL_TEST((regnode_charclass_posixl*) and_with, i + 1)", 
        "invlist_highest(nonbitmap_invlist) < NUM_ANYOF_CODE_POINTS", 
        "UTF8 mismatch! Converting to utf8 for resizing and compile", 
        "oplist->op_type == OP_PADAV || oplist->op_type == OP_RV2AV", 
        "n < pRExC_state->code_blocks->count", 
        "Overloaded qr did not return a REGEXP", 
        "%s(%d): (op %s) %s copy %Lu -> %Lu (max %Lu).", 
        "** (%d) size of node %d is %d.", 
        "value of node is %d in Length macro", 
        "%s(%d): (op %s) %s %Lu <- %Lu (max %Lu).", 
        "PL_valid_types_PVX[SvTYPE(data->last_found) & SVt_MASK] || SvTYPE(data->last_found) == SVt_REGEXP", 
        "!isGV_with_GP(data->last_found)", 
        "!(SvTYPE(data->last_found) == SVt_PVIO && !(IoFLAGS(data->last_found) & IOf_FAKE_DIRP))", 
        "commit: Pos:%Ld/%Ld Flags: 0x%LX", 
        "Last:'%s' %Ld:%Ld/%Ld %sFixed:'%s' @ %Ld %sFloat: '%s' @ %Ld/%Ld", 
        "panic! In trie construction, unknown node type %u %s", 
        "make_trie start==%d, first==%d, last==%d, tail==%d depth=%d", 
        "*uc != LATIN_SMALL_LETTER_SHARP_S", 
        "PL_valid_types_PVX[SvTYPE(zlopp) & SVt_MASK] || SvTYPE(zlopp) == SVt_REGEXP", 
        "!(SvTYPE(zlopp) == SVt_PVIO && !(IoFLAGS(zlopp) & IOf_FAKE_DIRP))", 
        "!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((void) sizeof ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? 1 : 0), __extension__ ({ if (PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ; else __assert_fail (\"PL_valid_types_RV[SvTYPE(_svrv) & SVt_MASK]\", \"re_comp.c\", 2673, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? 1 : 0), __extension__ ({ if (!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ; else __assert_fail (\"!isGV_with_GP(_svrv)\", \"re_comp.c\", 2673, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? 1 ", 
        "!((((zlopp)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zlopp)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zlopp)->sv_flags & 0xff)) == SVt_PVLV))", 
        "!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((void) sizeof ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? 1 : 0), __extension__ ({ if (PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ; else __assert_fail (\"PL_valid_types_RV[SvTYPE(_svrv) & SVt_MASK]\", \"re_comp.c\", 2678, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? 1 : 0), __extension__ ({ if (!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ; else __assert_fail (\"!isGV_with_GP(_svrv)\", \"re_comp.c\", 2678, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? 1 ", 
        "(sizeof(uvc) == 1) || !(((unsigned long long)(uvc)) & ~(32 * (1U << 6) - 1))", 
        "( (sizeof((((UV) (uvc)) >> 6) | (((2) > 7) ? 0xFF : (0xFF & (0xFE << (7-(2)))))) == 1) || !(((unsigned long long)(((((UV) (uvc)) >> 6) | (((2) > 7) ? 0xFF : (0xFF & (0xFE << (7-(2)))))) | 0)) & ~0xFF))", 
        "error creating/fetching widecharmap entry for 0x%LX", 
        "!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((void) sizeof ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? 1 : 0), __extension__ ({ if (PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ; else __assert_fail (\"PL_valid_types_RV[SvTYPE(_svrv) & SVt_MASK]\", \"re_comp.c\", 2706, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? 1 : 0), __extension__ ({ if (!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ; else __assert_fail (\"!isGV_with_GP(_svrv)\", \"re_comp.c\", 2706, __extension__ __PRETTY_FUNCTION__); })); ((void) sizeof ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? 1 ", 
        "TRIE(%s): W:%d C:%d Uq:%d Min:%d Max:%d", 
        "Compiling trie using list compiler", 
        "panic! In trie construction, no char mapping for %Ld", 
        "State :Word | Transition Data", 
        "------:-----+-----------------", 
        "Compiling trie using table compiler", 
        "Alloc: %d Orig: %Ld elements, Final:%Ld. Savings of %%%5.2f", 
        "MJD offset:%Lu MJD length:%Lu", 
        "Prefix State: %Lu Ofs:%Lu Char='%s'", 
        "panic: Unknown flags %d in named_buff_iter", 
        "panic: Unknown flags %d in named_buff_scalar", 
        "panic: Unknown flags %d in named_buff", 
        "(STRLEN)rx->sublen >= (STRLEN)((s - rx->subbeg) + i)", 
        "Corrupted regexp opcode %d > %d", 
        "<S:%Lu/%Ld W:%Lu L:%Lu/%Lu C:%Lu/%Lu>", 
        "! invlist_is_iterating(invlist)", 
        "PL_valid_types_PVX[SvTYPE(output) & SVt_MASK] || SvTYPE(output) == SVt_REGEXP", 
        "!(SvTYPE(output) == SVt_PVIO && !(IoFLAGS(output) & IOf_FAKE_DIRP))", 
        "FLAGS(o) < C_ARRAY_LENGTH(bounds)", 
        "~ attach to %s (%Ld) offset to %Ld", 
        "In '(*VERB...)', the '(' and '*' must be adjacent", 
        "Unterminated verb pattern argument", 
        "Unknown verb pattern '%d%Lu%4p'", 
        "Verb pattern '%.*s' has a mandatory argument", 
        "In '(?...)', the '(' and '?' must be adjacent", 
        "Sequence (?P<... not terminated", 
        "Sequence (?P>... not terminated", 
        "Sequence %.3s... not terminated", 
        "Sequence (%.*s...) not recognized", 
        "Sequence (?%c... not terminated", 
        "panic: reg_scan_name returned NULL", 
        "panic: paren_name hash element allocation failed", 
        "PL_valid_types_PVX[SvTYPE(sv_dat) & SVt_MASK] || SvTYPE(sv_dat) == SVt_REGEXP", 
        "!(SvTYPE(sv_dat) == SVt_PVIO && !(IoFLAGS(sv_dat) & IOf_FAKE_DIRP))", 
        "PL_valid_types_IV_set[SvTYPE(sv_dat) & SVt_MASK]", 
        "!((((sv_dat)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_PVLV))", 
        "Sequence (?%c...) not implemented", 
        "Sequence (?&... not terminated", 
        "Reference to nonexistent group", 
        "panic: Sequence (?{...}): no code block found", 
        "Eval-group not allowed at runtime, use re 'eval'", 
        "Sequence (?(%c... not terminated", 
        "SIZE_ONLY ? !sv_dat : !!sv_dat", 
        "panic: grok_atoUV returned FALSE", 
        "Switch condition not recognized", 
        "panic: regbranch returned NULL, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "(?(DEFINE)....) does not allow branches", 
        "Switch (?(condition)... not terminated", 
        "Switch (?(condition)... contains too many branches", 
        "Unknown switch condition (?(...))", 
        "%*s%*s Setting open paren #%Ld to %d", 
        "%*s%*s Setting close paren #%Ld to %d", 
        "%*s%*s Setting close paren #0 (END) to %d", 
        "~ tying lastbr %s (%Ld) to ender %s (%Ld) offset %Ld", 
        "~ converting ret %s (%Ld) to ender %s (%Ld) offset %Ld", 
        "cBOOL(node_p) ^ cBOOL(code_point_p)", 
        "\\N{NAME} must be resolved by the lexer", 
        "Invalid hexadecimal number in \\N{U+...}", 
        "panic: reg returned NULL to grok_bslash_N, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        " (but this one isn't fully valid)", 
        " (but this one isn't implemented)", 
        "Can't find Unicode property definition", 
        "Illegal user-defined property name", 
        "(! (((pRExC_state->emit) == (regnode *) & (pRExC_state->emit_dummy)) ? (_Bool)1 : (_Bool)0))", 
        "POSIX syntax [%c %c] belongs inside character classes%s in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "((svtype)((posix_warnings)->sv_flags & 0xff)) == SVt_PVAV", 
        "panic: grok_bslash_N set NEED_UTF8", 
        "\\N in a character class must be a named character: \\N{...}", 
        "Ignoring zero length \\N{} in character class in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "\\N{} in inverted character class or as a range end-point is restricted to one character", 
        "Using just the first character returned by \\N{} in character class in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Character following \\%c must be '{' or a single-character Unicode property name", 
        "Unrecognized escape \\%c in character class", 
        "Unrecognized escape \\%c in character class passed through in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "False [] range \"%d%Lu%4p\" in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "namedclass == ANYOF_HORIZWS || namedclass == ANYOF_NHORIZWS", 
        "False [] range \"%*.*s\" in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Ranges of ASCII printables should be some subset of \"0-9\", \"A-Z\", or \"a-z\" in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Ranges of digits should be from the same group of 10 in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "\"%.*s\" is more clearly written simply as \"%s\" in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "((svtype)((multi_char_matches)->sv_flags & 0xff)) == SVt_PVAV", 
        "panic: regclass returned NULL to handle_sets, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "Unexpected ']' with no following ')' in (?[...", 
        "The regex_sets feature is experimental in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "panic: Read past end of '(?[ ])'", 
        "((svtype)((stack)->sv_flags & 0xff)) == SVt_PVAV", 
        "Expecting close paren for nested extended charclass", 
        "Expecting close paren for wrapper for nested extended charclass", 
        "Unexpected '(' with no preceding operator", 
        "((svtype)((fence_stack)->sv_flags & 0xff)) == SVt_PVAV", 
        "Unexpected binary operator '%c' with no preceding operand", 
        "Operand with no preceding operator", 
        "Incomplete expression within '(?[ ])'", 
        "panic: regclass returned NULL to regatom, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "panic: reg returned NULL to regatom, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "'%d%Lu%4p' is an unknown bound type", 
        "Using /u for '%.*s' instead of /%s in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Sequence %.2s... not terminated", 
        "Reference to nonexistent or unclosed group", 
        "(RExC_flags & RXf_PMf_EXTENDED) == 0", 
        "! UTF || UTF8_IS_INVARIANT(UCHARAT(RExC_parse)) || UTF8_IS_START(UCHARAT(RExC_parse))", 
        "(RExC_flags & RXf_PMf_EXTENDED) == 0 || ! is_PATWS_safe((p), RExC_end, UTF)", 
        "Unrecognized escape \\%.*s passed through in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Unescaped left brace in regex is illegal here", 
        "Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.30), passed through in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Unescaped literal '%c' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "(( (sizeof(ender) == 1) || !(((unsigned long long)((ender) | 0)) & ~0xFF)) && ((PL_charclass[(U8) (ender)] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (( (sizeof('s') == 1) || !(((unsigned long long)(('s') | 0)) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))", 
        "(( (sizeof(*(s-1)) == 1) || !(((unsigned long long)((*(s-1)) | 0)) & ~0xFF)) && ((PL_charclass[(U8) (*(s-1))] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (( (sizeof('s') == 1) || !(((unsigned long long)(('s') | 0)) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))", 
        "( (sizeof((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))\", \"re_comp.c\", 13708, __extension__ __PRETTY_FUNCTION__); })), ((U8) (*s))) & (((2) >= 7) ? 0x00 : (0x1F >> ((2)-2))))) << 6) | (((((void) sizeof ((( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))) ? 1 : 0), __extension__ ({ if (( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))) ; else __assert_fail (\"( (sizeof((U8)(*(s+1))) == 1) || !(((unsigned long long)(((U8)(*(s+1))) | 0)) & ~0xFF))\", \"re_comp.c\", 13708, __extension__ __PRETTY_FUNCTION__); })), ((U8) ((U8)(*(s+1)))))) & ((U8) ((1U << 6) - 1))))) == 1) || !(((unsigned long long)(((((( (((void) sizeof ((( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF))) ? 1 : 0), __extension_", 
        "panic: regatom returned NULL, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "Quantifier in {,} bigger than %d", 
        "Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "%d%Lu%4p matches null string many times in regex; marked by <-- HERE in m/%d%Lu%4p <-- HERE %d%Lu%4p/", 
        "panic: regpiece returned NULL, flags=%#Lx in regex m/%d%Lu%4p%s/", 
        "floating utf8 %s%s at %Ld..%Lu ", 
        "study_chunk stopparen=%ld recursed_count=%lu depth=%lu recursed_depth=%lu scan=%p last=%p", 
        "(( (sizeof(*s) == 1) || !(((unsigned long long)((*s) | 0)) & ~0xFF)) && ((PL_charclass[(U8) (*s)] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (( (sizeof('s') == 1) || !(((unsigned long long)(('s') | 0)) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))", 
        "(( (sizeof(*(s+1)) == 1) || !(((unsigned long long)((*(s+1)) | 0)) & ~0xFF)) && ((PL_charclass[(U8) (*(s+1))] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (( (sizeof('s') == 1) || !(((unsigned long long)(('s') | 0)) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))", 
        "Looking for TRIE'able sequences. Tail node is ", 
        "(First==%d,Last==%d,Cur==%d,tt==%s,ntt==%s,nntt==%s)", 
        "(First==%d, Last==%d, Cur==%d, tt==%s)", 
        "- %s (%d) <NOTHING BRANCH SEQUENCE>", 
        "gosub-set:Pos:%Ld/%Ld Flags: 0x%LX", 
        "gosub-inf:Pos:%Ld/%Ld Flags: 0x%LX", 
        "frame-new:Pos:%Ld/%Ld Flags: 0x%LX", 
        "Quantifier unexpected on zero-length expression in regex m/%d%Lu%4p/", 
        "data->whilem_c <= RExC_whilem_seen", 
        "PL_valid_types_PVX[SvTYPE(last_str) & SVt_MASK] || SvTYPE(last_str) == SVt_REGEXP", 
        "!(SvTYPE(last_str) == SVt_PVIO && !(IoFLAGS(last_str) & IOf_FAKE_DIRP))", 
        "panic: unexpected varying REx opcode %d", 
        "panic: unexpected simple REx opcode %d", 
        "Variable length lookbehind not implemented", 
        "Lookbehind longer than %Lu not implemented in regex m/%d%Lu%4p%s/", 
        "frame-end:Pos:%Ld/%Ld Flags: 0x%LX", 
        "pre-fin:Pos:%Ld/%Ld Flags: 0x%LX", 
        "post-fin:Pos:%Ld/%Ld Flags: 0x%LX", 
        "Assembling pattern from %d elements%s", 
        "expr->op_type == OP_PUSHMARK || (expr->op_type == OP_NULL && expr->op_targ == OP_PUSHMARK) || expr->op_type == OP_PADRANGE", 
        "Eval-group in insecure regular expression", 
        "%sre-parsing pattern for runtime code:%s %s", 
        "SvTYPE(qr) == SVt_REGEXP && RX_ENGINE((REGEXP*)qr)->op_comp", 
        "src->end < r2->code_blocks->cb[i2].start", 
        "r1->code_blocks->cb[i1].start > r2->code_blocks->cb[i2].start", 
        "src->end < r1->code_blocks->cb[i1].start", 
        "panic: reg returned NULL to re_op_compile for sizing pass, flags=%#Lx", 
        "Required size %Ld nodes", 
        "Starting second pass (creation)", 
        "PL_valid_types_PVX[SvTYPE(rx) & SVt_MASK] || SvTYPE(rx) == SVt_REGEXP", 
        "!(SvTYPE(rx) == SVt_PVIO && !(IoFLAGS(rx) & IOf_FAKE_DIRP))", 
        "%s %Lu bytes for offset annotations.", 
        "%*s%*s Setting up open/close parens", 
        "panic: reg returned NULL to re_op_compile for generation pass, flags=%#Lx", 
        "Starting post parse optimization", 
        "Stclass Failtable (%Lu states): 0", 
        "REG_UNBOUNDED_QUANTIFIER_SEEN ", 
        "((char*)PL_scopestack_name[PL_scopestack_ix-1] == (char*)\"study_chunk\") || strEQ(PL_scopestack_name[PL_scopestack_ix-1], \"study_chunk\")", 
        "minlen: %Ld r->minlen:%Ld maxlen:%Ld", 
        "study_chunk_recursed_count: %lu", 
        "%sUsing REx %ssubstr:%s \"%s%.60s%s%s\"", 
        "panic: re_dup_guts unknown data code '%c'", 
        "my_regdupe", 
        "my_regfree", 
        "my_re_intuit_string", 
        "S_invlist_contents", 
        "S_put_code_point", 
        "S_put_range", 
        "S_put_charclass_bitmap_innards_invlist", 
        "S_put_charclass_bitmap_innards_common", 
        "S_put_charclass_bitmap_innards", 
        "my_regprop", 
        "S_dumpuntil", 
        "my_regdump", 
        "my_reg_qr_package", 
        "Perl_is_utf8_string_loclen", 
        "my_reg_numbered_buff_length", 
        "my_reg_numbered_buff_store", 
        "my_reg_numbered_buff_fetch", 
        "my_reg_named_buff_all", 
        "my_reg_named_buff_scalar", 
        "my_reg_named_buff_nextkey", 
        "my_reg_named_buff_firstkey", 
        "my_reg_named_buff_exists", 
        "my_reg_named_buff_fetch", 
        "my_reg_named_buff_iter", 
        "my_reg_named_buff", 
        "S_ssc_finalize", 
        "S_is_ssc_worth_it", 
        "S_ssc_is_cp_posixl_init", 
        "S_ssc_and", 
        "S_get_ANYOF_cp_list_for_ssc", 
        "S_ssc_or", 
        "S_ssc_union", 
        "S_ssc_clear_locale", 
        "S_ssc_intersection", 
        "S_ssc_add_range", 
        "S__make_exactf_invlist", 
        "S_ssc_cp_and", 
        "S_dump_trie", 
        "S_dump_trie_interim_table", 
        "S_dump_trie_interim_list", 
        "S_make_trie", 
        "S_join_exact", 
        "S_study_chunk", 
        "S_ssc_anything", 
        "S_ssc_init", 
        "S_scan_commit", 
        "S_construct_ahocorasick_from_trie", 
        "S_nextchar", 
        "S_regtail_study", 
        "S_reg_node", 
        "S_reginsert", 
        "S_regtail", 
        "S_reganode", 
        "Perl_utf8_hop", 
        "S_regatom", 
        "S_regpiece", 
        "S_regbranch", 
        "S_set_ANYOF_arg", 
        "S_populate_ANYOF_from_invlist", 
        "S_alloc_maybe_populate_EXACT", 
        "S_invlist_iterfinish", 
        "S_compute_EXACTish", 
        "S__invlist_contains_cp", 
        "S_invlist_set_len", 
        "S_invlist_clone", 
        "S_add_above_Latin1_folds", 
        "S_add_multi_match", 
        "S_form_short_octal_warning", 
        "S_grok_bslash_N", 
        "S_regclass", 
        "S_invlist_array", 
        "S_get_invlist_offset_addr", 
        "S__invlist_len", 
        "S_get_invlist_iter_addr", 
        "S_invlist_iterinit", 
        "S_regex_set_precedence", 
        "S_av_top_index", 
        "S_handle_possible_posix", 
        "S_output_or_return_posix_warnings", 
        "S_handle_regex_sets", 
        "S_reg_scan_name", 
        "S_re_croak2", 
        "S_regnode_guts", 
        "S_reg2Lanode", 
        "S_skip_to_be_ignored_text", 
        "S_handle_named_backref", 
        "S_ReANY", 
        "get_regex_charset_name", 
        "S_pat_upgrade_to_utf8", 
        "S_compile_runtime_code", 
        "S_concat_pat", 
        "my_re_op_compile", 
        "my_re_compile", 
        "Perl_re_indentf", 
        "Perl_re_printf", 
        "MARK pop  %p %Ld", 
        "re::install", 
        "re::regmust", 
        "(PL_markstack_ptr > PL_markstack) || !\"MARK underflow\"", 
        "S_ReANY", 
        "S_POPMARK", 
        ".shstrtab", 
        ".note.gnu.build-id", 
        ".gnu.hash", 
        ".dynsym", 
        ".dynstr", 
        ".gnu.version", 
        ".gnu.version_r", 
        ".rel.dyn", 
        ".rel.plt", 
        ".plt.got", 
        ".rodata", 
        ".eh_frame_hdr", 
        ".eh_frame", 
        ".init_array", 
        ".fini_array", 
        ".data.rel.ro", 
        ".dynamic", 
        ".got.plt", 
        ".gnu_debuglink", 
        "jjjjjj", 
        "jjjjjj"
    ], 
    "metadata": {
        "output": {
            "pcap": {
                "basename": "dump.pcap", 
                "sha256": "0dee88eb70146aacf2a62acec5190831c75f1e93ee944d25f708bd3460abb4fd", 
                "dirname": ""
            }
        }
    }
}