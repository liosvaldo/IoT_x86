{
    "info": {
        "added": 1626981281.917564, 
        "started": 1627058003.218663, 
        "duration": 77, 
        "ended": 1627058080.927025, 
        "owner": null, 
        "score": 0.0, 
        "id": 2325863, 
        "category": "file", 
        "git": {
            "head": "", 
            "fetch_head": ""
        }, 
        "monitor": null, 
        "package": "elf", 
        "route": "internet", 
        "custom": null, 
        "machine": {
            "status": "stopped", 
            "name": "Ubuntu1904x647", 
            "label": "Ubuntu1904x647", 
            "platform": "linux", 
            "manager": "VirtualBox", 
            "started_on": "2021-07-23 16:33:24", 
            "shutdown_on": "2021-07-23 16:34:40"
        }, 
        "platform": "linux", 
        "version": "2.0.7", 
        "options": "procmemdump=yes,route=internet"
    }, 
    "signatures": [], 
    "target": {
        "category": "file", 
        "file": {
            "mimetype": "application/x-sharedlib", 
            "yara": [], 
            "sha1": "2b2085e755bd504be13a1acd356c92a8268eccbf", 
            "name": "rpcgen", 
            "type": "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e12f78e620a0f71ff376d680ffc676871719c348, stripped", 
            "sha256": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689", 
            "urls": [
                "https://bugs.launchpad.net/ubuntu/"
            ], 
            "crc32": "400D43A3", 
            "path": "/srv/cuckoo/cwd/storage/binaries/aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689", 
            "ssdeep": null, 
            "size": 104184, 
            "sha512": "e96410636522a2c07c185d8ec06eb380be8fa60d9db9b5964040a67c9102c9164deebdee1615df59c4b37e7c37388d33114f3685311518c98ae4bbac27626995", 
            "md5": "00bc395f60b3e41a008f4040fb252a9e"
        }, 
        "custom": null
    }, 
    "irma": {
        "status": 0, 
        "probes_finished": 16, 
        "scan_id": "4a1db046-c8cd-4960-9195-680a224ecf72", 
        "parent_file_sha256": null, 
        "name": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689", 
        "scan_date": 1627076607, 
        "other_results": [], 
        "submitter": "cli", 
        "probes_total": 16, 
        "file_infos": {
            "mimetype": "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV)", 
            "sha1": "2b2085e755bd504be13a1acd356c92a8268eccbf", 
            "tags": [], 
            "timestamp_first_scan": 1626895774.47, 
            "timestamp_last_scan": 1627076642.53, 
            "sha256": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689", 
            "md5": "00bc395f60b3e41a008f4040fb252a9e", 
            "size": 104184
        }, 
        "probe_results": {
            "antivirus": {
                "Avast Core Security (Linux)": {
                    "status": 0, 
                    "duration": 0.01, 
                    "version": "3.0.3", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "F-Secure Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.02, 
                    "version": "11.10", 
                    "results": null, 
                    "virus_database_version": "2021-06-08_09"
                }, 
                "Windows Defender (Windows)": {
                    "status": 0, 
                    "duration": 0.03, 
                    "version": "1.1.18300.4", 
                    "results": null, 
                    "virus_database_version": "1.343.1173.0"
                }, 
                "Comodo Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 2.14, 
                    "version": "1.1.268025.1", 
                    "results": null, 
                    "virus_database_version": "2021-05-05"
                }, 
                "ESET NOD32 Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 4.14, 
                    "version": "4.0.96", 
                    "results": null, 
                    "virus_database_version": "6087dbf0-1e845 (2021-04-27)"
                }, 
                "GData (Windows)": {
                    "status": 0, 
                    "duration": 0.17, 
                    "version": "5.5.20197.1358", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Forticlient (Linux)": {
                    "status": -1, 
                    "duration": 3.24, 
                    "version": "unavailable", 
                    "virus_database_version": "unavailable", 
                    "error": "/opt/forticlient/scan.sh: line 8: 1793598 Segmentation fault      (core dumped) \"$scanbin\" -s \"$vir_sig\" -o \"$tmpdir\" --unit \"${forti}/\" -d \"$1\""
                }, 
                "Avira (Windows)": {
                    "status": 0, 
                    "duration": 3.95, 
                    "version": "8.3.62.226", 
                    "results": null, 
                    "virus_database_version": "8.18.36.236"
                }, 
                "Kaspersky (Windows)": {
                    "status": 0, 
                    "duration": 4.03, 
                    "version": "21.3", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "McAfee CLI scanner (Linux)": {
                    "status": 0, 
                    "duration": 5.07, 
                    "version": "6.0.6.653", 
                    "results": null, 
                    "virus_database_version": "9966"
                }, 
                "Sophos Anti-Virus (Linux)": {
                    "status": 0, 
                    "duration": 12.26, 
                    "version": "5.74.0", 
                    "results": null, 
                    "virus_database_version": "5.83 (23 March 2021)"
                }, 
                "DrWeb Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.07, 
                    "version": "11.1.9.2103151924", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "ClamAV (Linux)": {
                    "status": 0, 
                    "duration": 0.02, 
                    "version": "0.103.2", 
                    "results": null, 
                    "virus_database_version": "26190"
                }, 
                "eScan Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 4.14, 
                    "version": "7.0.21", 
                    "results": null, 
                    "virus_database_version": "7.88854 (16/06/2021)"
                }, 
                "Emsisoft Commandline Scanner (Windows)": {
                    "status": 0, 
                    "duration": 0.23, 
                    "version": "2021.1.0.10606", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Bitdefender Antivirus Scanner (Linux)": {
                    "status": 0, 
                    "duration": 5.66, 
                    "version": "7.90123", 
                    "results": null, 
                    "virus_database_version": null
                }
            }
        }, 
        "path": "", 
        "result_id": "9cc6056e-860c-4aba-abda-c4fa520411d3", 
        "file_sha256": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689"
    }, 
    "suricata": {
        "tls": [], 
        "files": [], 
        "alerts": [], 
        "http": []
    }, 
    "virustotal": {
        "scans": {
            "Bkav": {
                "detected": false, 
                "version": "1.3.0.9899", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Lionic": {
                "detected": false, 
                "version": "4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ClamAV": {
                "detected": false, 
                "version": "0.103.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "FireEye": {
                "detected": false, 
                "version": "32.44.1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "CAT-QuickHeal": {
                "detected": false, 
                "version": "14.00", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "McAfee": {
                "detected": false, 
                "version": "6.0.6.653", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Malwarebytes": {
                "detected": false, 
                "version": "4.2.2.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Zillya": {
                "detected": false, 
                "version": "2.0.0.4382", 
                "result": null, 
                "normalized": [], 
                "update": "20210607"
            }, 
            "Sangfor": {
                "detected": false, 
                "version": "2.9.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210607"
            }, 
            "K7AntiVirus": {
                "detected": false, 
                "version": "11.187.37398", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "K7GW": {
                "detected": false, 
                "version": "11.187.37398", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Arcabit": {
                "detected": false, 
                "version": "1.0.0.886", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Baidu": {
                "detected": false, 
                "version": "1.0.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20190318"
            }, 
            "Cyren": {
                "detected": false, 
                "version": "6.3.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Symantec": {
                "detected": false, 
                "version": "1.14.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ESET-NOD32": {
                "detected": false, 
                "version": "23431", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TrendMicro-HouseCall": {
                "detected": false, 
                "version": "10.0.0.1040", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Avast": {
                "detected": false, 
                "version": "21.1.5827.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Cynet": {
                "detected": false, 
                "version": "4.0.0.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Kaspersky": {
                "detected": false, 
                "version": "21.0.1.45", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "BitDefender": {
                "detected": false, 
                "version": "7.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "NANO-Antivirus": {
                "detected": false, 
                "version": "1.0.146.25311", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "ViRobot": {
                "detected": false, 
                "version": "2014.3.20.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "MicroWorld-eScan": {
                "detected": false, 
                "version": "14.0.409.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Tencent": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Ad-Aware": {
                "detected": false, 
                "version": "3.0.21.179", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Emsisoft": {
                "detected": false, 
                "version": "2018.12.0.1641", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Comodo": {
                "detected": false, 
                "version": "33605", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "F-Secure": {
                "detected": false, 
                "version": "12.0.86.52", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "DrWeb": {
                "detected": false, 
                "version": "7.0.49.9080", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "VIPRE": {
                "detected": false, 
                "version": "93160", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TrendMicro": {
                "detected": false, 
                "version": "11.0.0.1006", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "McAfee-GW-Edition": {
                "detected": false, 
                "version": "v2019.1.2+3728", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "CMC": {
                "detected": false, 
                "version": "2.10.2019.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210506"
            }, 
            "Sophos": {
                "detected": false, 
                "version": "1.0.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Ikarus": {
                "detected": false, 
                "version": "0.1.5.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Avast-Mobile": {
                "detected": false, 
                "version": "210608-00", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Jiangmin": {
                "detected": false, 
                "version": "16.0.100", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Avira": {
                "detected": false, 
                "version": "8.3.3.12", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Antiy-AVL": {
                "detected": false, 
                "version": "3.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Kingsoft": {
                "detected": false, 
                "version": "2017.9.26.565", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Gridinsoft": {
                "detected": false, 
                "version": "1.0.44.137", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Microsoft": {
                "detected": false, 
                "version": "1.1.18200.4", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "SUPERAntiSpyware": {
                "detected": false, 
                "version": "5.6.0.1032", 
                "result": null, 
                "normalized": [], 
                "update": "20210605"
            }, 
            "ZoneAlarm": {
                "detected": false, 
                "version": "1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "GData": {
                "detected": false, 
                "version": "A:25.29904B:27.23297", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "TACHYON": {
                "detected": false, 
                "version": "2021-06-09.01", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "AhnLab-V3": {
                "detected": false, 
                "version": "3.20.2.10137", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Acronis": {
                "detected": false, 
                "version": "1.1.1.82", 
                "result": null, 
                "normalized": [], 
                "update": "20210512"
            }, 
            "BitDefenderTheta": {
                "detected": false, 
                "version": "7.2.37796.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210602"
            }, 
            "ALYac": {
                "detected": false, 
                "version": "1.1.3.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "MAX": {
                "detected": false, 
                "version": "2019.9.16.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "VBA32": {
                "detected": false, 
                "version": "5.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Zoner": {
                "detected": false, 
                "version": "0.0.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Rising": {
                "detected": false, 
                "version": "25.0.0.26", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Yandex": {
                "detected": false, 
                "version": "5.5.2.24", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "SentinelOne": {
                "detected": false, 
                "version": "5.1.0.5", 
                "result": null, 
                "normalized": [], 
                "update": "20210518"
            }, 
            "MaxSecure": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Fortinet": {
                "detected": false, 
                "version": "6.2.142.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }, 
            "Panda": {
                "detected": false, 
                "version": "4.6.4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210608"
            }, 
            "Qihoo-360": {
                "detected": false, 
                "version": "1.0.0.1120", 
                "result": null, 
                "normalized": [], 
                "update": "20210609"
            }
        }, 
        "scan_id": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689-1623217328", 
        "sha1": "2b2085e755bd504be13a1acd356c92a8268eccbf", 
        "resource": "00bc395f60b3e41a008f4040fb252a9e", 
        "response_code": 1, 
        "scan_date": "2021-06-09 05:42:08", 
        "permalink": "https://www.virustotal.com/gui/file/aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689/detection/f-aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689-1623217328", 
        "summary": {
            "positives": 0, 
            "permalink": "https://www.virustotal.com/gui/file/aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689/detection/f-aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689-1623217328", 
            "scan_date": "2021-06-09 05:42:08"
        }, 
        "sha256": "aa78b9d2df7b89f14bd3b9e285831c2e373ea93dec4b798d79d1dd5d7062e689", 
        "normalized": [], 
        "total": 61, 
        "positives": 0, 
        "verbose_msg": "Scan finished, information embedded", 
        "md5": "00bc395f60b3e41a008f4040fb252a9e"
    }, 
    "network": {
        "tls": [], 
        "udp": [], 
        "dns_servers": [], 
        "http": [], 
        "icmp": [], 
        "smtp": [], 
        "tcp": [], 
        "smtp_ex": [], 
        "geoinfo": {}, 
        "mitm": [], 
        "hosts": [], 
        "pcap_sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea", 
        "dns": [], 
        "http_ex": [], 
        "domains": [], 
        "dead_hosts": [], 
        "irc": [], 
        "https_ex": []
    }, 
    "resubmit": {
        "resubmit_ids": []
    }, 
    "snort": {
        "alerts": []
    }, 
    "behavior": {
        "generic": [
            {
                "process_path": null, 
                "process_name": "sh", 
                "pid": 2076, 
                "summary": {}, 
                "first_seen": 1626981293.065931, 
                "ppid": -1
            }
        ], 
        "processes": [
            {
                "calls": [
                    {
                        "status": "ENOENT", 
                        "process_name": "sh", 
                        "pid": 2076, 
                        "raw": "Thu Jul 22 19:14:53 2021.065931 sh@7f4ee37a2957[2076] execve(\"/tmp/rpcgen\", [\"/tmp/rpcgen\"], [\"SUDO_GID=0\", \"MAIL=/var/mail/root\", \"USER=root\", \"HOME=/root\", \"SUDO_UID=0\", \"LOGNAME=root\", \"SYSTEMTAP_MODULE=stap_\", \"TERM=unknown\", \"SYSTEMTAP_VERBOSE=2\", \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\", \"DISPLAY=:0\", \"LANG=en_US.UTF-8\", \"XAUTHORITY=/root/.Xauthority\", \"SUDO_COMMAND=/usr/bin/staprun -vv -o stap.log /root/.cuckoo/stap_.ko -c sh -c /tmp/rpcgen\", \"SHELL=/bin/bash\", \"SUDO_USER=root\", \"PWD=/tmp/tmpa9nyER\"]) = -2 (ENOENT)\n", 
                        "api": "execve", 
                        "return_value": "-2", 
                        "category": "process", 
                        "instruction_pointer": "7f4ee37a2957", 
                        "arguments": {
                            "p2": [
                                "SUDO_GID=0", 
                                "MAIL=/var/mail/root", 
                                "USER=root", 
                                "HOME=/root", 
                                "SUDO_UID=0", 
                                "LOGNAME=root", 
                                "SYSTEMTAP_MODULE=stap_", 
                                "TERM=unknown", 
                                "SYSTEMTAP_VERBOSE=2", 
                                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin", 
                                "DISPLAY=:0", 
                                "LANG=en_US.UTF-8", 
                                "XAUTHORITY=/root/.Xauthority", 
                                "SUDO_COMMAND=/usr/bin/staprun -vv -o stap.log /root/.cuckoo/stap_.ko -c sh -c /tmp/rpcgen", 
                                "SHELL=/bin/bash", 
                                "SUDO_USER=root", 
                                "PWD=/tmp/tmpa9nyER"
                            ], 
                            "p0": "/tmp/rpcgen", 
                            "p1": [
                                "/tmp/rpcgen"
                            ]
                        }, 
                        "time": 1626981293.065931
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2076, 
                        "raw": "Thu Jul 22 19:14:53 2021.066135 sh@7f4ee37ce024[2076] write(2, \"sh: 1: \", 7) = 7\n", 
                        "api": "write", 
                        "return_value": "7", 
                        "category": "process", 
                        "instruction_pointer": "7f4ee37ce024", 
                        "arguments": {
                            "p2": "7", 
                            "p0": "2", 
                            "p1": "sh: 1: "
                        }, 
                        "time": 1626981293.066135
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2076, 
                        "raw": "Thu Jul 22 19:14:53 2021.066196 sh@7f4ee37ce024[2076] write(2, \"/tmp/rpcgen: not found\", 22) = 22\n", 
                        "api": "write", 
                        "return_value": "22", 
                        "category": "process", 
                        "instruction_pointer": "7f4ee37ce024", 
                        "arguments": {
                            "p2": "22", 
                            "p0": "2", 
                            "p1": "/tmp/rpcgen: not found"
                        }, 
                        "time": 1626981293.066196
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2076, 
                        "raw": "Thu Jul 22 19:14:53 2021.066248 sh@7f4ee37ce024[2076] write(2, \"\\n\", 1) = 1\n", 
                        "api": "write", 
                        "return_value": "1", 
                        "category": "process", 
                        "instruction_pointer": "7f4ee37ce024", 
                        "arguments": {
                            "p2": "1", 
                            "p0": "2", 
                            "p1": "\n"
                        }, 
                        "time": 1626981293.066248
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2076, 
                        "raw": "Thu Jul 22 19:14:53 2021.066313 sh@7f4ee37a2926[2076] exit_group(127)\n", 
                        "api": "exit_group", 
                        "return_value": "", 
                        "category": "process", 
                        "instruction_pointer": "7f4ee37a2926", 
                        "arguments": {
                            "p0": "127"
                        }, 
                        "time": 1626981293.066313
                    }
                ], 
                "pid": 2076, 
                "process_name": "sh", 
                "command_line": "", 
                "first_seen": 1626981293.065931, 
                "ppid": -1, 
                "type": "process"
            }
        ], 
        "processtree": [
            {
                "track": true, 
                "pid": 2076, 
                "process_name": "sh", 
                "command_line": "", 
                "first_seen": 1626981293.065931, 
                "ppid": -1, 
                "children": []
            }
        ]
    }, 
    "debug": {
        "action": [], 
        "dbgview": [], 
        "errors": [], 
        "log": [
            "2021-07-22 19:14:41,003 [root] DEBUG: Starting analyzer from: /tmp/tmpa9nyER\n", 
            "2021-07-22 19:14:41,004 [root] DEBUG: Storing results at: /tmp/akWFXk\n", 
            "2021-07-22 19:14:42,774 [modules.auxiliary.filecollector] INFO: FileCollector started v0.08\n", 
            "2021-07-22 19:14:43,275 [modules.auxiliary.human] INFO: Human started v0.02\n", 
            "2021-07-22 19:14:43,777 [modules.auxiliary.screenshots] INFO: Screenshots started v0.03\n", 
            "2021-07-22 19:14:53,059 [lib.core.packages] INFO: Process startup took 9.28 seconds\n", 
            "2021-07-22 19:14:53,060 [root] INFO: Added new process to list with pid: 2063\n", 
            "2021-07-22 19:15:05,128 [root] INFO: Process with pid 2063 has terminated\n", 
            "2021-07-22 19:15:05,130 [root] INFO: Process list is empty, terminating analysis.\n", 
            "2021-07-22 19:15:08,134 [lib.core.packages] INFO: Package requested stop\n", 
            "2021-07-22 19:15:08,136 [lib.core.packages] WARNING: Exception uploading log: [Errno 3] No such process\n"
        ], 
        "cuckoo": [
            "2021-07-23 16:33:23,786 [cuckoo.core.scheduler] INFO: Task #2325863: acquired machine Ubuntu1904x647 (label=Ubuntu1904x647)\n", 
            "2021-07-23 16:33:23,787 [cuckoo.core.resultserver] DEBUG: Now tracking machine 192.168.168.107 for task #2325863\n", 
            "2021-07-23 16:33:23,925 [cuckoo.auxiliary.sniffer] INFO: Started sniffer with PID 3749406 (interface=vboxnet0, host=192.168.168.107)\n", 
            "2021-07-23 16:33:24,038 [cuckoo.machinery.virtualbox] DEBUG: Starting vm Ubuntu1904x647\n", 
            "2021-07-23 16:33:24,348 [cuckoo.machinery.virtualbox] DEBUG: Restoring virtual machine Ubuntu1904x647 to Snapshot\n", 
            "2021-07-23 16:33:37,337 [cuckoo.core.guest] INFO: Starting analysis #2325863 on guest (id=Ubuntu1904x647, ip=192.168.168.107)\n", 
            "2021-07-23 16:33:38,342 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 16:33:39,348 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 16:33:40,355 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 16:33:40,415 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 16:33:43,440 [cuckoo.core.guest] INFO: Guest is running Cuckoo Agent 0.10 (id=Ubuntu1904x647, ip=192.168.168.107)\n", 
            "2021-07-23 16:33:43,455 [cuckoo.core.guest] DEBUG: Uploading analyzer to guest (id=Ubuntu1904x647, ip=192.168.168.107, monitor=latest, size=70098)\n", 
            "2021-07-23 16:33:44,661 [cuckoo.core.resultserver] DEBUG: Task #2325863: live log analysis.log initialized.\n", 
            "2021-07-23 16:33:49,726 [cuckoo.core.resultserver] DEBUG: Task #2325863: File upload for 'shots/0001.jpg'\n", 
            "2021-07-23 16:33:49,732 [cuckoo.core.resultserver] DEBUG: Task #2325863 uploaded file length: 171490\n", 
            "2021-07-23 16:33:58,587 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: analysis #2325863 still processing\n", 
            "2021-07-23 16:34:11,812 [cuckoo.core.resultserver] DEBUG: Task #2325863: File upload for 'logs/all.stap'\n", 
            "2021-07-23 16:34:11,814 [cuckoo.core.resultserver] DEBUG: Task #2325863 uploaded file length: 890\n", 
            "2021-07-23 16:34:13,681 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: analysis #2325863 still processing\n", 
            "2021-07-23 16:34:25,729 [cuckoo.core.guest] INFO: Ubuntu1904x647: end of analysis reached!\n", 
            "2021-07-23 16:34:25,737 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Redsocks\n", 
            "2021-07-23 16:34:25,795 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Sniffer\n", 
            "2021-07-23 16:34:36,808 [cuckoo.machinery.virtualbox] INFO: Successfully generated memory dump for virtual machine with label Ubuntu1904x647 to path /srv/cuckoo/cwd/storage/analyses/2325863/memory.dmp\n", 
            "2021-07-23 16:34:36,810 [cuckoo.machinery.virtualbox] DEBUG: Stopping vm Ubuntu1904x647\n", 
            "2021-07-23 16:34:40,569 [cuckoo.core.resultserver] DEBUG: Stopped tracking machine 192.168.168.107 for task #2325863\n", 
            "2021-07-23 16:34:40,569 [cuckoo.core.resultserver] DEBUG: Cancel <Context for LOG> for task 2325863\n", 
            "2021-07-23 16:34:40,742 [cuckoo.core.scheduler] DEBUG: Released database task #2325863\n", 
            "2021-07-23 16:34:40,827 [cuckoo.core.scheduler] INFO: Task #2325863: analysis procedure completed\n"
        ]
    }, 
    "strings": [
        "/lib/ld-linux.so.2", 
        "libc.so.6", 
        "_IO_stdin_used", 
        "strcpy", 
        "sprintf", 
        "setlocale", 
        "strncmp", 
        "strrchr", 
        "perror", 
        "stpncpy", 
        "strncpy", 
        "unlink", 
        "realloc", 
        "_libc_intl_domainname", 
        "__dcgettext", 
        "strdup", 
        "strtol", 
        "strlen", 
        "__errno_location", 
        "stdout", 
        "memcpy", 
        "fclose", 
        "malloc", 
        "strcat", 
        "__xstat64", 
        "__ctype_b_loc", 
        "stderr", 
        "execvp", 
        "fwrite", 
        "textdomain", 
        "waitpid", 
        "fprintf", 
        "__stpcpy", 
        "fdopen", 
        "__ctype_toupper_loc", 
        "__cxa_finalize", 
        "access", 
        "strcmp", 
        "__libc_start_main", 
        "__stack_chk_fail", 
        "GLIBC_2.2", 
        "GLIBC_2.1.3", 
        "GLIBC_2.4", 
        "GLIBC_2.1", 
        "GLIBC_2.0", 
        "GLIBC_2.3", 
        "_ITM_deregisterTMCloneTable", 
        "__gmon_start__", 
        "_ITM_registerTMCloneTable", 
        "T$,tdWW", 
        "D$8_XUj%", 
        "L$ QVP", 
        "D$4PPU", 
        "t$8QRP", 
        "usage: %s infile", 
        "options:", 
        "generate XDR routines", 
        "ANSI C mode", 
        "generate header file", 
        "generate MT-safe code", 
        "--help", 
        "give this help list", 
        "waitpid", 
        "illegal nettype: `%s'", 
        "rpcgen: too many defines", 
        "<stdin>", 
        "execvp", 
        "%s: unable to open %s: %m", 
        "<stdout>", 
        "_svc.c", 
        "_clnt.c", 
        "_xdr.c", 
        "_server.c", 
        "_client.c", 
        "_server", 
        "_client", 
        "Makefile.", 
        "# Parameters", 
        "CLIENT = %s", 
        "SERVER = %s", 
        "SOURCES.x = %s", 
        "TARGETS_SVC.c = %s %s %s ", 
        "TARGETS_CLNT.c = %s %s %s ", 
        "TARGETS = %s %s %s %s %s %s", 
        "# Compiler flags ", 
        "RPCGENFLAGS = ", 
        "# Targets ", 
        "all : $(CLIENT) $(SERVER)", 
        "$(TARGETS) : $(SOURCES.x) ", 
        "$(CLIENT) : $(OBJECTS_CLNT) ", 
        "$(SERVER) : $(OBJECTS_SVC) ", 
        "u_long", 
        "u_short", 
        "-DRPC_XDR", 
        "#include \"%s\"", 
        "#include <rpc/rpc.h>", 
        "-DRPC_HDR", 
        "_H_RPCGEN", 
        "#ifndef _%s", 
        "#define _%s", 
        "#include <rpc/rpc.h>", 
        "#include <pthread.h>", 
        "#ifdef __cplusplus", 
        "extern \"C\" {", 
        "#endif", 
        "/* the xdr functions */", 
        "#endif", 
        "#else /* K&R C */", 
        "#endif /* K&R C */", 
        "#endif /* !_%s */", 
        "-DRPC_CLNT", 
        "-DRPC_SVC", 
        "#include <stdio.h>", 
        "#include <stdlib.h>", 
        "#include <rpc/pmap_clnt.h>", 
        "#include <string.h>", 
        "#include <signal.h>", 
        "#include <sys/types.h>", 
        "#include <memory.h>", 
        "#include <sys/socket.h>", 
        "#include <netinet/in.h>", 
        "#include <netconfig.h>", 
        "#include <syslog.h>", 
        "-DRPC_TBL", 
        "-DRPC_SERVER", 
        "-DRPC_CLIENT", 
        "--help", 
        "--version", 
        "rpcgen %s%s", 
        "_tbl.i", 
        "netpath", 
        "visible", 
        "circuit_v", 
        "datagram_v", 
        "circuit_n", 
        "datagram_n", 
        "rpcgen", 
        "/lib/cpp", 
        "%s [-abkCLNTM][-Dname[=value]] [-i size] [-I [-K seconds]] [-Y path] infile", 
        "%s [-c | -h | -l | -m | -t | -Sc | -Ss | -Sm] [-o outfile] [infile]", 
        "%s [-s nettype]* [-o outfile] [infile]", 
        "%s [-n netid]* [-o outfile] [infile]", 
        "generate all files, including samples", 
        "backward compatibility mode (generates code for SunOS 4.1)", 
        "-Dname[=value]", 
        "define a symbol (same as #define)", 
        "-i size", 
        "size at which to start generating inline code", 
        "generate code for inetd support in server (for SunOS 4.1)", 
        "-K seconds", 
        "server exits after K seconds of inactivity", 
        "generate client side stubs", 
        "server errors will be printed to syslog", 
        "generate server side stubs", 
        "-n netid", 
        "generate server code that supports named netid", 
        "supports multiple arguments and call-by-value", 
        "-o outfile", 
        "name of the output file", 
        "-s nettype", 
        "generate server code that supports named nettype", 
        "generate sample client code that uses remote procedures", 
        "generate sample server code that defines remote procedures", 
        "generate makefile template ", 
        "generate RPC dispatch table", 
        "generate code to support RPC dispatch tables", 
        "-Y path", 
        "directory name to find C preprocessor (cpp)", 
        "SysVr4 compatibility mode", 
        "--version", 
        "print program version", 
        "For bug reporting instructions, please see:", 
        "<https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs>", 
        " * Please do not edit this file.", 
        " * It was generated using rpcgen.", 
        "%s: C preprocessor failed with signal %d", 
        "%s: C preprocessor failed with exit code %d", 
        "cannot find C preprocessor: %s", 
        "file `%s' already exists and may be overwritten", 
        "%s: output would overwrite %s", 
        "%s: while writing output %s: %m", 
        "# This is a template Makefile generated by rpcgen", 
        "SOURCES_CLNT.c = ", 
        "SOURCES_CLNT.h = ", 
        "SOURCES_SVC.c = ", 
        "SOURCES_SVC.h = ", 
        "OBJECTS_CLNT = $(SOURCES_CLNT.c:%%.c=%%.o) $(TARGETS_CLNT.c:%%.c=%%.o)", 
        "OBJECTS_SVC = $(SOURCES_SVC.c:%%.c=%%.o) $(TARGETS_SVC.c:%%.c=%%.o)", 
        "CPPFLAGS += -D_REENTRANT", 
        "CFLAGS += -g ", 
        "LDLIBS += -lnsl -lpthread ", 
        "CFLAGS += -g ", 
        "LDLIBS += -lnsl", 
        "rpcgen $(RPCGENFLAGS) $(SOURCES.x)", 
        "$(OBJECTS_CLNT) : $(SOURCES_CLNT.c) $(SOURCES_CLNT.h) $(TARGETS_CLNT.c) ", 
        "$(OBJECTS_SVC) : $(SOURCES_SVC.c) $(SOURCES_SVC.h) $(TARGETS_SVC.c) ", 
        "$(LINK.c) -o $(CLIENT) $(OBJECTS_CLNT) $(LDLIBS) ", 
        "$(LINK.c) -o $(SERVER) $(OBJECTS_SVC) $(LDLIBS)", 
        "clean:", 
        " $(RM) core $(TARGETS) $(OBJECTS_CLNT) $(OBJECTS_SVC) $(CLIENT) $(SERVER)", 
        "#if defined(__STDC__) || defined(__cplusplus)", 
        "#include <memory.h> /* for memset */", 
        "#include <sys/ioctl.h> /* ioctl, TIOCNOTTY */", 
        "#include <sys/types.h> /* open */", 
        "#include <sys/stat.h> /* open */", 
        "#include <fcntl.h> /* open */", 
        "#include <unistd.h> /* getdtablesize */", 
        "#include <sys/resource.h> /* rlimit */", 
        "#ifndef SIG_PF", 
        "#define SIG_PF void(*)(int)", 
        "#endif", 
        "#define _RPCSVC_CLOSEDOWN %s", 
        "Cannot specify more than one input file!", 
        "(Ubuntu GLIBC 2.27-3ubuntu1.2) ", 
        "Cannot use netid flag with inetd flag!", 
        "Cannot use netid flag without TIRPC!", 
        "Cannot use table flags with newstyle!", 
        "\"infile\" is required for template generation flags.", 
        "Cannot have more than one file generation flag!", 
        "extern int ", 
        "_freeresult ();", 
        "extern bool_t xdr_%s ();", 
        "bool_t ", 
        "enum clnt_stat ", 
        "bool_t", 
        "struct ", 
        "char *%s", 
        "opaque", 
        "%s%s %s", 
        "%s%s %s[%s]", 
        "%s%s *%s", 
        "struct {", 
        "u_int %s_len;", 
        "%s%s *%s_val;", 
        "struct %s {", 
        "typedef struct %s %s;", 
        "#define %s %s", 
        "extern %s_%s_nproc;", 
        "extern  ", 
        "CLIENT *", 
        "struct svc_req *", 
        "bool_t %s;", 
        "%s %s;", 
        "union {", 
        "} %s_u;", 
        "enum %s {", 
        " = %s + %d", 
        "typedef enum %s %s;", 
        "typedef ", 
        "_freeresult (SVCXPRT *, xdrproc_t, caddr_t);", 
        "extern  bool_t xdr_%s (XDR *, %s%s);", 
        "extern struct rpcgen_table %s_%s_table[];", 
        "return TRUE;", 
        "bool_t", 
        "xdr_%s (", 
        "XDR *xdrs, ", 
        "xdr_%s (xdrs, objp)", 
        "XDR *xdrs;", 
        " if (!xdr_%s (xdrs", 
        " return FALSE;", 
        "sizeof (", 
        "%s), (xdrproc_t) xdr_%s", 
        "pointer", 
        "(char **)", 
        "vector", 
        "(char *)", 
        "&objp->%s", 
        "U_LONG", 
        "IXDR_PUT_", 
        "objp->%s = IXDR_GET_", 
        "*genp++ = IXDR_GET_", 
        "malloc failed", 
        "%s(buf, objp->%s);", 
        "%s(buf, *genp++);", 
        "%s(buf);", 
        "register %s *genp;", 
        "for (i = 0, genp = objp->%s;", 
        "i < %s; ++i) {", 
        "register int32_t *buf;", 
        "switch (objp->%s) {", 
        "case %s:", 
        "&objp->%s_u.%s", 
        "break;", 
        "default:", 
        "return FALSE;", 
        "(enum_t *) objp", 
        "int i;", 
        " %s %s * %d", 
        " %s%s ", 
        "Fatal error : no memory ", 
        "if (buf == NULL) {", 
        " return TRUE;", 
        "} else {", 
        "sizeof (bool_t), (xdrproc_t) xdr_bool", 
        "%s.%s_val, (u_int *) %s.%s_len", 
        "&%s->%s_val, (u_int *) &%s->%s_len", 
        "if (xdrs->x_op == XDR_ENCODE) {", 
        "return TRUE;", 
        "} else if (xdrs->x_op == XDR_DECODE) {", 
        "buf = XDR_INLINE (xdrs, (%s) * BYTES_PER_XDR_UNIT);", 
        "buf = XDR_INLINE (xdrs, (%d + (%s)) * BYTES_PER_XDR_UNIT);", 
        "buf = XDR_INLINE (xdrs, %d * BYTES_PER_XDR_UNIT);", 
        "buf = XDR_INLINE (xdrs, (%s) * BYTES_PER_XDR_UNIT);", 
        "buf = XDR_INLINE (xdrs, (%d + %s)* BYTES_PER_XDR_UNIT);", 
        "buf = XDR_INLINE (xdrs, %d * BYTES_PER_XDR_UNIT);", 
        "u_char", 
        "u_quad_t", 
        "expected type specifier", 
        "array declaration expected", 
        "illegal result type", 
        "only one argument is allowed", 
        "definition keyword expected", 
        "destroy", 
        "getpos", 
        "inline", 
        "reference", 
        "setpos", 
        "sizeof", 
        "voids allowed only inside union and program definitions with one argument", 
        "opaque -- illegal argument type", 
        "pointer to string not allowed in program arguments", 
        "arrays cannot be declared as arguments to procedures -- use typedef", 
        "illegal (reserved) name :'%s' in type definition", 
        "no array-of-pointer declarations -- use typedef", 
        "variable-length array declaration expected", 
        "illegal use of void in program definition", 
        "preprocessor error", 
        "unterminated string constant", 
        "empty char string", 
        "illegal character in file: ", 
        "switch", 
        "default", 
        "struct", 
        "typedef", 
        "unsigned", 
        "double", 
        "program", 
        "??????", 
        "constant or identifier expected", 
        "wrapstring", 
        "char *", 
        "%s_%s_svc", 
        "%s, line %d: ", 
        "too many files!", 
        "expected '%s'", 
        "expected '%s' or '%s'", 
        "expected '%s', '%s' or '%s'", 
        "failed in malloc", 
        "argument", 
        "%s_%s_%s", 
        "identifier", 
        "%spmap_unset (%s, %s);", 
        "%s_msgout (\"%s\");", 
        "%sexit (0);", 
        "%s_rpcsvcstate = _SERVED;", 
        "%sreturn;", 
        "_xdr_%s = xdr_%s;", 
        "#ifndef RPC_SVC_FG", 
        "%sint size;", 
        "%sstruct rlimit rl;", 
        "%sint pid, i;", 
        "%spid = fork();", 
        "%sif (pid < 0) {", 
        "perror(\"cannot fork\");", 
        "exit(1);", 
        "%sif (pid)", 
        "exit(0);", 
        "%srl.rlim_max = 0;", 
        "%ssize = getdtablesize();", 
        "%sfor (i = 0; i < size; i++)", 
        "(void) close(i);", 
        "%s(void) dup2(i, 1);", 
        "%s(void) dup2(i, 2);", 
        "%ssetsid();", 
        "%si = open(\"/dev/tty\", 2);", 
        "%sif (i >= 0) {", 
        "if (nconf == NULL) {", 
        "cannot find %s netid.", 
        "exit (1);", 
        "if (%s == NULL) {", 
        "cannot create %s service.", 
        "if (!svc_reg (%s, %s, %s, ", 
        ", nconf)) {", 
        "freenetconfigent (nconf);", 
        "if (!svc_create (", 
        ", %s, %s, \"%s\")) {", 
        "(SIG_PF)", 
        "(void(*)())", 
        "if (_rpcpmstart) {", 
        "svc_run ();", 
        " *argp, struct svc_req *%s)", 
        " (argp, %s, %s)", 
        " (argp, %s)", 
        "%s *argp;", 
        "struct svc_req *%s;", 
        "return (", 
        "*argp, ", 
        "argp->%s, ", 
        "(struct svc_req *%s, ", 
        "register SVCXPRT *%s)", 
        "(%s, %s)", 
        "register SVCXPRT *%s;", 
        "int fill;", 
        "char *%s;", 
        "xdrproc_t _xdr_%s, _xdr_%s;", 
        "bool_t (*%s)();", 
        "char *(*%s)();", 
        "_rpcsvcstate = _SERVING;", 
        "switch (%s->rq_proc) {", 
        "%s = (bool_t (*)()) ", 
        "%s = (char *(*)()) ", 
        "break;", 
        "noproc", 
        "svcerr_%s (%s);", 
        "getargs", 
        "decode", 
        "%s = (*%s)(&%s, %s);", 
        "systemerr", 
        "freeargs", 
        "case NULLPROC:", 
        "static", 
        "void _msgout (msg)", 
        "char *msg;", 
        "void _msgout (char* msg)", 
        "#ifdef RPC_SVC_FG", 
        "if (_rpcpmstart)", 
        "static void", 
        "closedown (int sig)", 
        "closedown (sig)", 
        "int sig;", 
        "extern fd_set svc_fdset;", 
        "static int size;", 
        "int i, openfd;", 
        "struct t_info tinfo;", 
        "exit (0);", 
        "if (size == 0) {", 
        "struct rlimit rl;", 
        "rl.rlim_max = 0;", 
        "return;", 
        "size = getdtablesize();", 
        "openfd++;", 
        "if (openfd <= 1)", 
        "_rpcsvcstate = _IDLE;", 
        "alarm (_RPCSVC_CLOSEDOWN);", 
        "extern", 
        "%s int _rpcpmstart;", 
        "%s int _rpcfdtype;", 
        "#define", 
        "_IDLE 0", 
        "#define", 
        "_SERVED 1", 
        "#define", 
        "_SERVING 2", 
        "mutex_t _svcstate_lock;", 
        "main (argc, argv)", 
        "int argc;", 
        "char **argv;", 
        "int sock;", 
        "int proto;", 
        "struct sockaddr_in saddr;", 
        "int asize = sizeof (saddr);", 
        "int ssize = sizeof (int);", 
        "exit (1);", 
        "sock = 0;", 
        "_rpcpmstart = 1;", 
        "proto = 0;", 
        "sock = RPC_ANYSOCK;", 
        "pid_t pid;", 
        "char mname[FMNAMESZ + 1];", 
        " !strcmp(mname, \"timod\"))) {", 
        "char *netid;", 
        "SVCXPRT *%s;", 
        "int pmclose;", 
        "exit(1);", 
        "if (nconf)", 
        "freenetconfigent(nconf);", 
        "if (!svc_reg(%s, %s, %s, ", 
        ", 0)) {", 
        "unable to register (%s, %s).", 
        "if (pmclose) {", 
        "svc_run();", 
        "/* NOTREACHED */", 
        "else {", 
        "static", 
        "RPC_ANYSOCK", 
        "%s = svc%s_create(%s", 
        ", 0, 0", 
        "exit(1);", 
        "if (!_rpcpmstart)", 
        "proto = IPPROTO_%s;", 
        ", proto)) {", 
        ", IPPROTO_%s)) {", 
        "SOCK_STREAM", 
        "SOCK_DGRAM", 
        "%sopenlog(\"%s\", LOG_PID, LOG_DAEMON);", 
        "%ssyslog (LOG_ERR, \"%%s\", \"%s\");", 
        "%sfprintf (stderr, \"%%s\", \"%s\");", 
        "%smutex_lock(&_svcstate_lock);", 
        "%smutex_unlock(&_svcstate_lock);", 
        "_xdr_%s = (xdrproc_t) xdr_%s;", 
        "%sgetrlimit(RLIMIT_NOFILE, &rl);", 
        "%sif ((size = rl.rlim_max) == 0)", 
        "%si = open(\"/dev/console\", 2);", 
        "(void) ioctl(i, TIOCNOTTY, (char *)NULL);", 
        "nconf = getnetconfigent (\"%s\");", 
        "%s = svc_tli_create (RPC_ANYFD, nconf, 0, 0, 0);", 
        "(void) rpcb_unset (%s, %s, nconf);", 
        "unable to register (%s, %s, %s).", 
        "unable to create (%s, %s) for %s.", 
        "if (%s == (SVCXPRT *)NULL) {", 
        "(void) signal (SIGALRM, %s closedown);", 
        "(void) alarm (_RPCSVC_CLOSEDOWN);", 
        " *argp, void *%s, struct svc_req *%s)", 
        "bool_t (*%s)(char *, void *, struct svc_req *);", 
        "char *(*%s)(char *, struct svc_req *);", 
        "bool_t (*_xdr_%s)(), (*_xdr_%s)();", 
        "mutex_lock(&_svcstate_lock);", 
        "mutex_unlock(&_svcstate_lock);", 
        "%s = (bool_t (*) (char *, void *,  struct svc_req *))", 
        "%s = (char *(*)(char *, struct svc_req *)) ", 
        "memset ((char *)&%s, 0, sizeof (%s));", 
        "if (!svc_%s (%s, (xdrproc_t) _xdr_%s, (caddr_t) &%s)) {", 
        "%s = (*%s)((char *)&%s, %s);", 
        "%s = (bool_t) (*%s)((char *)&%s, (void *)&%s, %s);", 
        "%s = (bool_t) (*%s)(&%s, &%s, %s);", 
        "if (%s > 0 && !svc_sendreply(%s, (xdrproc_t) _xdr_%s, (char *)&%s)) {", 
        "if (%s != NULL && !svc_sendreply(%s, (xdrproc_t) _xdr_%s, %s)) {", 
        "_freeresult (%s, _xdr_%s, (caddr_t) &%s))", 
        "(void) svc_sendreply (%s, (xdrproc_t) xdr_void, (char *)NULL);", 
        "syslog (LOG_ERR, \"%%s\", msg);", 
        "fprintf (stderr, \"%%s\\n\", msg);", 
        "syslog (LOG_ERR, \"%%s\", msg);", 
        "if (_rpcsvcstate == _IDLE) {", 
        "if (!t_getinfo(0, &tinfo) && (tinfo.servtype == T_CLTS))", 
        "if (_rpcfdtype == SOCK_DGRAM)", 
        "getrlimit(RLIMIT_NOFILE, &rl);", 
        "if ((size = rl.rlim_max) == 0) {", 
        "mutex_unlock(&_svcstate_lock);", 
        "for (i = 0, openfd = 0; i < size && openfd < 2; i++)", 
        "if (FD_ISSET(i, &svc_fdset))", 
        "if (_rpcsvcstate == _SERVED)", 
        "(void) signal(SIGALRM, %s closedown);", 
        "/* Started by a port monitor ? */", 
        "/* Whether Stream or Datagram ? */", 
        " /* States a server can be in wrt request */", 
        "static int _rpcsvcstate = _IDLE;", 
        " /* Set when a request is serviced */", 
        "/* Mutex lock for variable_rpcsvcstate */", 
        "main (int argc, char **argv)", 
        "if (getsockname (0, (struct sockaddr *)&saddr, &asize) == 0) {", 
        "if (saddr.sin_family != AF_INET)", 
        "if (getsockopt (0, SOL_SOCKET, SO_TYPE,", 
        "(char *)&_rpcfdtype, &ssize) == -1)", 
        "struct netconfig *nconf = NULL;", 
        "mutex_init (&_svcstate_lock, USYNC_THREAD, NULL);", 
        "if (!ioctl(0, I_LOOK, mname) &&", 
        "(!strcmp(mname, \"sockmod\") ||", 
        "struct netconfig *nconf = NULL;", 
        "if ((netid = getenv(\"NLSPROVIDER\")) == NULL) {", 
        "} else if ((nconf = getnetconfigent(netid)) == NULL) {", 
        "if (strcmp(mname, \"sockmod\") == 0) {", 
        "if (ioctl(0, I_POP, 0) || ioctl(0, I_PUSH, \"timod\")) {", 
        "pmclose = (t_getstate(0) != T_DATAXFER);", 
        "if ((%s = svc_tli_create(0, nconf, NULL, 0, 0)) == NULL) {", 
        "(void) signal(SIGALRM, %s closedown);", 
        "(void) alarm(_RPCSVC_CLOSEDOWN);", 
        "if (!svc_register(%s, %s, %s, ", 
        "if ((_rpcfdtype == 0) || (_rpcfdtype == %s)) {", 
        "result", 
        "argument", 
        "transp", 
        "*%s, %s%s)", 
        "*argp, %s%s)", 
        "(%s%s)", 
        "enum clnt_stat ", 
        "static ", 
        " return ", 
        "TIMEOUT));", 
        "arg.%s = %s;", 
        "return ", 
        "TIMEOUT));", 
        "return (NULL);", 
        "return ((void *)%s%s);", 
        "return (%s%s);", 
        "/* Default timeout can be changed using clnt_control() */", 
        "static struct timeval TIMEOUT = { %d, 0 };", 
        "memset((char *)%s%s, 0, sizeof(%s));", 
        "(clnt_call (clnt, %s, (xdrproc_t) xdr_void, ", 
        "(caddr_t) NULL,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "TIMEOUT) != RPC_SUCCESS) {", 
        "(clnt_call (clnt, %s, (xdrproc_t) xdr_%s", 
        ", (caddr_t) &arg,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "if (clnt_call (clnt, %s,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "TIMEOUT) != RPC_SUCCESS) {", 
        "return (clnt_call(clnt, %s,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "(xdrproc_t) xdr_%s, (caddr_t) %s%s,", 
        "TIMEOUT));", 
        "clnt_res", 
        "xdr_%s,", 
        "sizeof ( ", 
        "(char *(*)())RPCGEN_ACTION(", 
        " * WARNING: table out of order", 
        "WARNING %s table is out of order", 
        "int %s_nproc =", 
        "sizeof(%s_table)/sizeof(%s_table[0]);", 
        "(char *(*)())0,", 
        "(xdrproc_t) xdr_void,", 
        "(xdrproc_t) xdr_void,", 
        "struct rpcgen_table %s_table[] = {", 
        "result", 
        "bool_t retval;", 
        "return &result;", 
        "return (void *) &result;", 
        "return retval;", 
        "SVCXPRT *transp;", 
        "xdrproc_t xdr_result;", 
        "caddr_t result;", 
        "return 1;", 
        "(char *host)", 
        "(host)", 
        "char *host;", 
        "CLIENT *clnt;", 
        "enum clnt_stat retval_%d;", 
        " *result_%d;", 
        "#ifndef", 
        "if (clnt == NULL) {", 
        "clnt_pcreateerror (host);", 
        "exit (1);", 
        "#endif", 
        "/* DEBUG */", 
        "retval_%d = ", 
        "result_%d = ", 
        "(void*)", 
        "_arg, &result_%d, clnt);", 
        "_arg, clnt);", 
        "(&result_%d, clnt);", 
        "&result_%d, ", 
        "if (result_%d == (", 
        "*) NULL) {", 
        "clnt_destroy (clnt);", 
        "#endif", 
        " /* DEBUG */", 
        "char *host;", 
        "if (argc < 2) {", 
        "exit (1);", 
        "host = argv[1];", 
        "exit (0);", 
        " * insert server code here", 
        "_freeresult (SVCXPRT *transp, xdrproc_t xdr_result, caddr_t result)", 
        "_freeresult (transp, xdr_result, result)", 
        "xdr_free (xdr_result, result);", 
        " * Insert additional freeing code here, if needed", 
        "clnt = clnt_create (host, %s, %s, \"%s\");", 
        "if (retval_%d != RPC_SUCCESS) {", 
        "clnt_perror (clnt, \"call failed\");", 
        " * This is sample code generated by rpcgen.", 
        " * These are only templates and you can use them", 
        " * as a guideline for developing your own functions.", 
        "main (int argc, char *argv[])", 
        "main (argc, argv)", 
        "int argc;", 
        "char *argv[];", 
        "printf (\"usage: %%s server_host\\n\", argv[0]);", 
        "struct rpcgen_table {", 
        "*(*proc)();", 
        "xdrproc_t", 
        "xdr_arg;", 
        "unsigned", 
        "len_arg;", 
        "xdrproc_t", 
        "xdr_res;", 
        "unsigned", 
        "len_res;", 
        "retval", 
        "2f78e620a0f71ff376d680ffc676871719c348.debug", 
        ".shstrtab", 
        ".interp", 
        ".note.ABI-tag", 
        ".note.gnu.build-id", 
        ".gnu.hash", 
        ".dynsym", 
        ".dynstr", 
        ".gnu.version", 
        ".gnu.version_r", 
        ".rel.dyn", 
        ".rel.plt", 
        ".plt.got", 
        ".rodata", 
        ".eh_frame_hdr", 
        ".eh_frame", 
        ".init_array", 
        ".fini_array", 
        ".data.rel.ro", 
        ".dynamic", 
        ".gnu_debuglink"
    ], 
    "metadata": {
        "output": {
            "pcap": {
                "basename": "dump.pcap", 
                "sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea", 
                "dirname": ""
            }
        }
    }
}