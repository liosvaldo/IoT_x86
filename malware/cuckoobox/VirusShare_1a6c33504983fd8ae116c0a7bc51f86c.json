{
    "info": {
        "added": 1626981287.268407, 
        "started": 1627068729.851446, 
        "duration": 604, 
        "ended": 1627069334.116492, 
        "owner": null, 
        "score": 0.0, 
        "id": 2326142, 
        "category": "file", 
        "git": {
            "head": "", 
            "fetch_head": ""
        }, 
        "monitor": null, 
        "package": "elf", 
        "route": "internet", 
        "custom": null, 
        "machine": {
            "status": "stopped", 
            "name": "Ubuntu1904x647", 
            "label": "Ubuntu1904x647", 
            "platform": "linux", 
            "manager": "VirtualBox", 
            "started_on": "2021-07-23 19:32:10", 
            "shutdown_on": "2021-07-23 19:42:13"
        }, 
        "platform": "linux", 
        "version": "2.0.7", 
        "options": "procmemdump=yes,route=internet"
    }, 
    "signatures": [], 
    "target": {
        "category": "file", 
        "file": {
            "mimetype": "application/x-executable", 
            "yara": [], 
            "sha1": "9f2fd2689469da381d199e834924a9fce8f80683", 
            "name": "VirusShare_1a6c33504983fd8ae116c0a7bc51f86c", 
            "type": "ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.16, with debug_info, not stripped", 
            "sha256": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d", 
            "urls": [], 
            "crc32": "9A9BD503", 
            "path": "/srv/cuckoo/cwd/storage/binaries/f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d", 
            "ssdeep": null, 
            "size": 379082, 
            "sha512": "a5a2c19692e23fe939e7f4db37a560eb08eadda84a65e94cf0e2ca0480ecb3a2ebae3c8d4b2186b7fe971b7377d7fd41e42b54e9b2a5a3986946e96464a4c8d1", 
            "md5": "1a6c33504983fd8ae116c0a7bc51f86c"
        }, 
        "custom": null
    }, 
    "irma": {
        "status": 0, 
        "probes_finished": 16, 
        "scan_id": "2d4fe271-a1de-4c5e-81f9-1b3124c9921c", 
        "parent_file_sha256": null, 
        "name": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d", 
        "scan_date": 1627077641, 
        "other_results": [], 
        "submitter": "cli", 
        "probes_total": 16, 
        "file_infos": {
            "mimetype": "ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)", 
            "sha1": "9f2fd2689469da381d199e834924a9fce8f80683", 
            "tags": [], 
            "timestamp_first_scan": 1627077640.75, 
            "timestamp_last_scan": 1627077651.72, 
            "sha256": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d", 
            "md5": "1a6c33504983fd8ae116c0a7bc51f86c", 
            "size": 379082
        }, 
        "probe_results": {
            "antivirus": {
                "Avast Core Security (Linux)": {
                    "status": 0, 
                    "duration": 0.01, 
                    "version": "3.0.3", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "F-Secure Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.04, 
                    "version": "11.10", 
                    "results": null, 
                    "virus_database_version": "2021-06-08_09"
                }, 
                "Windows Defender (Windows)": {
                    "status": 0, 
                    "duration": 0.05, 
                    "version": "1.1.18300.4", 
                    "results": null, 
                    "virus_database_version": "1.343.1173.0"
                }, 
                "Comodo Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 2.23, 
                    "version": "1.1.268025.1", 
                    "results": null, 
                    "virus_database_version": "2021-05-05"
                }, 
                "ESET NOD32 Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 4.19, 
                    "version": "4.0.96", 
                    "results": null, 
                    "virus_database_version": "6087dbf0-1e845 (2021-04-27)"
                }, 
                "GData (Windows)": {
                    "status": 0, 
                    "duration": 0.18, 
                    "version": "5.5.20197.1358", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Forticlient (Linux)": {
                    "status": 0, 
                    "duration": 3.02, 
                    "version": "unavailable", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Avira (Windows)": {
                    "status": 0, 
                    "duration": 4.09, 
                    "version": "8.3.62.226", 
                    "results": null, 
                    "virus_database_version": "8.18.36.236"
                }, 
                "Kaspersky (Windows)": {
                    "status": 0, 
                    "duration": 4.56, 
                    "version": "21.3", 
                    "results": null, 
                    "virus_database_version": "2021-07-21 19:18:00 (full)"
                }, 
                "McAfee CLI scanner (Linux)": {
                    "status": 0, 
                    "duration": 4.9, 
                    "version": "6.0.6.653", 
                    "results": null, 
                    "virus_database_version": "9966"
                }, 
                "Sophos Anti-Virus (Linux)": {
                    "status": 0, 
                    "duration": 9.66, 
                    "version": "5.74.0", 
                    "results": null, 
                    "virus_database_version": "5.83 (23 March 2021)"
                }, 
                "DrWeb Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.08, 
                    "version": "11.1.9.2103151924", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "ClamAV (Linux)": {
                    "status": 0, 
                    "duration": 0.04, 
                    "version": "0.103.2", 
                    "results": null, 
                    "virus_database_version": "26190"
                }, 
                "eScan Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 3.75, 
                    "version": "7.0.21", 
                    "results": null, 
                    "virus_database_version": "7.88854 (16/06/2021)"
                }, 
                "Emsisoft Commandline Scanner (Windows)": {
                    "status": 0, 
                    "duration": 0.23, 
                    "version": "2021.1.0.10606", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Bitdefender Antivirus Scanner (Linux)": {
                    "status": 0, 
                    "duration": 5.53, 
                    "version": "7.90123", 
                    "results": null, 
                    "virus_database_version": null
                }
            }
        }, 
        "path": "", 
        "result_id": "34e4a092-5059-4e16-b488-12d8cbcdf1a6", 
        "file_sha256": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d"
    }, 
    "suricata": {
        "tls": [], 
        "files": [], 
        "alerts": [], 
        "http": []
    }, 
    "virustotal": {
        "scans": {
            "Bkav": {
                "detected": false, 
                "version": "1.3.0.9899", 
                "result": null, 
                "normalized": [], 
                "update": "20210507"
            }, 
            "Lionic": {
                "detected": false, 
                "version": "4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "ClamAV": {
                "detected": false, 
                "version": "0.103.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "FireEye": {
                "detected": false, 
                "version": "32.44.1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "CAT-QuickHeal": {
                "detected": false, 
                "version": "14.00", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "McAfee": {
                "detected": false, 
                "version": "6.0.6.653", 
                "result": null, 
                "normalized": [], 
                "update": "20210504"
            }, 
            "Malwarebytes": {
                "detected": false, 
                "version": "4.2.2.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Zillya": {
                "detected": false, 
                "version": "2.0.0.4358", 
                "result": null, 
                "normalized": [], 
                "update": "20210507"
            }, 
            "Sangfor": {
                "detected": false, 
                "version": "2.9.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210416"
            }, 
            "K7AntiVirus": {
                "detected": false, 
                "version": "11.181.37123", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "K7GW": {
                "detected": false, 
                "version": "11.181.37125", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Arcabit": {
                "detected": false, 
                "version": "1.0.0.886", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Baidu": {
                "detected": false, 
                "version": "1.0.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20190318"
            }, 
            "Cyren": {
                "detected": false, 
                "version": "6.3.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Symantec": {
                "detected": false, 
                "version": "1.14.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "ESET-NOD32": {
                "detected": false, 
                "version": "23269", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "TrendMicro-HouseCall": {
                "detected": false, 
                "version": "10.0.0.1040", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Avast": {
                "detected": false, 
                "version": "21.1.5827.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Cynet": {
                "detected": false, 
                "version": "4.0.0.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Kaspersky": {
                "detected": false, 
                "version": "21.0.1.45", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "BitDefender": {
                "detected": false, 
                "version": "7.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "NANO-Antivirus": {
                "detected": false, 
                "version": "1.0.146.25279", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "SUPERAntiSpyware": {
                "detected": false, 
                "version": "5.6.0.1032", 
                "result": null, 
                "normalized": [], 
                "update": "20210507"
            }, 
            "MicroWorld-eScan": {
                "detected": false, 
                "version": "14.0.409.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Tencent": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Ad-Aware": {
                "detected": false, 
                "version": "3.0.21.179", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Emsisoft": {
                "detected": false, 
                "version": "2018.12.0.1641", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Comodo": {
                "detected": false, 
                "version": "33515", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "F-Secure": {
                "detected": false, 
                "version": "12.0.86.52", 
                "result": null, 
                "normalized": [], 
                "update": "20210331"
            }, 
            "DrWeb": {
                "detected": false, 
                "version": "7.0.49.9080", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "VIPRE": {
                "detected": false, 
                "version": "92442", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "TrendMicro": {
                "detected": false, 
                "version": "11.0.0.1006", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "McAfee-GW-Edition": {
                "detected": false, 
                "version": "v2019.1.2+3728", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "CMC": {
                "detected": false, 
                "version": "2.10.2019.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210506"
            }, 
            "Sophos": {
                "detected": false, 
                "version": "1.0.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Ikarus": {
                "detected": false, 
                "version": "0.1.5.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "Avast-Mobile": {
                "detected": false, 
                "version": "210510-00", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Jiangmin": {
                "detected": false, 
                "version": "16.0.100", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "Avira": {
                "detected": false, 
                "version": "8.3.3.12", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Antiy-AVL": {
                "detected": false, 
                "version": "3.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Kingsoft": {
                "detected": false, 
                "version": "2017.9.26.565", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Gridinsoft": {
                "detected": false, 
                "version": "1.0.39.131", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Microsoft": {
                "detected": false, 
                "version": "1.1.18100.6", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "ViRobot": {
                "detected": false, 
                "version": "2014.3.20.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "ZoneAlarm": {
                "detected": false, 
                "version": "1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "GData": {
                "detected": false, 
                "version": "A:25.29596B:27.22953", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "TACHYON": {
                "detected": false, 
                "version": "2021-05-10.02", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "AhnLab-V3": {
                "detected": false, 
                "version": "3.20.0.10177", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Acronis": {
                "detected": false, 
                "version": "1.1.1.81", 
                "result": null, 
                "normalized": [], 
                "update": "20210211"
            }, 
            "BitDefenderTheta": {
                "detected": false, 
                "version": "7.2.37796.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210504"
            }, 
            "ALYac": {
                "detected": false, 
                "version": "1.1.3.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "MAX": {
                "detected": false, 
                "version": "2019.9.16.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "VBA32": {
                "detected": false, 
                "version": "5.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210507"
            }, 
            "Zoner": {
                "detected": false, 
                "version": "0.0.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "Rising": {
                "detected": false, 
                "version": "25.0.0.26", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Yandex": {
                "detected": false, 
                "version": "5.5.2.24", 
                "result": null, 
                "normalized": [], 
                "update": "20210508"
            }, 
            "SentinelOne": {
                "detected": false, 
                "version": "5.0.0.20", 
                "result": null, 
                "normalized": [], 
                "update": "20210215"
            }, 
            "MaxSecure": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210508"
            }, 
            "Fortinet": {
                "detected": false, 
                "version": "6.2.142.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }, 
            "Panda": {
                "detected": false, 
                "version": "4.6.4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210509"
            }, 
            "Qihoo-360": {
                "detected": false, 
                "version": "1.0.0.1120", 
                "result": null, 
                "normalized": [], 
                "update": "20210510"
            }
        }, 
        "scan_id": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d-1620635936", 
        "sha1": "9f2fd2689469da381d199e834924a9fce8f80683", 
        "resource": "1a6c33504983fd8ae116c0a7bc51f86c", 
        "response_code": 1, 
        "scan_date": "2021-05-10 08:38:56", 
        "permalink": "https://www.virustotal.com/gui/file/f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d/detection/f-f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d-1620635936", 
        "summary": {
            "positives": 0, 
            "permalink": "https://www.virustotal.com/gui/file/f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d/detection/f-f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d-1620635936", 
            "scan_date": "2021-05-10 08:38:56"
        }, 
        "sha256": "f15f90e91c0b7bf3dc7c3255e1ef1c8699fe94e080780a775ae455f1dd3a593d", 
        "normalized": [], 
        "total": 61, 
        "positives": 0, 
        "verbose_msg": "Scan finished, information embedded", 
        "md5": "1a6c33504983fd8ae116c0a7bc51f86c"
    }, 
    "network": {
        "tls": [], 
        "udp": [], 
        "dns_servers": [], 
        "http": [], 
        "icmp": [], 
        "smtp": [], 
        "tcp": [], 
        "smtp_ex": [], 
        "geoinfo": {}, 
        "mitm": [], 
        "hosts": [], 
        "pcap_sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea", 
        "dns": [], 
        "http_ex": [], 
        "domains": [], 
        "dead_hosts": [], 
        "irc": [], 
        "https_ex": []
    }, 
    "resubmit": {
        "resubmit_ids": []
    }, 
    "snort": {
        "alerts": []
    }, 
    "behavior": {
        "generic": [
            {
                "process_path": null, 
                "process_name": "sh", 
                "pid": 2065, 
                "summary": {}, 
                "first_seen": 1626981300.57051, 
                "ppid": -1
            }
        ], 
        "processes": [
            {
                "calls": [
                    {
                        "status": "ENOENT", 
                        "process_name": "sh", 
                        "pid": 2065, 
                        "raw": "Thu Jul 22 19:15:00 2021.570510 sh@7f83c99b5957[2065] execve(\"/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f86c\", [\"/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f86c\"], [\"SUDO_GID=0\", \"MAIL=/var/mail/root\", \"USER=root\", \"HOME=/root\", \"SUDO_UID=0\", \"LOGNAME=root\", \"SYSTEMTAP_MODULE=stap_\", \"TERM=unknown\", \"SYSTEMTAP_VERBOSE=2\", \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\", \"DISPLAY=:0\", \"LANG=en_US.UTF-8\", \"XAUTHORITY=/root/.Xauthority\", \"SUDO_COMMAND=/usr/bin/staprun -vv -o stap.log /root/.cuckoo/stap_.ko -c sh -c /tmp/VirusShare_1a6c3) = -2 (ENOENT)\n", 
                        "api": "execve", 
                        "return_value": "-2", 
                        "category": "process", 
                        "instruction_pointer": "7f83c99b5957", 
                        "arguments": {
                            "p2": [
                                "SUDO_GID=0", 
                                "MAIL=/var/mail/root", 
                                "USER=root", 
                                "HOME=/root", 
                                "SUDO_UID=0", 
                                "LOGNAME=root", 
                                "SYSTEMTAP_MODULE=stap_", 
                                "TERM=unknown", 
                                "SYSTEMTAP_VERBOSE=2", 
                                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin", 
                                "DISPLAY=:0", 
                                "LANG=en_US.UTF-8", 
                                "XAUTHORITY=/root/.Xauthority", 
                                "\"SUDO_COMMAND=/usr/bin/staprun -vv -o stap.log /root/.cuckoo/stap_.ko -c sh -c /tmp/VirusShare_1a6c3"
                            ], 
                            "p0": "/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f86c", 
                            "p1": [
                                "/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f86c"
                            ]
                        }, 
                        "time": 1626981300.57051
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2065, 
                        "raw": "Thu Jul 22 19:15:00 2021.570751 sh@7f83c99e1024[2065] write(2, \"sh: 1: \", 7) = 7\n", 
                        "api": "write", 
                        "return_value": "7", 
                        "category": "process", 
                        "instruction_pointer": "7f83c99e1024", 
                        "arguments": {
                            "p2": "7", 
                            "p0": "2", 
                            "p1": "sh: 1: "
                        }, 
                        "time": 1626981300.570751
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2065, 
                        "raw": "Thu Jul 22 19:15:00 2021.570841 sh@7f83c99e1024[2065] write(2, \"/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f\"..., 59) = 59\n", 
                        "api": "write", 
                        "return_value": "59", 
                        "category": "process", 
                        "instruction_pointer": "7f83c99e1024", 
                        "arguments": {
                            "p2": "59", 
                            "p0": "2", 
                            "p1": "\"/tmp/VirusShare_1a6c33504983fd8ae116c0a7bc51f\"..."
                        }, 
                        "time": 1626981300.570841
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2065, 
                        "raw": "Thu Jul 22 19:15:00 2021.570893 sh@7f83c99e1024[2065] write(2, \"\\n\", 1) = 1\n", 
                        "api": "write", 
                        "return_value": "1", 
                        "category": "process", 
                        "instruction_pointer": "7f83c99e1024", 
                        "arguments": {
                            "p2": "1", 
                            "p0": "2", 
                            "p1": "\n"
                        }, 
                        "time": 1626981300.570893
                    }, 
                    {
                        "status": "", 
                        "process_name": "sh", 
                        "pid": 2065, 
                        "raw": "Thu Jul 22 19:15:00 2021.570971 sh@7f83c99b5926[2065] exit_group(127)\n", 
                        "api": "exit_group", 
                        "return_value": "", 
                        "category": "process", 
                        "instruction_pointer": "7f83c99b5926", 
                        "arguments": {
                            "p0": "127"
                        }, 
                        "time": 1626981300.570971
                    }
                ], 
                "pid": 2065, 
                "process_name": "sh", 
                "command_line": "", 
                "first_seen": 1626981300.57051, 
                "ppid": -1, 
                "type": "process"
            }
        ], 
        "processtree": [
            {
                "track": true, 
                "pid": 2065, 
                "process_name": "sh", 
                "command_line": "", 
                "first_seen": 1626981300.57051, 
                "ppid": -1, 
                "children": []
            }
        ]
    }, 
    "debug": {
        "action": [], 
        "dbgview": [], 
        "errors": [], 
        "log": [
            "2021-07-22 19:14:47,002 [root] DEBUG: Starting analyzer from: /tmp/tmpn4BayB\n", 
            "2021-07-22 19:14:47,004 [root] DEBUG: Storing results at: /tmp/rBbincM\n", 
            "2021-07-22 19:14:48,890 [modules.auxiliary.filecollector] INFO: FileCollector started v0.08\n", 
            "2021-07-22 19:14:49,392 [modules.auxiliary.human] INFO: Human started v0.02\n", 
            "2021-07-22 19:14:49,393 [modules.auxiliary.screenshots] INFO: Screenshots started v0.03\n", 
            "2021-07-22 19:15:00,558 [lib.core.packages] INFO: Process startup took 11.16 seconds\n", 
            "2021-07-22 19:15:00,568 [root] INFO: Added new process to list with pid: 2052\n", 
            "2021-07-22 19:15:12,584 [root] INFO: Process with pid 2052 has terminated\n", 
            "2021-07-22 19:15:12,584 [root] INFO: Process list is empty, terminating analysis.\n", 
            "2021-07-22 19:15:15,588 [lib.core.packages] INFO: Package requested stop\n", 
            "2021-07-22 19:15:15,589 [lib.core.packages] WARNING: Exception uploading log: [Errno 3] No such process\n", 
            "2021-07-22 19:17:04,125 [root] INFO: Terminating remaining processes before shutdown.\n", 
            "2021-07-22 19:17:04,126 [root] INFO: Analysis completed.\n"
        ], 
        "cuckoo": [
            "2021-07-23 19:32:10,380 [cuckoo.core.scheduler] INFO: Task #2326142: acquired machine Ubuntu1904x647 (label=Ubuntu1904x647)\n", 
            "2021-07-23 19:32:10,381 [cuckoo.core.resultserver] DEBUG: Now tracking machine 192.168.168.107 for task #2326142\n", 
            "2021-07-23 19:32:10,519 [cuckoo.auxiliary.sniffer] INFO: Started sniffer with PID 3947442 (interface=vboxnet0, host=192.168.168.107)\n", 
            "2021-07-23 19:32:10,681 [cuckoo.machinery.virtualbox] DEBUG: Starting vm Ubuntu1904x647\n", 
            "2021-07-23 19:32:11,049 [cuckoo.machinery.virtualbox] DEBUG: Restoring virtual machine Ubuntu1904x647 to Snapshot\n", 
            "2021-07-23 19:37:50,611 [cuckoo.core.guest] INFO: Starting analysis #2326142 on guest (id=Ubuntu1904x647, ip=192.168.168.107)\n", 
            "2021-07-23 19:37:51,621 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 19:37:52,629 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 19:37:53,636 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 19:37:54,649 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: not ready yet\n", 
            "2021-07-23 19:37:54,668 [cuckoo.core.guest] INFO: Guest is running Cuckoo Agent 0.10 (id=Ubuntu1904x647, ip=192.168.168.107)\n", 
            "2021-07-23 19:37:54,685 [cuckoo.core.guest] DEBUG: Uploading analyzer to guest (id=Ubuntu1904x647, ip=192.168.168.107, monitor=latest, size=70098)\n", 
            "2021-07-23 19:37:54,899 [cuckoo.core.resultserver] DEBUG: Task #2326142: live log analysis.log initialized.\n", 
            "2021-07-23 19:38:00,571 [cuckoo.core.resultserver] DEBUG: Task #2326142: File upload for 'shots/0001.jpg'\n", 
            "2021-07-23 19:38:00,643 [cuckoo.core.resultserver] DEBUG: Task #2326142 uploaded file length: 171490\n", 
            "2021-07-23 19:38:09,898 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: analysis #2326142 still processing\n", 
            "2021-07-23 19:38:23,537 [cuckoo.core.resultserver] DEBUG: Task #2326142: File upload for 'logs/all.stap'\n", 
            "2021-07-23 19:38:24,971 [cuckoo.core.guest] DEBUG: Ubuntu1904x647: analysis #2326142 still processing\n", 
            "2021-07-23 19:38:25,258 [cuckoo.core.resultserver] DEBUG: Task #2326142 uploaded file length: 939\n", 
            "2021-07-23 19:38:37,014 [cuckoo.core.guest] INFO: Ubuntu1904x647: end of analysis reached!\n", 
            "2021-07-23 19:38:37,024 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Redsocks\n", 
            "2021-07-23 19:38:37,091 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Sniffer\n", 
            "2021-07-23 19:38:48,893 [cuckoo.machinery.virtualbox] INFO: Successfully generated memory dump for virtual machine with label Ubuntu1904x647 to path /srv/cuckoo/cwd/storage/analyses/2326142/memory.dmp\n", 
            "2021-07-23 19:38:48,895 [cuckoo.machinery.virtualbox] DEBUG: Stopping vm Ubuntu1904x647\n", 
            "2021-07-23 19:42:13,748 [cuckoo.core.resultserver] DEBUG: Stopped tracking machine 192.168.168.107 for task #2326142\n", 
            "2021-07-23 19:42:13,910 [cuckoo.core.scheduler] DEBUG: Released database task #2326142\n", 
            "2021-07-23 19:42:14,020 [cuckoo.core.scheduler] INFO: Task #2326142: analysis procedure completed\n"
        ]
    }, 
    "strings": [
        "/lib/ld-linux.so.2", 
        "libstdc++.so.6", 
        "__gmon_start__", 
        "_Jv_RegisterClasses", 
        "_ZdlPv", 
        "__gxx_personality_v0", 
        "libm.so.6", 
        "libgcc_s.so.1", 
        "_Unwind_Resume", 
        "libc.so.6", 
        "_IO_stdin_used", 
        "strcasestr", 
        "socket", 
        "fflush", 
        "strcpy", 
        "sprintf", 
        "strncmp", 
        "inet_aton", 
        "__strdup", 
        "perror", 
        "inet_ntop", 
        "strncpy", 
        "signal", 
        "putchar", 
        "realloc", 
        "inet_pton", 
        "getnetbyname", 
        "strtol", 
        "isatty", 
        "calloc", 
        "strlen", 
        "getaddrinfo", 
        "memset", 
        "__errno_location", 
        "getsockopt", 
        "getopt", 
        "clearerr", 
        "longjmp", 
        "_setjmp", 
        "vsnprintf", 
        "stdout", 
        "gethostbyaddr", 
        "inet_addr", 
        "memcpy", 
        "fclose", 
        "__strtol_internal", 
        "setsockopt", 
        "malloc", 
        "strcasecmp", 
        "__ctype_b_loc", 
        "sscanf", 
        "recvfrom", 
        "optarg", 
        "getservbyname", 
        "stderr", 
        "gethostbyname", 
        "getuid", 
        "freeifaddrs", 
        "getifaddrs", 
        "fileno", 
        "fwrite", 
        "gettimeofday", 
        "geteuid", 
        "ether_hostton", 
        "localtime", 
        "strchr", 
        "fprintf", 
        "getsockname", 
        "sendto", 
        "gethostbyname2", 
        "freeaddrinfo", 
        "getprotobyname", 
        "__xstat", 
        "fopen64", 
        "_IO_getc", 
        "strcmp", 
        "recvmsg", 
        "strerror", 
        "__libc_start_main", 
        "ferror", 
        "random", 
        "__cxa_atexit", 
        "GCC_3.0", 
        "CXXABI_1.3", 
        "GLIBCXX_3.4", 
        "GLIBC_2.3", 
        "GLIBC_2.1", 
        "GLIBC_2.1.3", 
        "GLIBC_2.0", 
        "SVWRQP", 
        "SVWQhB~", 
        "SVWQhT~", 
        "t;CA9]", 
        "G<;B<u", 
        "GT;BTu", 
        "B<;BTt", 
        "ukPh*g", 
        "urPhEg", 
        "ugPh_g", 
        "C Pj@h\"h", 
        "t7<.tL", 
        "capture.cpp", 
        "%s:%d: Error: Out of memory", 
        "a:i:k:n:su:w:", 
        "Unknown option %c", 
        "pcap_lookupdev: %s", 
        "fopen user names file", 
        "%s:%d: Error: Could not open %s", 
        "fopen uris file", 
        "fopen auth data file", 
        "pcap_open_live: %s", 
        "pcap_compile:", 
        "pcap_setfilter:", 
        "pcap_dump_open: %s", 
        "%d calls captured", 
        "%d calls seen", 
        "%d calls were still open", 
        "%s:%d: Error: %s", 
        "___[%d-%02d-%02d %02d:%02d]___[%d.%d.%d.%d:%d->%d.%d.%d.%d:%d]___________________________________________________", 
        "-----------------------------", 
        "call-id", 
        "BYE %s SIP/%d.%d", 
        "Via: SIP/2.0/UDP %d.%d.%d.%d:%d;branch=z9hG4bK-c366246a-2791-4411-9304-9216c84a7ca1", 
        "Max-Forwards: 70", 
        "To: %s", 
        "From: %s", 
        "Call-Id: %s", 
        "CSeq: %d BYE", 
        "Contact: <%s>", 
        "Content-Length: 0", 
        "BYE %s SIP/%d.%d", 
        "Via: SIP/2.0/UDP %d.%d.%d.%d:%d;branch=z9hG4bK-c366246a-2791-4411-9304-9216c84a7ca2", 
        "Max-Forwards: 70", 
        "To: %s", 
        "From: %s", 
        "Call-Id: %s", 
        "CSeq: %d BYE", 
        "Contact: <%s>", 
        "Content-Length: 0", 
        "content-type", 
        "application/sdp", 
        "%s.%d.pcap", 
        "contact", 
        "authentication-info", 
        "authorization", 
        "proxy-authenticate", 
        "proxy-authorization", 
        "www-authenticate", 
        "c=%s %s %s", 
        "m=%s %s %s", 
        "o=%s %d %d %s %s %s", 
        "o=- 0 0 IN IP4 0.0.0.0", 
        "%ss=%s", 
        "contact", 
        "reply-to", 
        "record-route", 
        "%s: %s", 
        "%s %s SIP/%d.%d", 
        "SIP/%d.%d %d %s", 
        "Out of memory", 
        "127.0.0.1", 
        "Bad response version", 
        "Bad response status code", 
        "Bad response status message", 
        "Bad message", 
        "Bad request uri", 
        "Bad request protocol", 
        "Bad request version", 
        "Cookie", 
        "Aaahh!", 
        ": error: ", 
        "/dev/urandom", 
        "util.cpp", 
        "out of memory", 
        "%1x%05x%02x-%04x-%04x-%04x-%08x%04x", 
        "netlink_route socket open error", 
        "netlink_route socket bind error", 
        "netlink_route socket getsockname error", 
        "netlink_route recvmsg error", 
        "netlink_route socket close error", 
        "SIOCGIFHWADDR: %s", 
        "SIOCGIFINDEX: %s", 
        "pcap_stats: %s", 
        "malloc: %s", 
        "strdup: %s", 
        "socket: %s", 
        "close: %s", 
        "bind: %s", 
        "getsockopt: %s", 
        "setsockopt: %s", 
        "unknown arptype %d", 
        "SIOCGIFFLAGS: %s", 
        "atexit failed", 
        "SIOCSIFFLAGS: %s", 
        "SIOCGIFMTU: %s", 
        "recv: %s", 
        "send: %s", 
        "recvfrom: %s", 
        "SIOCGSTAMP: %s", 
        "Setting direction is not supported on SOCK_PACKET sockets", 
        "Can't restore interface flags (SIOCGIFFLAGS failed: %s).", 
        "Please adjust manually.", 
        "Hint: This can't happen with Linux >= 2.2.0.", 
        "Can't restore interface flags (SIOCSIFFLAGS failed: %s).", 
        "Please adjust manually.", 
        "Hint: This can't happen with Linux >= 2.2.0.", 
        "Promiscuous mode not supported on the \"any\" device", 
        "arptype %d not supported by libpcap - falling back to cooked socket", 
        "pcap_open_live: The \"any\" device isn't supported on 2.0[.x]-kernel systems", 
        "setfilter: No filter specified", 
        "Warning: Filter too complex for kernel", 
        "Warning: Kernel filter failed: %s", 
        "Sending packets isn't supported on the \"any\" device", 
        "Sending packets isn't supported in cooked mode", 
        "Pseudo-device that captures on all interfaces", 
        "Statistics aren't available from a pcap_open_dead pcap_t", 
        "Setting direction is not implemented on this platform", 
        "%s is not one of the DLTs supported by this device", 
        "DLT %d is not one of the DLTs supported by this device", 
        "RFC 2625 IP-over-Fibre Channel", 
        "802.11 plus BSD radio information header", 
        "802.11 plus AVS radio information header", 
        "PPP for pppd, with direction flag", 
        "Juniper Multi-Link Frame Relay", 
        "Ethernet with Endace ERF header", 
        "Packet-over-SONET with Endace ERF header", 
        "Juniper Encryption Services PIC", 
        "Controller Area Network (CAN) v. 2.0B", 
        "Arinc 653 Interpartition Communication", 
        "F_GETFL: %s", 
        "F_SETFL: %s", 
        "%s: %s", 
        "DLT_NULL", 
        "DLT_EN10MB", 
        "DLT_IEEE802", 
        "Token ring", 
        "DLT_ARCNET", 
        "DLT_SLIP", 
        "DLT_PPP", 
        "DLT_FDDI", 
        "DLT_ATM_RFC1483", 
        "RFC 1483 LLC-encapsulated ATM", 
        "DLT_RAW", 
        "Raw IP", 
        "DLT_SLIP_BSDOS", 
        "BSD/OS SLIP", 
        "DLT_PPP_BSDOS", 
        "BSD/OS PPP", 
        "DLT_ATM_CLIP", 
        "Linux Classical IP-over-ATM", 
        "DLT_PPP_SERIAL", 
        "PPP over serial", 
        "DLT_PPP_ETHER", 
        "DLT_C_HDLC", 
        "Cisco HDLC", 
        "DLT_IEEE802_11", 
        "802.11", 
        "DLT_FRELAY", 
        "DLT_LOOP", 
        "OpenBSD loopback", 
        "DLT_ENC", 
        "OpenBSD encapsulated IP", 
        "DLT_LINUX_SLL", 
        "Linux cooked", 
        "DLT_LTALK", 
        "Localtalk", 
        "DLT_PFLOG", 
        "OpenBSD pflog file", 
        "DLT_PRISM_HEADER", 
        "802.11 plus Prism header", 
        "DLT_IP_OVER_FC", 
        "DLT_SUNATM", 
        "Sun raw ATM", 
        "DLT_IEEE802_11_RADIO", 
        "DLT_APPLE_IP_OVER_IEEE1394", 
        "Apple IP-over-IEEE 1394", 
        "DLT_ARCNET_LINUX", 
        "Linux ARCNET", 
        "DLT_DOCSIS", 
        "DLT_LINUX_IRDA", 
        "Linux IrDA", 
        "DLT_LINUX_LAPD", 
        "Linux vISDN LAPD", 
        "DLT_IEEE802_11_RADIO_AVS", 
        "DLT_SYMANTEC_FIREWALL", 
        "Symantec Firewall", 
        "DLT_JUNIPER_ATM1", 
        "Juniper ATM1 PIC", 
        "DLT_JUNIPER_ATM2", 
        "Juniper ATM2 PIC", 
        "DLT_JUNIPER_MLPPP", 
        "Juniper Multi-Link PPP", 
        "DLT_PPP_PPPD", 
        "DLT_JUNIPER_PPPOE", 
        "Juniper PPPoE", 
        "DLT_JUNIPER_PPPOE_ATM", 
        "Juniper PPPoE/ATM", 
        "DLT_GPRS_LLC", 
        "GPRS LLC", 
        "DLT_GPF_T", 
        "DLT_GPF_F", 
        "DLT_JUNIPER_PIC_PEER", 
        "Juniper PIC Peer", 
        "DLT_JUNIPER_MLFR", 
        "DLT_ERF_ETH", 
        "DLT_ERF_POS", 
        "DLT_JUNIPER_GGSN", 
        "Juniper GGSN PIC", 
        "DLT_JUNIPER_ES", 
        "DLT_JUNIPER_MONITOR", 
        "Juniper Passive Monitor PIC", 
        "DLT_JUNIPER_SERVICES", 
        "Juniper Advanced Services PIC", 
        "DLT_JUNIPER_MFR", 
        "Juniper FRF.16 Frame Relay", 
        "DLT_JUNIPER_ETHER", 
        "Juniper Ethernet", 
        "DLT_JUNIPER_PPP", 
        "Juniper PPP", 
        "DLT_JUNIPER_FRELAY", 
        "Juniper Frame Relay", 
        "DLT_JUNIPER_CHDLC", 
        "Juniper C-HDLC", 
        "DLT_MFR", 
        "DLT_JUNIPER_VP", 
        "Juniper Voice PIC", 
        "DLT_A429", 
        "Arinc 429", 
        "DLT_CAN20B", 
        "DLT_A653_ICM", 
        "libpcap version 0.9.5", 
        "\u001f !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 
        "%s: no IPv4 address assigned", 
        "SIOCGIFADDR: %s: %s", 
        "SIOCGIFNETMASK: %s: %s", 
        "inet class for 0x%x unknown", 
        "no suitable device found", 
        "too many registers needed to evaluate expression", 
        "snaplen of 0 rejects all packets", 
        "syntax error in filter expression", 
        "expression rejects all packets", 
        "sio value %u too big; max value = 255", 
        "opc value %u too big; max value = 16383", 
        "dpc value %u too big; max value = 16383", 
        "sls value %u too big; max value = 15", 
        "'vpi' supported only on raw ATM", 
        "'vci' supported only on raw ATM", 
        "'callref' supported only on raw ATM", 
        "'metac' supported only on raw ATM", 
        "'bcc' supported only on raw ATM", 
        "'oam4sc' supported only on raw ATM", 
        "'oam4ec' supported only on raw ATM", 
        "'sc' supported only on raw ATM", 
        "'ilmic' supported only on raw ATM", 
        "'lane' supported only on raw ATM", 
        "'llc' supported only on raw ATM", 
        "'oam' supported only on raw ATM", 
        "'oamf4' supported only on raw ATM", 
        "'connectmsg' supported only on raw ATM", 
        "'metaconnect' supported only on raw ATM", 
        "no VLAN support for data link type %d", 
        "action not supported on linktype 0x%x", 
        "reason not supported on linktype 0x%x", 
        "srnr not supported on linktype 0x%x", 
        "rnr not supported on linktype 0x%x", 
        "ARCnet address used in non-arc expression", 
        "ruleset not supported on linktype 0x%x", 
        "ruleset names can only be %ld characters", 
        "ifname not supported on linktype 0x%x", 
        "ifname interface names can only be %d characters", 
        "ethernet addresses supported only on ethernet/FDDI/token ring/802.11/ATM LANE/Fibre Channel", 
        "ethernet address used in non-ether expression", 
        "unsupported protocol over mpls", 
        "IrDA link-layer type filtering not implemented", 
        "DOCSIS link-layer type filtering not implemented", 
        "LAPD link-layer type filtering not implemented", 
        "no MPLS support for data link type %d", 
        "link-layer multicast filters supported only on ethernet/FDDI/token ring/ARCNET/802.11/ATM LANE/Fibre Channel", 
        "only link-layer/IP broadcast filters supported", 
        "arp does not encapsulate another protocol", 
        "rarp does not encapsulate another protocol", 
        "atalk encapsulation is not specifiable", 
        "decnet encapsulation is not specifiable", 
        "sca does not encapsulate another protocol", 
        "lat does not encapsulate another protocol", 
        "moprc does not encapsulate another protocol", 
        "mopdl does not encapsulate another protocol", 
        "link layer applied in wrong context", 
        "'radio' is not a valid protocol type", 
        "radio information not present in capture", 
        "IPv6 upper-layer protocol is not supported by proto[x]", 
        "inbound/outbound not supported on linktype %d", 
        "ISO host filtering not implemented", 
        "'ip' modifier applied to ip6 %s", 
        "'rarp' modifier applied to ip6 %s", 
        "'arp' modifier applied to ip6 %s", 
        "ATALK host filtering not implemented", 
        "AARP host filtering not implemented", 
        "'decnet' modifier applied to ip6 %s", 
        "SCA host filtering not implemented", 
        "LAT host filtering not implemented", 
        "MOPDL host filtering not implemented", 
        "MOPRC host filtering not implemented", 
        "'icmp6' modifier applied to %s", 
        "IPX host filtering not implemented", 
        "'netbeui' modifier applied to %s", 
        "'radio' modifier applied to %s", 
        "%s resolved to multiple address", 
        "non-network bits set in \"%s/%d\"", 
        "invalid qualifier against IPv6 address", 
        "'ip6' modifier applied to ip host", 
        "non-network bits set in \"%s mask %s\"", 
        "bad protocol applied for 'protochain'", 
        "'protochain' not supported with radiotap headers", 
        "unsupported proto to gen_protochain", 
        "illegal qualifier of 'portrange'", 
        "unknown Fibre Channel host '%s'", 
        "only ethernet/FDDI/token ring/802.11/ATM LANE/Fibre Channel supports link-level host name", 
        "'gateway' not supported in this configuration", 
        "unknown ip proto '%s'", 
        "unknown ether proto '%s'", 
        "unknown osi proto '%s'", 
        "out of memory", 
        "unknown data link type %d", 
        "'sio' supported only on SS7", 
        "'opc' supported only on SS7", 
        "'dpc' supported only on SS7", 
        "'sls' supported only on SS7", 
        "no VLAN match after MPLS", 
        "not a broadcast link", 
        "direction applied to 'proto'", 
        "'udp proto' is bogus", 
        "'tcp proto' is bogus", 
        "'sctp proto' is bogus", 
        "'icmp proto' is bogus", 
        "'igmp proto' is bogus", 
        "'igrp proto' is bogus", 
        "'pim proto' is bogus", 
        "'vrrp proto' is bogus", 
        "'icmp6 proto' is bogus", 
        "'ah proto' is bogus", 
        "'stp proto' is bogus", 
        "'ipx proto' is bogus", 
        "'netbeui proto' is bogus", 
        "'radio proto' is bogus", 
        "data size must be 1, 2, or 4", 
        "unsupported index operation", 
        "'sctp' modifier applied to %s", 
        "'tcp' modifier applied to %s", 
        "'udp' modifier applied to %s", 
        "'icmp' modifier applied to %s", 
        "'igmp' modifier applied to %s", 
        "'igrp' modifier applied to %s", 
        "'pim' modifier applied to %s", 
        "'vrrp' modifier applied to %s", 
        "'ah' modifier applied to %s", 
        "'esp' modifier applied to %s", 
        "'esis' modifier applied to %s", 
        "'isis' modifier applied to %s", 
        "'clnp' modifier applied to %s", 
        "'stp' modifier applied to %s", 
        "no mask %s supported", 
        "invalid ip6 address %s", 
        "mask length must be <= %u", 
        "Mask syntax for networks only", 
        "mask length must be <= 32", 
        "illegal link layer address", 
        "illegal qualifier of 'port'", 
        "'gateway' requires a name", 
        "unknown network '%s'", 
        "unknown ether host '%s'", 
        "unknown FDDI host '%s'", 
        "unknown token ring host '%s'", 
        "unknown 802.11 host '%s'", 
        "unknown host '%s'", 
        " for specified address family", 
        "unknown host '%s'%s", 
        "unknown port '%s'", 
        "port '%s' is tcp", 
        "port '%s' is sctp", 
        "port '%s' is udp", 
        "unknown port in range '%s'", 
        "port in range '%s' is tcp", 
        "port in range '%s' is sctp", 
        "port in range '%s' is udp", 
        "unknown protocol: %s", 
        "not enough core", 
        "no jmp destination", 
        "multiple matches", 
        "no destination found", 
        "division by zero", 
        "%s for block-local relative jump: off=%d", 
        "decnet name support not included, '%s' cannot be translated", 
        "malformed decnet address '%s'", 
        "sprite", 
        "decnet", 
        "lanbridge", 
        "atalkarp", 
        "decdts", 
        "decdns", 
        "netbeui", 
        "Setting direction is not supported on savefiles", 
        "Statistics aren't available from savefiles", 
        "stream: link-layer type %d isn't supported in savefiles", 
        "%s: link-layer type %d isn't supported in savefiles", 
        "truncated dump file; tried to read %d header bytes, only got %lu", 
        "truncated dump file; tried to read %u captured bytes, only got %lu", 
        "Sending packets isn't supported on savefiles", 
        "truncated dump file; tried to read %lu file header bytes, only got %lu", 
        "Can't write to %s: %s", 
        "stream", 
        "standard output", 
        "error reading dump file: %s", 
        "bogus savefile header", 
        "BUFMOD hack malloc", 
        "out of swap", 
        "bad dump file format", 
        "archaic file format", 
        "bogus IPv6 address %s", 
        "bogus ethernet address %s", 
        "illegal token: %s", 
        "illegal char '%c'", 
        "input in flex scanner failed", 
        "out of dynamic memory in pcap__scan_buffer()", 
        "out of dynamic memory in pcap__scan_bytes()", 
        "bad buffer in pcap__scan_bytes()", 
        "out of dynamic memory in pcap__create_buffer()", 
        "fatal flex scanner internal error--end of buffer missed", 
        "fatal error - scanner input buffer overflow", 
        "fatal flex scanner internal error--no action found", 
        "accept", 
        "unknown PF action", 
        "syntax error", 
        "memory exhausted", 
        "unknown PF reason", 
        "bad-offset", 
        "fragment", 
        "normalize", 
        "\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abck", 
        "@A?BCDEFGHIJKLMNPO", 
        "QRSTlnopUV_WXYZ[\\^]`ab", 
        "rstuxyvzw", 
        "439=:;<$%de\"#&", 
        "tuuvwwwwwxyzzz{{{{{{{{{|}~~~", 
        "getifaddrs: %s", 
        "libnet_autobuild_ethernet() called with non-link layer wire injection primitive", 
        "%s(): called with non-link layer wire injection primitive", 
        "%s(): payload inconsistency", 
        "libnet_build_ethernet", 
        "%s(): not yet implemented", 
        "%s(): IP packet too large", 
        "%s(): options list is too large %d", 
        "%s(): IPv4 data pblock not found", 
        "libnet_autobuild_ipv6", 
        "libnet_build_ipv6_hbhopts", 
        "libnet_build_ipv6_destopts", 
        "libnet_build_ipv6_routing", 
        "libnet_build_ipv6_frag", 
        "libnet_build_ipv6", 
        "libnet_build_ipv4_options", 
        "libnet_build_ipv4", 
        "libnet_build_udp", 
        "%s(): UID or EUID of 0 required", 
        "%s(): unsupported injection type", 
        "%s(): malloc(): %s", 
        "cardshark", 
        "libnet_init", 
        "libnet_pblock_coalesce", 
        "libnet_pblock_append", 
        "libnet_pblock_find", 
        "libnet_pblock_new", 
        "libnet_pblock_probe", 
        "%s(): couldn't find protocol block", 
        "%s(): ptag refers to different type than expected (%d != %d)", 
        "%s(): can't resize pblock buffer: %s", 
        "%s(): memcpy would overflow buffer", 
        "%s(): packet assembly cannot find a layer 2 header", 
        "%s(): packet assembly cannot find an IPv4 header", 
        "%s(): packet assembly cannot find an IPv6 header", 
        "%s(): suddenly the dungeon collapses -- you die", 
        "%s(): SOCK_RAW allocation failed: %s", 
        "%s(): set SO_BROADCAST failed: %s", 
        "%s(): set IP_HDRINCL failed: %s", 
        "%s(): get SO_SNDBUF failed: %s", 
        "%s(): set SO_SNDBUF failed: %s", 
        "libnet_open_raw6", 
        "libnet_open_raw4", 
        "%s(): not yet Implemented", 
        "%s(): socket(): %s", 
        "%s(): ioctl(): %s", 
        "%s(): %s", 
        "%s(): invalid IPv6 address", 
        "%d.%d.%d.%d", 
        "%s(): %s", 
        "%s(): value greater than 255", 
        "%s(): expecting dots and decimals", 
        "libnet_get_ipaddr4", 
        "libnet_get_ipaddr6", 
        "libnet_name2addr6", 
        "libnet_name2addr4", 
        "%s(): %d bytes written (%s)", 
        "%s(): packet is too large (%d bytes)", 
        "%s(): unsuported injection type", 
        "libnet_write_raw_ipv6", 
        "libnet_write_raw_ipv4", 
        "libnet_write", 
        "libnet_get_hwaddr: can't figure out a device to use", 
        "libnet_write_link(): only %d bytes written (%s)", 
        "unknown physical layer type 0x%x", 
        "%s: set SO_BROADCAST failed: %s", 
        "ioctl: %s", 
        "libnet_open_link", 
        "%s(): header length can't be zero", 
        "%s(): can't compute GRE checksum (wrong flags_ver bits: 0x%x )", 
        "%s(): unsuported protocol %d", 
        "libnet_do_checksum", 
        "%s() socket: %s", 
        "%s() ioctl: %s", 
        "%s(): %s is down", 
        "%s(): socket error: %s", 
        "/proc/net/dev", 
        "%s(): ferror: %s", 
        "%s(): fopen(proc_dev_file) failed: %s", 
        "%s(): ioctl(SIOCGIFCONF) error: %s", 
        "%s(): SIOCGIFADDR: dev=%s: %s", 
        "%s(): strdup not enough memory", 
        "%s(): no network interface found", 
        "%s(): can't find interface for IP %s", 
        "libnet_select_device", 
        "libnet_ifaddrlist", 
        "libnet_check_iface", 
        "b. z.@W.", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "GCC: (GNU) 4.1.2", 
        "_IO_stdin_used", 
        "sig_handler", 
        "sendSpoofedSipPacket", 
        "capturedUdp", 
        "capturedIp", 
        "capturedEthernet", 
        "SdpMessage::SdpMessage", 
        "SdpMessage::SdpMessage", 
        "SdpMessage::SdpMessage", 
        "SdpMessage::SdpMessage", 
        "SdpMessage::GetVersion", 
        "SdpMessage::GetOrigin", 
        "SdpMessage::GetName", 
        "SdpMessage::GetConnectionData", 
        "SdpMessage::GetMediaDescriptions", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::Origin::GetUserName", 
        "SdpMessage::Origin::GetSessionId", 
        "SdpMessage::Origin::GetVersion", 
        "SdpMessage::Origin::GetNetworkType", 
        "SdpMessage::Origin::GetAddressType", 
        "SdpMessage::Origin::GetAddress", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::ConnectionData::GetNetworkType", 
        "SdpMessage::ConnectionData::GetAddressType", 
        "SdpMessage::ConnectionData::GetAddress", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::MediaDescription::GetNext", 
        "SdpMessage::MediaDescription::SetNext", 
        "SdpMessage::MediaDescription::GetType", 
        "SdpMessage::MediaDescription::GetPortSpec", 
        "SdpMessage::MediaDescription::GetProtocol", 
        "SdpMessage::MediaDescription::GetFormatsCount", 
        "SdpMessage::MediaDescription::GetFormats", 
        "SdpMessage::MediaDescription::GetConnectionData", 
        "SdpMessage::ConnectionData::GetSdpLine", 
        "SdpMessage::MediaDescription::GetSdpLines", 
        "SdpMessage::Origin::GetSdpLine", 
        "SdpMessage::MediaDescription::GetPortIP4Count", 
        "SdpMessage::MediaDescription::GetPortIP4Value", 
        "SdpMessage::ConnectionData::~ConnectionData", 
        "SdpMessage::ConnectionData::~ConnectionData", 
        "SdpMessage::Origin::~Origin", 
        "SdpMessage::Origin::~Origin", 
        "SdpMessage::MediaDescription::~MediaDescription", 
        "SdpMessage::MediaDescription::~MediaDescription", 
        "SdpMessage::~SdpMessage", 
        "SdpMessage::~SdpMessage", 
        "SdpMessage::GetPacket", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::ConnectionData::ConnectionData", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::Origin::Origin", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::MediaDescription::MediaDescription", 
        "SdpMessage::SdpMessage", 
        "SdpMessage::SdpMessage", 
        "SipHeader::SipHeader", 
        "SipHeader::SipHeader", 
        "SipHeader::GetFullText", 
        "SipHeader::GetName", 
        "SipHeader::GetValue", 
        "SipHeader::GetIdentifierCount", 
        "SipHeader::GetIdentifier", 
        "SipHeader::~SipHeader", 
        "SipHeader::~SipHeader", 
        "SipHeader::SipHeader", 
        "SipHeader::SipHeader", 
        "SipHeader::SipHeader", 
        "SipHeader::SipHeader", 
        "SipIdentifier::SipIdentifier", 
        "SipIdentifier::SipIdentifier", 
        "SipIdentifier::GetFullText", 
        "SipIdentifier::GetName", 
        "SipIdentifier::GetUri", 
        "SipIdentifier::GetParameterCount", 
        "SipIdentifier::GetParameterValue", 
        "SipIdentifier::GetParameterValue", 
        "SipIdentifier::GetParameterName", 
        "SipIdentifier::~SipIdentifier", 
        "SipIdentifier::~SipIdentifier", 
        "SipIdentifier::SipIdentifier", 
        "SipIdentifier::SipIdentifier", 
        "SipMessage::constructorHelper", 
        "SipMessage::GetError", 
        "SipMessage::GetErrorInfo", 
        "SipMessage::GetSourceAddress", 
        "SipMessage::SetSourceAddress", 
        "SipMessage::GetDestinationAddress", 
        "SipMessage::SetDestinationAddress", 
        "SipMessage::GetSourcePort", 
        "SipMessage::SetSourcePort", 
        "SipMessage::GetDestinationPort", 
        "SipMessage::SetDestinationPort", 
        "SipMessage::IsRequest", 
        "SipMessage::IsResponse", 
        "SipMessage::GetMajorVersion", 
        "SipMessage::GetMinorVersion", 
        "SipMessage::GetRequestMethod", 
        "SipMessage::GetRequestUri", 
        "SipMessage::GetResponseCode", 
        "SipMessage::SetResponseCode", 
        "SipMessage::GetResponseText", 
        "SipMessage::GetHeader", 
        "SipMessage::GetHeaderCount", 
        "SipMessage::GetContent", 
        "SipMessage::GetContentSize", 
        "SipMessage::SetResponseText", 
        "SipMessage::SetRequestMethod", 
        "SipMessage::GetPacket", 
        "SipMessage::SetContent", 
        "SipMessage::GetHeader", 
        "SipMessage::RemoveHeader", 
        "SipMessage::InsertHeader", 
        "SipMessage::AddHeader", 
        "SipMessage::SetRequestUri", 
        "SipMessage::~SipMessage", 
        "SipMessage::~SipMessage", 
        "SipMessage::addHeaders", 
        "SipMessage::SipMessage", 
        "SipMessage::SipMessage", 
        "SipMessage::constructorHelper", 
        "SipMessage::SipMessage", 
        "SipMessage::SipMessage", 
        "SipMessage::SipMessage", 
        "SipMessage::SipMessage", 
        "SipUri::SipUri", 
        "SipUri::SipUri", 
        "SipUri::GetFullText", 
        "SipUri::GetScheme", 
        "SipUri::GetSchemeValue", 
        "SipUri::GetPath", 
        "SipUri::GetQuery", 
        "SipUri::GetAuthority", 
        "SipUri::GetUser", 
        "SipUri::GetPassword", 
        "SipUri::SipUri", 
        "SipUri::SipUri", 
        "SipUri::GetHost", 
        "SipUri::GetHeaderCount", 
        "SipUri::GetHeaderValue", 
        "SipUri::GetHeaderValue", 
        "SipUri::GetHeaderName", 
        "SipUri::GetParameterCount", 
        "SipUri::GetParameterValue", 
        "SipUri::GetParameterValue", 
        "SipUri::GetParameterName", 
        "SipUri::GetPort", 
        "SipUri::~SipUri", 
        "SipUri::~SipUri", 
        "GetNextWord", 
        "myfree", 
        "mymalloc", 
        "mystrndup", 
        "mystrdup", 
        "ReportError", 
        "GetNextGuid", 
        "DetermineLocalAddressAndHardwareAddressFor", 
        "DetermineLocalAddressFor", 
        "libnet_autobuild_ethernet", 
        "libnet_build_ethernet", 
        "libnet_autobuild_ipv6", 
        "libnet_build_ipv6_hbhopts", 
        "libnet_build_ipv6_destopts", 
        "libnet_build_ipv6_routing", 
        "libnet_build_ipv6_frag", 
        "libnet_build_ipv6", 
        "libnet_build_ipv4_options", 
        "libnet_autobuild_ipv4", 
        "libnet_build_ipv4", 
        "libnet_build_udp", 
        "libnet_geterror", 
        "libnet_stats", 
        "libnet_getfd", 
        "libnet_getdevice", 
        "libnet_getpacket_size", 
        "libnet_getpbuf_size", 
        "libnet_getpbuf", 
        "libnet_clear_packet", 
        "libnet_destroy", 
        "libnet_init", 
        "libnet_pblock_setflags", 
        "libnet_pblock_update", 
        "libnet_pblock_p2p", 
        "libnet_pblock_record_ip_offset", 
        "libnet_pblock_delete", 
        "libnet_pblock_find", 
        "libnet_pblock_insert_before", 
        "libnet_pblock_swap", 
        "libnet_pblock_new", 
        "libnet_pblock_probe", 
        "libnet_pblock_append", 
        "libnet_pblock_coalesce", 
        "libnet_close_raw6", 
        "libnet_close_raw4", 
        "libnet_open_raw6", 
        "libnet_open_raw4", 
        "libnet_hex_aton", 
        "libnet_get_ipaddr6", 
        "libnet_get_ipaddr4", 
        "libnet_name2addr6", 
        "libnet_addr2name4_r", 
        "libnet_addr2name4", 
        "libnet_addr2name6_r", 
        "libnet_name2addr4", 
        "in6addr_error", 
        "libnet_write_raw_ipv6", 
        "libnet_write_raw_ipv4", 
        "libnet_write", 
        "libnet_close_link", 
        "libnet_get_hwaddr", 
        "libnet_write_link", 
        "libnet_open_link", 
        "libnet_in_cksum", 
        "libnet_ip_check", 
        "libnet_do_checksum", 
        "libnet_toggle_checksum", 
        "libnet_check_iface", 
        "libnet_ifaddrlist", 
        "libnet_select_device", 
        "/glibc-tmp-fc55f83e00cc09fabc85367f1a3049c6/glibc-2.5/build-glibc-2.5/csu/crti.S", 
        "/glibc-tmp-fc55f83e00cc09fabc85367f1a3049c6/glibc-2.5/csu", 
        "GNU AS 2.17.50.0.16", 
        "GNU C++ 4.1.2", 
        "capture.cpp", 
        "/root/sip_rogue", 
        "signed char", 
        "short int", 
        "int32_t", 
        "long long int", 
        "unsigned char", 
        "uint16_t", 
        "short unsigned int", 
        "uint32_t", 
        "long long unsigned int", 
        "size_t", 
        "__u_char", 
        "__u_short", 
        "__u_int", 
        "long unsigned int", 
        "__quad_t", 
        "__u_quad_t", 
        "__dev_t", 
        "__uid_t", 
        "__gid_t", 
        "__ino_t", 
        "__mode_t", 
        "__nlink_t", 
        "__off_t", 
        "long int", 
        "__off64_t", 
        "__time_t", 
        "__suseconds_t", 
        "__blksize_t", 
        "__blkcnt_t", 
        "u_char", 
        "u_short", 
        "time_t", 
        "u_int8_t", 
        "u_int16_t", 
        "u_int32_t", 
        "u_int64_t", 
        "timespec", 
        "tv_sec", 
        "tv_nsec", 
        "timeval", 
        "tv_sec", 
        "tv_usec", 
        "in_port_t", 
        "in_addr_t", 
        "in_addr", 
        "s_addr", 
        "ip_tos", 
        "ip_len", 
        "ip_off", 
        "ip_ttl", 
        "ip_sum", 
        "ip_src", 
        "ip_dst", 
        "udphdr", 
        "source", 
        "_IO_FILE", 
        "_flags", 
        "_IO_read_ptr", 
        "_IO_read_end", 
        "_IO_read_base", 
        "_IO_write_base", 
        "_IO_write_ptr", 
        "_IO_write_end", 
        "_IO_buf_base", 
        "_IO_buf_end", 
        "_IO_save_base", 
        "_IO_backup_base", 
        "_IO_save_end", 
        "_markers", 
        "_chain", 
        "_fileno", 
        "_flags2", 
        "_old_offset", 
        "_cur_column", 
        "_vtable_offset", 
        "_shortbuf", 
        "_offset", 
        "__pad1", 
        "__pad2", 
        "__pad3", 
        "__pad4", 
        "__pad5", 
        "_unused2", 
        "_IO_lock_t", 
        "_IO_marker", 
        "st_dev", 
        "__pad1", 
        "st_ino", 
        "st_mode", 
        "st_nlink", 
        "st_uid", 
        "st_gid", 
        "st_rdev", 
        "__pad2", 
        "st_size", 
        "st_blksize", 
        "st_blocks", 
        "st_atim", 
        "st_mtim", 
        "st_ctim", 
        "__unused4", 
        "__unused5", 
        "tm_sec", 
        "tm_min", 
        "tm_hour", 
        "tm_mday", 
        "tm_mon", 
        "tm_year", 
        "tm_wday", 
        "tm_yday", 
        "tm_isdst", 
        "tm_gmtoff", 
        "tm_zone", 
        "bpf_int32", 
        "bpf_u_int32", 
        "bpf_program", 
        "bf_len", 
        "bf_insns", 
        "bpf_insn", 
        "pcap_t", 
        "pcap_dumper_t", 
        "pcap_dumper", 
        "pcap_pkthdr", 
        "caplen", 
        "libnet_stats", 
        "packets_sent", 
        "packet_errors", 
        "bytes_written", 
        "libnet_ptag_t", 
        "libnet_protocol_block", 
        "ip_offset", 
        "copied", 
        "libnet_pblock_t", 
        "libnet_context", 
        "injection_type", 
        "protocol_blocks", 
        "pblock_end", 
        "n_pblocks", 
        "link_type", 
        "link_offset", 
        "aligner", 
        "device", 
        "ptag_state", 
        "err_buf", 
        "total_size", 
        "libnet_t", 
        "nameValueNode", 
        "mScheme", 
        "mSchemeValue", 
        "mAuthority", 
        "mPassword", 
        "mQuery", 
        "mStartOfHeaders", 
        "mHeaderCount", 
        "mHeaders", 
        "~SipUri", 
        "'_ZN6SipUri11GetFullTextEv", 
        "GetScheme", 
        "(_ZN6SipUri9GetSchemeEv", 
        "GetSchemeValue", 
        ")_ZN6SipUri14GetSchemeValueEv", 
        "GetAuthority", 
        "*_ZN6SipUri12GetAuthorityEv", 
        "GetUser", 
        "+_ZN6SipUri7GetUserEv", 
        "GetPassword", 
        ",_ZN6SipUri11GetPasswordEv", 
        "GetHost", 
        "-_ZN6SipUri7GetHostEv", 
        "GetPort", 
        "/_ZN6SipUri7GetPortEv", 
        "GetPath", 
        "0_ZN6SipUri7GetPathEv", 
        "GetQuery", 
        "1_ZN6SipUri8GetQueryEv", 
        "3_ZN6SipUri17GetParameterCountEv", 
        "4_ZN6SipUri16GetParameterNameEi", 
        "5_ZN6SipUri17GetParameterValueEi", 
        "6_ZN6SipUri17GetParameterValueEPKc", 
        "8_ZN6SipUri14GetHeaderCountEv", 
        "GetHeaderName", 
        "9_ZN6SipUri13GetHeaderNameEi", 
        ":_ZN6SipUri14GetHeaderValueEi", 
        ";_ZN6SipUri14GetHeaderValueEPKc", 
        "parameterNode", 
        "~SipIdentifier", 
        "-_ZN13SipIdentifier11GetFullTextEv", 
        "._ZN13SipIdentifier7GetNameEv", 
        "GetUri", 
        "/_ZN13SipIdentifier6GetUriEv", 
        "1_ZN13SipIdentifier17GetParameterCountEv", 
        "2_ZN13SipIdentifier16GetParameterNameEi", 
        "3_ZN13SipIdentifier17GetParameterValueEi", 
        "4_ZN13SipIdentifier17GetParameterValueEPc", 
        "identifierNode", 
        "mValue", 
        "mIdentifierCount", 
        "mIdentifiers", 
        "~SipHeader", 
        "+_ZN9SipHeader11GetFullTextEv", 
        ",_ZN9SipHeader7GetNameEv", 
        "GetValue", 
        "-_ZN9SipHeader8GetValueEv", 
        "GetIdentifierCount", 
        "/_ZN9SipHeader18GetIdentifierCountEv", 
        "GetIdentifier", 
        "0_ZN9SipHeader13GetIdentifierEi", 
        "headerNode", 
        "mError", 
        "mErrorInfo", 
        "mSourceAddress", 
        "mDestinationAddress", 
        "mSourcePort", 
        "mDestinationPort", 
        "mRequestFlag", 
        "mMajorVersion", 
        "mMinorVersion", 
        "mHeaderListHead", 
        "mHeaderListTail", 
        "mContent", 
        "mContentSize", 
        "mRequestMethod", 
        "mResponseCode", 
        "mRequestUri", 
        "mResponseText", 
        "~SipMessage", 
        "GetError", 
        "6_ZN10SipMessage8GetErrorEv", 
        "GetErrorInfo", 
        "7_ZN10SipMessage12GetErrorInfoEv", 
        "GetSourceAddress", 
        "9_ZN10SipMessage16GetSourceAddressEv", 
        "SetSourceAddress", 
        ":_ZN10SipMessage16SetSourceAddressEj", 
        "GetSourcePort", 
        "<_ZN10SipMessage13GetSourcePortEv", 
        "SetSourcePort", 
        "=_ZN10SipMessage13SetSourcePortEt", 
        "GetDestinationAddress", 
        "?_ZN10SipMessage21GetDestinationAddressEv", 
        "SetDestinationAddress", 
        "@_ZN10SipMessage21SetDestinationAddressEj", 
        "GetDestinationPort", 
        "B_ZN10SipMessage18GetDestinationPortEv", 
        "SetDestinationPort", 
        "C_ZN10SipMessage18SetDestinationPortEt", 
        "IsRequest", 
        "E_ZN10SipMessage9IsRequestEv", 
        "IsResponse", 
        "F_ZN10SipMessage10IsResponseEv", 
        "GetMajorVersion", 
        "H_ZN10SipMessage15GetMajorVersionEv", 
        "GetMinorVersion", 
        "I_ZN10SipMessage15GetMinorVersionEv", 
        "GetRequestMethod", 
        "K_ZN10SipMessage16GetRequestMethodEv", 
        "SetRequestMethod", 
        "N_ZN10SipMessage16SetRequestMethodEPc", 
        "GetRequestUri", 
        "P_ZN10SipMessage13GetRequestUriEv", 
        "SetRequestUri", 
        "S_ZN10SipMessage13SetRequestUriEP6SipUri", 
        "GetResponseCode", 
        "U_ZN10SipMessage15GetResponseCodeEv", 
        "SetResponseCode", 
        "W_ZN10SipMessage15SetResponseCodeEi", 
        "GetResponseText", 
        "Y_ZN10SipMessage15GetResponseTextEv", 
        "SetResponseText", 
        "\\_ZN10SipMessage15SetResponseTextEPc", 
        "AddHeader", 
        "`_ZN10SipMessage9AddHeaderEP9SipHeader", 
        "InsertHeader", 
        "c_ZN10SipMessage12InsertHeaderEP9SipHeader", 
        "RemoveHeader", 
        "g_ZN10SipMessage12RemoveHeaderEPc", 
        "i_ZN10SipMessage14GetHeaderCountEv", 
        "j_ZN10SipMessage9GetHeaderEi", 
        "k_ZN10SipMessage9GetHeaderEPc", 
        "GetContentSize", 
        "m_ZN10SipMessage14GetContentSizeEv", 
        "GetContent", 
        "n_ZN10SipMessage10GetContentEv", 
        "SetContent", 
        "p_ZN10SipMessage10SetContentEPc", 
        "s_ZN10SipMessage9GetPacketEv", 
        "_ZN10SipMessage17constructorHelperEjtjtb", 
        "_ZN10SipMessage17constructorHelperEjtjtPci", 
        "addHeaders", 
        "_ZN10SipMessage10addHeadersEPc", 
        "mUserName", 
        "mSessionId", 
        "~Origin", 
        "GetUserName", 
        "4_ZN10SdpMessage6Origin11GetUserNameEv", 
        "GetSessionId", 
        "5_ZN10SdpMessage6Origin12GetSessionIdEv", 
        "6_ZN10SdpMessage6Origin10GetVersionEv", 
        "8_ZN10SdpMessage6Origin14GetNetworkTypeEv", 
        ":_ZN10SdpMessage6Origin14GetAddressTypeEv", 
        "<_ZN10SdpMessage6Origin10GetAddressEv", 
        ">_ZN10SdpMessage6Origin10GetSdpLineEv", 
        "~ConnectionData", 
        "U_ZN10SdpMessage14ConnectionData14GetNetworkTypeEv", 
        "V_ZN10SdpMessage14ConnectionData14GetAddressTypeEv", 
        "W_ZN10SdpMessage14ConnectionData10GetAddressEv", 
        "Y_ZN10SdpMessage14ConnectionData10GetSdpLineEv", 
        "mPortSpec", 
        "mProtocol", 
        "mFormatsCount", 
        "mFormats", 
        "~MediaDescription", 
        "GetNext", 
        "r_ZN10SdpMessage16MediaDescription7GetNextEv", 
        "SetNext", 
        "s_ZN10SdpMessage16MediaDescription7SetNextEPS0_", 
        "GetType", 
        "v_ZN10SdpMessage16MediaDescription7GetTypeEv", 
        "GetPortSpec", 
        "x_ZN10SdpMessage16MediaDescription11GetPortSpecEv", 
        "GetPortIP4Value", 
        "y_ZN10SdpMessage16MediaDescription15GetPortIP4ValueEv", 
        "GetPortIP4Count", 
        "z_ZN10SdpMessage16MediaDescription15GetPortIP4CountEv", 
        "GetProtocol", 
        "|_ZN10SdpMessage16MediaDescription11GetProtocolEv", 
        "GetFormatsCount", 
        "}_ZN10SdpMessage16MediaDescription15GetFormatsCountEv", 
        "GetFormats", 
        "_ZN10SdpMessage16MediaDescription10GetFormatsEv", 
        "_ZN10SdpMessage16MediaDescription17GetConnectionDataEv", 
        "GetSdpLines", 
        "_ZN10SdpMessage16MediaDescription11GetSdpLinesEv", 
        "mOrigin", 
        "mMediaDescriptions", 
        "~SdpMessage", 
        "_ZN10SdpMessage10GetVersionEv", 
        "GetOrigin", 
        "_ZN10SdpMessage9GetOriginEv", 
        "_ZN10SdpMessage7GetNameEv", 
        "_ZN10SdpMessage17GetConnectionDataEv", 
        "GetMediaDescriptions", 
        "_ZN10SdpMessage20GetMediaDescriptionsEv", 
        "_ZN10SdpMessage9GetPacketEv", 
        "dumpDestination", 
        "Address", 
        "CallId", 
        "Dumper", 
        "PreviousByPort", 
        "NextByPort", 
        "PreviousByCallId", 
        "NextByCallId", 
        "\"aArgC", 
        "\"aArgV", 
        "#error", 
        "}#filter", 
        "P#netmask", 
        "L#netaddr", 
        "\\#userNamesFileName", 
        "`#urisFileName", 
        "d#authDataFileName", 
        "sig_handler", 
        "_Z11sig_handleri", 
        "\"signal", 
        "p#count", 
        "\"__path", 
        "\"__statbuf", 
        "sendSpoofedSipPacket", 
        "_Z20sendSpoofedSipPacketPhS_jjttS_", 
        "'aEthSrc", 
        "'aEthDst", 
        "'aIpSrc", 
        "'aIpDst", 
        "'aSrcPort", 
        "}'aDstPort", 
        "}'aPayload", 
        "(libnetHandle", 
        "X(libnetErrorBuffer", 
        "d(written", 
        "h(length", 
        "capturedUdp", 
        "_Z11capturedUdpPK11pcap_pkthdrPKh", 
        "(udpHeader", 
        "(destinationNext", 
        "(header", 
        "(toHeader", 
        "(toUri", 
        "(fromHeader", 
        "(fromUri", 
        "(callIdHeader", 
        "(cseqHeader", 
        "(sdpMedia", 
        "@(callId", 
        "D(callIdHash", 
        "H(port", 
        "L(fileStat", 
        "}(sipPacket", 
        "P(dumped", 
        "W(tmpaddr", 
        "(connectionData", 
        "\\(index", 
        "`(index2", 
        "d(timeval", 
        "~(tmval", 
        "h(outputline", 
        "capturedIp", 
        "_Z10capturedIpPK11pcap_pkthdrPKh", 
        "capturedEthernet", 
        "_Z16capturedEthernetPhPK11pcap_pkthdrPKh", 
        "\"aArgs", 
        "-stderr", 
        "-optarg", 
        ".mDeviceName", 
        ".mKillCalls", 
        ".mKillCallsInvolving", 
        ".mOutputName", 
        ".mCaptureFileName", 
        ".mCaptureFileNameSize", 
        ".mSplit", 
        ".mSingleDumper", 
        ".mPcapHandle", 
        ".mDumperCounter", 
        ".mCallCounter", 
        ".mUserNamesFile", 
        ".mUrisFile", 
        ".mAuthDataFile", 
        ".mUrisHeaders", 
        ".mAuthDataHeaders", 
        ".mSipScratch", 
        ".dumpDestByPort", 
        ".dumpDestByCallId", 
        "-stderr", 
        "-optarg", 
        "GNU C++ 4.1.2", 
        "hash.cpp", 
        "/root/sip_rogue", 
        "unsigned char", 
        "short unsigned int", 
        "long unsigned int", 
        "signed char", 
        "short int", 
        "long long int", 
        "long long unsigned int", 
        "long int", 
        "_Z4hashPhmm", 
        "aKeyLength", 
        "GNU C++ 4.1.2", 
        "SdpMessage.cpp", 
        "/root/sip_rogue", 
        "unsigned char", 
        "short unsigned int", 
        "long unsigned int", 
        "signed char", 
        "short int", 
        "long long int", 
        "long long unsigned int", 
        "long int", 
        "mUserName", 
        "mSessionId", 
        "~Origin", 
        "GetUserName", 
        "4_ZN10SdpMessage6Origin11GetUserNameEv", 
        "GetSessionId", 
        "5_ZN10SdpMessage6Origin12GetSessionIdEv", 
        "6_ZN10SdpMessage6Origin10GetVersionEv", 
        "8_ZN10SdpMessage6Origin14GetNetworkTypeEv", 
        ":_ZN10SdpMessage6Origin14GetAddressTypeEv", 
        "<_ZN10SdpMessage6Origin10GetAddressEv", 
        ">_ZN10SdpMessage6Origin10GetSdpLineEv", 
        "~ConnectionData", 
        "U_ZN10SdpMessage14ConnectionData14GetNetworkTypeEv", 
        "V_ZN10SdpMessage14ConnectionData14GetAddressTypeEv", 
        "W_ZN10SdpMessage14ConnectionData10GetAddressEv", 
        "Y_ZN10SdpMessage14ConnectionData10GetSdpLineEv", 
        "mPortSpec", 
        "mProtocol", 
        "mFormatsCount", 
        "mFormats", 
        "~MediaDescription", 
        "GetNext", 
        "r_ZN10SdpMessage16MediaDescription7GetNextEv", 
        "SetNext", 
        "s_ZN10SdpMessage16MediaDescription7SetNextEPS0_", 
        "GetType", 
        "v_ZN10SdpMessage16MediaDescription7GetTypeEv", 
        "GetPortSpec", 
        "x_ZN10SdpMessage16MediaDescription11GetPortSpecEv", 
        "GetPortIP4Value", 
        "y_ZN10SdpMessage16MediaDescription15GetPortIP4ValueEv", 
        "GetPortIP4Count", 
        "z_ZN10SdpMessage16MediaDescription15GetPortIP4CountEv", 
        "GetProtocol", 
        "|_ZN10SdpMessage16MediaDescription11GetProtocolEv", 
        "GetFormatsCount", 
        "}_ZN10SdpMessage16MediaDescription15GetFormatsCountEv", 
        "GetFormats", 
        "_ZN10SdpMessage16MediaDescription10GetFormatsEv", 
        "_ZN10SdpMessage16MediaDescription17GetConnectionDataEv", 
        "GetSdpLines", 
        "_ZN10SdpMessage16MediaDescription11GetSdpLinesEv", 
        "mOrigin", 
        "mMediaDescriptions", 
        "~SdpMessage", 
        "_ZN10SdpMessage10GetVersionEv", 
        "GetOrigin", 
        "_ZN10SdpMessage9GetOriginEv", 
        "GetName", 
        "_ZN10SdpMessage7GetNameEv", 
        "_ZN10SdpMessage17GetConnectionDataEv", 
        "GetMediaDescriptions", 
        "_ZN10SdpMessage20GetMediaDescriptionsEv", 
        "GetPacket", 
        "_ZN10SdpMessage9GetPacketEv", 
        "aOrigin", 
        "aMediaDescriptions", 
        "aUserName", 
        "aSessionId", 
        "aPortSpec", 
        "aProtocol", 
        "aFormatsCount", 
        "aFormats", 
        "aValue", 
        "l\u001fsize", 
        "`\u001flines", 
        "l\u001fsize", 
        "h\u001fsize", 
        "\\$mediaDescriptionLines", 
        "`$originLine", 
        "d$packet", 
        "l$packetSize", 
        "p$mediaDescription", 
        "aSdpLines", 
        "aPayload", 
        "GNU C++ 4.1.2", 
        "SipHeader.cpp", 
        "/root/sip_rogue", 
        "unsigned char", 
        "short unsigned int", 
        "long unsigned int", 
        "signed char", 
        "short int", 
        "long long int", 
        "long long unsigned int", 
        "long int", 
        "nameValueNode", 
        "mScheme", 
        "mSchemeValue", 
        "mAuthority", 
        "mPassword", 
        "mQuery", 
        "mStartOfHeaders", 
        "mHeaderCount", 
        "mHeaders", 
        "~SipUri", 
        "'_ZN6SipUri11GetFullTextEv", 
        "GetScheme", 
        "(_ZN6SipUri9GetSchemeEv", 
        "GetSchemeValue", 
        ")_ZN6SipUri14GetSchemeValueEv", 
        "GetAuthority", 
        "*_ZN6SipUri12GetAuthorityEv", 
        "GetUser", 
        "+_ZN6SipUri7GetUserEv", 
        "GetPassword", 
        ",_ZN6SipUri11GetPasswordEv", 
        "GetHost", 
        "-_ZN6SipUri7GetHostEv", 
        "GetPort", 
        "/_ZN6SipUri7GetPortEv", 
        "GetPath", 
        "0_ZN6SipUri7GetPathEv", 
        "GetQuery", 
        "1_ZN6SipUri8GetQueryEv", 
        "3_ZN6SipUri17GetParameterCountEv", 
        "4_ZN6SipUri16GetParameterNameEi", 
        "5_ZN6SipUri17GetParameterValueEi", 
        "6_ZN6SipUri17GetParameterValueEPKc", 
        "GetHeaderCount", 
        "8_ZN6SipUri14GetHeaderCountEv", 
        "GetHeaderName", 
        "9_ZN6SipUri13GetHeaderNameEi", 
        ":_ZN6SipUri14GetHeaderValueEi", 
        ";_ZN6SipUri14GetHeaderValueEPKc", 
        "parameterNode", 
        "~SipIdentifier", 
        "-_ZN13SipIdentifier11GetFullTextEv", 
        "GetName", 
        "._ZN13SipIdentifier7GetNameEv", 
        "GetUri", 
        "/_ZN13SipIdentifier6GetUriEv", 
        "1_ZN13SipIdentifier17GetParameterCountEv", 
        "2_ZN13SipIdentifier16GetParameterNameEi", 
        "3_ZN13SipIdentifier17GetParameterValueEi", 
        "4_ZN13SipIdentifier17GetParameterValueEPc", 
        "identifierNode", 
        "mValue", 
        "mIdentifierCount", 
        "mIdentifiers", 
        "~SipHeader", 
        "+_ZN9SipHeader11GetFullTextEv", 
        "GetName", 
        ",_ZN9SipHeader7GetNameEv", 
        "GetValue", 
        "-_ZN9SipHeader8GetValueEv", 
        "GetIdentifierCount", 
        "/_ZN9SipHeader18GetIdentifierCountEv", 
        "GetIdentifier", 
        "0_ZN9SipHeader13GetIdentifierEi", 
        "aFullText", 
        "endOfName", 
        "startOfValue", 
        "nextStart", 
        "firstNode", 
        "lastNode", 
        "aIndex", 
        "__in_chrg", 
        "aValue", 
        "aCopyFrom", 
        "GNU C++ 4.1.2", 
        "SipIdentifier.cpp", 
        "/root/sip_rogue", 
        "long int", 
        "long long int", 
        "short unsigned int", 
        "unsigned char", 
        "long unsigned int", 
        "signed char", 
        "short int", 
        "long long unsigned int", 
        "nameValueNode", 
        "mScheme", 
        "mSchemeValue", 
        "mAuthority", 
        "mPassword", 
        "mQuery", 
        "mStartOfHeaders", 
        "mHeaderCount", 
        "mHeaders", 
        "~SipUri", 
        "'_ZN6SipUri11GetFullTextEv", 
        "GetScheme", 
        "(_ZN6SipUri9GetSchemeEv", 
        "GetSchemeValue", 
        ")_ZN6SipUri14GetSchemeValueEv", 
        "GetAuthority", 
        "*_ZN6SipUri12GetAuthorityEv", 
        "GetUser", 
        "+_ZN6SipUri7GetUserEv", 
        "GetPassword", 
        ",_ZN6SipUri11GetPasswordEv", 
        "GetHost", 
        "-_ZN6SipUri7GetHostEv", 
        "GetPort", 
        "/_ZN6SipUri7GetPortEv", 
        "GetPath", 
        "0_ZN6SipUri7GetPathEv", 
        "GetQuery", 
        "1_ZN6SipUri8GetQueryEv", 
        "3_ZN6SipUri17GetParameterCountEv", 
        "4_ZN6SipUri16GetParameterNameEi", 
        "5_ZN6SipUri17GetParameterValueEi", 
        "6_ZN6SipUri17GetParameterValueEPKc", 
        "GetHeaderCount", 
        "8_ZN6SipUri14GetHeaderCountEv", 
        "GetHeaderName", 
        "9_ZN6SipUri13GetHeaderNameEi", 
        ":_ZN6SipUri14GetHeaderValueEi", 
        ";_ZN6SipUri14GetHeaderValueEPKc", 
        "parameterNode", 
        "~SipIdentifier", 
        "-_ZN13SipIdentifier11GetFullTextEv", 
        "GetName", 
        "._ZN13SipIdentifier7GetNameEv", 
        "GetUri", 
        "/_ZN13SipIdentifier6GetUriEv", 
        "1_ZN13SipIdentifier17GetParameterCountEv", 
        "2_ZN13SipIdentifier16GetParameterNameEi", 
        "3_ZN13SipIdentifier17GetParameterValueEi", 
        "4_ZN13SipIdentifier17GetParameterValueEPc", 
        "aFullText", 
        "startOfUri", 
        "endOfUri", 
        "endOfValue", 
        "lastNode", 
        "aIndex", 
        "aIndex", 
        "\u001f__in_chrg", 
        "aCopyFrom", 
        "GNU C++ 4.1.2", 
        "SipMessage.cpp", 
        "/root/sip_rogue", 
        "signed char", 
        "short int", 
        "long long int", 
        "unsigned char", 
        "uint16_t", 
        "short unsigned int", 
        "uint32_t", 
        "long long unsigned int", 
        "long unsigned int", 
        "long int", 
        "in_port_t", 
        "in_addr_t", 
        "nameValueNode", 
        "mScheme", 
        "mSchemeValue", 
        "mAuthority", 
        "mPassword", 
        "mQuery", 
        "mStartOfHeaders", 
        "mHeaderCount", 
        "mHeaders", 
        "~SipUri", 
        "'_ZN6SipUri11GetFullTextEv", 
        "GetScheme", 
        "(_ZN6SipUri9GetSchemeEv", 
        "GetSchemeValue", 
        ")_ZN6SipUri14GetSchemeValueEv", 
        "GetAuthority", 
        "*_ZN6SipUri12GetAuthorityEv", 
        "GetUser", 
        "+_ZN6SipUri7GetUserEv", 
        "GetPassword", 
        ",_ZN6SipUri11GetPasswordEv", 
        "GetHost", 
        "-_ZN6SipUri7GetHostEv", 
        "GetPort", 
        "/_ZN6SipUri7GetPortEv", 
        "GetPath", 
        "0_ZN6SipUri7GetPathEv", 
        "GetQuery", 
        "1_ZN6SipUri8GetQueryEv", 
        "3_ZN6SipUri17GetParameterCountEv", 
        "4_ZN6SipUri16GetParameterNameEi", 
        "5_ZN6SipUri17GetParameterValueEi", 
        "6_ZN6SipUri17GetParameterValueEPKc", 
        "8_ZN6SipUri14GetHeaderCountEv", 
        "GetHeaderName", 
        "9_ZN6SipUri13GetHeaderNameEi", 
        ":_ZN6SipUri14GetHeaderValueEi", 
        ";_ZN6SipUri14GetHeaderValueEPKc", 
        "parameterNode", 
        "~SipIdentifier", 
        "-_ZN13SipIdentifier11GetFullTextEv", 
        "GetName", 
        "._ZN13SipIdentifier7GetNameEv", 
        "GetUri", 
        "/_ZN13SipIdentifier6GetUriEv", 
        "1_ZN13SipIdentifier17GetParameterCountEv", 
        "2_ZN13SipIdentifier16GetParameterNameEi", 
        "3_ZN13SipIdentifier17GetParameterValueEi", 
        "4_ZN13SipIdentifier17GetParameterValueEPc", 
        "identifierNode", 
        "mValue", 
        "mIdentifierCount", 
        "mIdentifiers", 
        "~SipHeader", 
        "+_ZN9SipHeader11GetFullTextEv", 
        "GetName", 
        ",_ZN9SipHeader7GetNameEv", 
        "GetValue", 
        "-_ZN9SipHeader8GetValueEv", 
        "GetIdentifierCount", 
        "/_ZN9SipHeader18GetIdentifierCountEv", 
        "GetIdentifier", 
        "0_ZN9SipHeader13GetIdentifierEi", 
        "headerNode", 
        "mError", 
        "mErrorInfo", 
        "mSourceAddress", 
        "mDestinationAddress", 
        "mSourcePort", 
        "mDestinationPort", 
        "mRequestFlag", 
        "mMajorVersion", 
        "mMinorVersion", 
        "mHeaderListHead", 
        "mHeaderListTail", 
        "mContent", 
        "mContentSize", 
        "mRequestMethod", 
        "mResponseCode", 
        "mRequestUri", 
        "mResponseText", 
        "~SipMessage", 
        "GetError", 
        "6_ZN10SipMessage8GetErrorEv", 
        "GetErrorInfo", 
        "7_ZN10SipMessage12GetErrorInfoEv", 
        "GetSourceAddress", 
        "9_ZN10SipMessage16GetSourceAddressEv", 
        "SetSourceAddress", 
        ":_ZN10SipMessage16SetSourceAddressEj", 
        "GetSourcePort", 
        "<_ZN10SipMessage13GetSourcePortEv", 
        "SetSourcePort", 
        "=_ZN10SipMessage13SetSourcePortEt", 
        "GetDestinationAddress", 
        "?_ZN10SipMessage21GetDestinationAddressEv", 
        "SetDestinationAddress", 
        "@_ZN10SipMessage21SetDestinationAddressEj", 
        "GetDestinationPort", 
        "B_ZN10SipMessage18GetDestinationPortEv", 
        "SetDestinationPort", 
        "C_ZN10SipMessage18SetDestinationPortEt", 
        "IsRequest", 
        "E_ZN10SipMessage9IsRequestEv", 
        "IsResponse", 
        "F_ZN10SipMessage10IsResponseEv", 
        "GetMajorVersion", 
        "H_ZN10SipMessage15GetMajorVersionEv", 
        "GetMinorVersion", 
        "I_ZN10SipMessage15GetMinorVersionEv", 
        "GetRequestMethod", 
        "K_ZN10SipMessage16GetRequestMethodEv", 
        "SetRequestMethod", 
        "N_ZN10SipMessage16SetRequestMethodEPc", 
        "GetRequestUri", 
        "P_ZN10SipMessage13GetRequestUriEv", 
        "SetRequestUri", 
        "S_ZN10SipMessage13SetRequestUriEP6SipUri", 
        "GetResponseCode", 
        "U_ZN10SipMessage15GetResponseCodeEv", 
        "SetResponseCode", 
        "W_ZN10SipMessage15SetResponseCodeEi", 
        "GetResponseText", 
        "Y_ZN10SipMessage15GetResponseTextEv", 
        "SetResponseText", 
        "\\_ZN10SipMessage15SetResponseTextEPc", 
        "AddHeader", 
        "`_ZN10SipMessage9AddHeaderEP9SipHeader", 
        "InsertHeader", 
        "c_ZN10SipMessage12InsertHeaderEP9SipHeader", 
        "RemoveHeader", 
        "g_ZN10SipMessage12RemoveHeaderEPc", 
        "i_ZN10SipMessage14GetHeaderCountEv", 
        "j_ZN10SipMessage9GetHeaderEi", 
        "k_ZN10SipMessage9GetHeaderEPc", 
        "GetContentSize", 
        "m_ZN10SipMessage14GetContentSizeEv", 
        "GetContent", 
        "n_ZN10SipMessage10GetContentEv", 
        "SetContent", 
        "p_ZN10SipMessage10SetContentEPc", 
        "GetPacket", 
        "s_ZN10SipMessage9GetPacketEv", 
        "_ZN10SipMessage17constructorHelperEjtjtb", 
        "_ZN10SipMessage17constructorHelperEjtjtPci", 
        "addHeaders", 
        "_ZN10SipMessage10addHeadersEPc", 
        "aRequestFlag", 
        "aIndex", 
        "p count", 
        "aMethod", 
        " packet", 
        "T contentSize", 
        "X headerCount", 
        "\\ headerIndex", 
        "` packetPosition", 
        "d packetSize", 
        "aValue", 
        " previousNode", 
        "aHeader", 
        "aHeader", 
        "#__in_chrg", 
        ")aIsRequest", 
        "GNU C++ 4.1.2", 
        "SipUri.cpp", 
        "/root/sip_rogue", 
        "unsigned char", 
        "short unsigned int", 
        "long unsigned int", 
        "signed char", 
        "short int", 
        "long long int", 
        "long long unsigned int", 
        "long int", 
        "nameValueNode", 
        "mFullText", 
        "mScheme", 
        "mSchemeValue", 
        "mAuthority", 
        "mPassword", 
        "mQuery", 
        "mStartOfParameters", 
        "mParameterCount", 
        "mParameters", 
        "mStartOfHeaders", 
        "mHeaderCount", 
        "mHeaders", 
        "~SipUri", 
        "GetFullText", 
        "'_ZN6SipUri11GetFullTextEv", 
        "GetScheme", 
        "(_ZN6SipUri9GetSchemeEv", 
        "GetSchemeValue", 
        ")_ZN6SipUri14GetSchemeValueEv", 
        "GetAuthority", 
        "*_ZN6SipUri12GetAuthorityEv", 
        "GetUser", 
        "+_ZN6SipUri7GetUserEv", 
        "GetPassword", 
        ",_ZN6SipUri11GetPasswordEv", 
        "GetHost", 
        "-_ZN6SipUri7GetHostEv", 
        "GetPort", 
        "/_ZN6SipUri7GetPortEv", 
        "GetPath", 
        "0_ZN6SipUri7GetPathEv", 
        "GetQuery", 
        "1_ZN6SipUri8GetQueryEv", 
        "GetParameterCount", 
        "3_ZN6SipUri17GetParameterCountEv", 
        "GetParameterName", 
        "4_ZN6SipUri16GetParameterNameEi", 
        "5_ZN6SipUri17GetParameterValueEi", 
        "6_ZN6SipUri17GetParameterValueEPKc", 
        "GetHeaderCount", 
        "8_ZN6SipUri14GetHeaderCountEv", 
        "GetHeaderName", 
        "9_ZN6SipUri13GetHeaderNameEi", 
        ":_ZN6SipUri14GetHeaderValueEi", 
        ";_ZN6SipUri14GetHeaderValueEPKc", 
        "aFullText", 
        "endOfScheme", 
        "startOfPath", 
        "endOfPath", 
        "startOfAuthority", 
        "endOfAuthority", 
        "startOfUser", 
        "endOfUser", 
        "endOfPassword", 
        "aCopyFrom", 
        "startOfHost", 
        "endOfHost", 
        "__in_chrg", 
        "GNU C++ 4.1.2", 
        "util.cpp", 
        "/root/sip_rogue", 
        "short unsigned int", 
        "signed char", 
        "unsigned char", 
        "short int", 
        "long long int", 
        "long long unsigned int", 
        "size_t", 
        "long unsigned int", 
        "__quad_t", 
        "__off_t", 
        "long int", 
        "__off64_t", 
        "__time_t", 
        "__suseconds_t", 
        "__socklen_t", 
        "timeval", 
        "tv_sec", 
        "tv_usec", 
        "iov_base", 
        "iov_len", 
        "uint32_t", 
        "socklen_t", 
        "sa_family_t", 
        "msghdr", 
        "msg_name", 
        "msg_namelen", 
        "msg_iov", 
        "msg_iovlen", 
        "msg_control", 
        "msg_controllen", 
        "msg_flags", 
        "in_addr_t", 
        "_IO_FILE", 
        "_flags", 
        "_IO_read_ptr", 
        "_IO_read_end", 
        "_IO_read_base", 
        "_IO_write_base", 
        "_IO_write_ptr", 
        "_IO_write_end", 
        "_IO_buf_base", 
        "_IO_buf_end", 
        "_IO_save_base", 
        "_IO_backup_base", 
        "_IO_save_end", 
        "_markers", 
        "_chain", 
        "_fileno", 
        "_flags2", 
        "_old_offset", 
        "_cur_column", 
        "_vtable_offset", 
        "_shortbuf", 
        "_offset", 
        "__pad1", 
        "__pad2", 
        "__pad3", 
        "__pad4", 
        "__pad5", 
        "_unused2", 
        "_IO_lock_t", 
        "_IO_marker", 
        "sockaddr_nl", 
        "nl_family", 
        "nl_pad", 
        "nl_pid", 
        "nl_groups", 
        "nlmsghdr", 
        "nlmsg_len", 
        "nlmsg_type", 
        "nlmsg_flags", 
        "nlmsg_seq", 
        "nlmsg_pid", 
        "rtattr", 
        "rta_len", 
        "rta_type", 
        "rtm_family", 
        "rtm_dst_len", 
        "rtm_src_len", 
        "rtm_tos", 
        "rtm_table", 
        "rtm_protocol", 
        "rtm_scope", 
        "rtm_type", 
        "rtm_flags", 
        "rtgenmsg", 
        "rtgen_family", 
        "ifinfomsg", 
        "ifi_family", 
        "__ifi_pad", 
        "ifi_type", 
        "ifi_index", 
        "ifi_flags", 
        "ifi_change", 
        "GetNextWord", 
        "_Z11GetNextWordPPc", 
        "aCommandLine", 
        "myfree", 
        "_Z6myfreePv", 
        "mymalloc", 
        "_Z8mymallocj", 
        "mystrndup", 
        "_Z9mystrndupPKcj", 
        "aValue", 
        "aCount", 
        "mystrdup", 
        "_Z8mystrdupPKc", 
        "aValue", 
        "ReportError", 
        "-_Z11ReportErrorPcS_i", 
        "aMessage", 
        "lineBuffer", 
        "GetNextGuid", 
        "_Z11GetNextGuidv", 
        "DetermineLocalAddressAndHardwareAddressFor", 
        "I_Z42DetermineLocalAddressAndHardwareAddressForPjPhj", 
        "aLocalAddress", 
        "aHardwareAddress", 
        "interfaceIndex", 
        "socketAddressLength", 
        "status", 
        "nladdr", 
        "Family", 
        "Bytelen", 
        "Bitlen", 
        "grRequest", 
        "glRequest", 
        "DetermineLocalAddressFor", 
        "<_Z24DetermineLocalAddressForj", 
        "localAddress", 
        "stderr", 
        "stderr", 
        "ut#bad", 
        "/glibc-tmp-fc55f83e00cc09fabc85367f1a3049c6/glibc-2.5/build-glibc-2.5/csu/crtn.S", 
        "/glibc-tmp-fc55f83e00cc09fabc85367f1a3049c6/glibc-2.5/csu", 
        "GNU AS 2.17.50.0.16", 
        "init.c", 
        "/glibc-tmp-fc55f83e00cc09fabc85367f1a3049c6/glibc-2.5/build-glibc-2.5/csu", 
        "crti.S", 
        "!/!=Z!gg//Z!!!", 
        "!/!=Z!", 
        "/usr/include/sys", 
        "/usr/include", 
        "/usr/include/bits", 
        "/usr/include/netinet", 
        "/usr/include/./libnet", 
        "/usr/lib/gcc/i486-slackware-linux/4.1.2/include", 
        "capture.cpp", 
        "stat.h", 
        "pcap-bpf.h", 
        "types.h", 
        "types.h", 
        "stdint.h", 
        "pcap.h", 
        "stat.h", 
        "time.h", 
        "libnet-structures.h", 
        "time.h", 
        "SipMessage.h", 
        "SipHeader.h", 
        "SipIdentifier.h", 
        "SipUri.h", 
        "SdpMessage.h", 
        "<built-in>", 
        "stdio.h", 
        "libio.h", 
        "stddef.h", 
        "getopt.h", 
        "hash.cpp", 
        "SdpMessage.cpp", 
        "SdpMessage.h", 
        "<>Y2>g@>g@>g@>g", 
        ".>Y1>g?>g@>g@>g@>g", 
        "<>Y2>g@>g", 
        "!.>Y1>", 
        "@>g@>g", 
        "<>g?>g@>gA>g", 
        "0uuvZh", 
        "SipHeader.cpp", 
        "SipHeader.h", 
        "SipIdentifier.h", 
        "SipUri.h", 
        "/<>Y1k", 
        "SipIdentifier.cpp", 
        "SipIdentifier.h", 
        "SipUri.h", 
        "$<>Y1k", 
        "/usr/include/netinet", 
        "/usr/include", 
        "SipMessage.cpp", 
        "SipMessage.h", 
        "stdint.h", 
        "SipHeader.h", 
        "SipIdentifier.h", 
        "SipUri.h", 
        ".>Y1>g?>g?>", 
        "?>g?>g?h", 
        "SipUri.cpp", 
        "SipUri.h", 
        "/usr/lib/gcc/i486-slackware-linux/4.1.2/include", 
        "/usr/include/bits", 
        "/usr/include/netinet", 
        "/usr/include", 
        "/usr/include/linux"
    ], 
    "metadata": {
        "output": {
            "pcap": {
                "basename": "dump.pcap", 
                "sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea", 
                "dirname": ""
            }
        }
    }
}